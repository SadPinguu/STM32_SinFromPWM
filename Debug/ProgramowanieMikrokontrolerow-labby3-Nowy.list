
ProgramowanieMikrokontrolerow-labby3-Nowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002470  0800f188  0800f188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115f8  080115f8  00013218  2**0
                  CONTENTS
  4 .ARM          00000008  080115f8  080115f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011600  08011600  00013218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011600  08011600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011604  08011604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08011608  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ac0  20000218  08011820  00013218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08011820  00013cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c1a  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004682  00000000  00000000  00033e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ca8  00000000  00000000  000384e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000163c  00000000  00000000  0003a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b5e1  00000000  00000000  0003b7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023967  00000000  00000000  00066dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105704  00000000  00000000  0008a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fe18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dec  00000000  00000000  0018fe5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00198c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f170 	.word	0x0800f170

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	0800f170 	.word	0x0800f170

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f001 fdec 	bl	8002b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f943 	bl	800124c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fc9b 	bl	8001900 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fca:	f000 fc2d 	bl	8001828 <MX_DMA_Init>
  MX_DMA2D_Init();
 8000fce:	f000 fa1f 	bl	8001410 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fd2:	f000 fc47 	bl	8001864 <MX_FMC_Init>
  MX_LTDC_Init();
 8000fd6:	f000 fa4d 	bl	8001474 <MX_LTDC_Init>
  MX_TIM2_Init();
 8000fda:	f000 fafd 	bl	80015d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000fde:	f000 fbf3 	bl	80017c8 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000fe2:	f000 f9a1 	bl	8001328 <MX_ADC3_Init>
  MX_CRC_Init();
 8000fe6:	f000 f9f1 	bl	80013cc <MX_CRC_Init>
  MX_TIM5_Init();
 8000fea:	f000 fb75 	bl	80016d8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  CreateSinTable();
 8000fee:	f000 fd5b 	bl	8001aa8 <CreateSinTable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitDisplay();
 8000ff2:	f000 fdbf 	bl	8001b74 <InitDisplay>
    {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	  if((uwTick % 2U) == 0U) //co 1ms
 8000ff6:	4b82      	ldr	r3, [pc, #520]	@ (8001200 <main+0x248>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f040 808a 	bne.w	8001118 <main+0x160>
  	  	  {
  	  	 	  tikTak1++;
 8001004:	4b7f      	ldr	r3, [pc, #508]	@ (8001204 <main+0x24c>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	3301      	adds	r3, #1
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b7d      	ldr	r3, [pc, #500]	@ (8001204 <main+0x24c>)
 800100e:	801a      	strh	r2, [r3, #0]
  	  	 	  tikTak2++;
 8001010:	4b7d      	ldr	r3, [pc, #500]	@ (8001208 <main+0x250>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b7b      	ldr	r3, [pc, #492]	@ (8001208 <main+0x250>)
 800101a:	801a      	strh	r2, [r3, #0]
  	  	 	  tikTak3++;
 800101c:	4b7b      	ldr	r3, [pc, #492]	@ (800120c <main+0x254>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b79      	ldr	r3, [pc, #484]	@ (800120c <main+0x254>)
 8001026:	801a      	strh	r2, [r3, #0]
  	  	 	  tikTak4++;
 8001028:	4b79      	ldr	r3, [pc, #484]	@ (8001210 <main+0x258>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	3301      	adds	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b77      	ldr	r3, [pc, #476]	@ (8001210 <main+0x258>)
 8001032:	801a      	strh	r2, [r3, #0]
  	  	 	  uwTick = 1;
 8001034:	4b72      	ldr	r3, [pc, #456]	@ (8001200 <main+0x248>)
 8001036:	2201      	movs	r2, #1
 8001038:	601a      	str	r2, [r3, #0]

  	  	 	  HAL_ADC_Start_IT(&hadc3);
 800103a:	4876      	ldr	r0, [pc, #472]	@ (8001214 <main+0x25c>)
 800103c:	f001 fe72 	bl	8002d24 <HAL_ADC_Start_IT>
  	  	 	  //////// SREDNIA DO ZADANA 9 /////////
  	  	 	  //adcAvg = 0;
  	  	 	  float tmpAvg = 0;
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  	  	 	  for(int i=0; i<4; i++) {
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e027      	b.n	800109c <main+0xe4>
  	  	 		 float tmp = dmaBuffor[i];
 800104c:	4a72      	ldr	r2, [pc, #456]	@ (8001218 <main+0x260>)
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001054:	ee07 3a90 	vmov	s15, r3
 8001058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800105c:	edc7 7a03 	vstr	s15, [r7, #12]
  	  	 		 tmpAvg += tmp / 4095.0;
 8001060:	6978      	ldr	r0, [r7, #20]
 8001062:	f7ff fa91 	bl	8000588 <__aeabi_f2d>
 8001066:	4604      	mov	r4, r0
 8001068:	460d      	mov	r5, r1
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f7ff fa8c 	bl	8000588 <__aeabi_f2d>
 8001070:	a35d      	add	r3, pc, #372	@ (adr r3, 80011e8 <main+0x230>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	f7ff fc09 	bl	800088c <__aeabi_ddiv>
 800107a:	4602      	mov	r2, r0
 800107c:	460b      	mov	r3, r1
 800107e:	4620      	mov	r0, r4
 8001080:	4629      	mov	r1, r5
 8001082:	f7ff f923 	bl	80002cc <__adddf3>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	f7ff fdcb 	bl	8000c28 <__aeabi_d2f>
 8001092:	4603      	mov	r3, r0
 8001094:	617b      	str	r3, [r7, #20]
  	  	 	  for(int i=0; i<4; i++) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	3301      	adds	r3, #1
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	2b03      	cmp	r3, #3
 80010a0:	ddd4      	ble.n	800104c <main+0x94>
  	  	 	  }
  	  	 	 tmpAvg /= 4U;
 80010a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80010a6:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80010aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ae:	edc7 7a05 	vstr	s15, [r7, #20]
  	  	 	 adcAvg = tmpAvg;
 80010b2:	4a5a      	ldr	r2, [pc, #360]	@ (800121c <main+0x264>)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	6013      	str	r3, [r2, #0]

  	  	 	 if (adcAvg < 0.05) {
 80010b8:	4b58      	ldr	r3, [pc, #352]	@ (800121c <main+0x264>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa63 	bl	8000588 <__aeabi_f2d>
 80010c2:	a34b      	add	r3, pc, #300	@ (adr r3, 80011f0 <main+0x238>)
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f7ff fd28 	bl	8000b1c <__aeabi_dcmplt>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <main+0x122>
  	  	 		 adcAvg = 0.05;
 80010d2:	4b52      	ldr	r3, [pc, #328]	@ (800121c <main+0x264>)
 80010d4:	4a52      	ldr	r2, [pc, #328]	@ (8001220 <main+0x268>)
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e00f      	b.n	80010fa <main+0x142>
  	  	 	 } else if (adcAvg > 0.9) {
 80010da:	4b50      	ldr	r3, [pc, #320]	@ (800121c <main+0x264>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa52 	bl	8000588 <__aeabi_f2d>
 80010e4:	a344      	add	r3, pc, #272	@ (adr r3, 80011f8 <main+0x240>)
 80010e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ea:	f7ff fd35 	bl	8000b58 <__aeabi_dcmpgt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <main+0x142>
  	  	 		 adcAvg = 0.9;
 80010f4:	4b49      	ldr	r3, [pc, #292]	@ (800121c <main+0x264>)
 80010f6:	4a4b      	ldr	r2, [pc, #300]	@ (8001224 <main+0x26c>)
 80010f8:	601a      	str	r2, [r3, #0]
  	  	 	 }

  	  	 	 harmonic_amplitude = adcAvg * 100;
 80010fa:	4b48      	ldr	r3, [pc, #288]	@ (800121c <main+0x264>)
 80010fc:	edd3 7a00 	vldr	s15, [r3]
 8001100:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001228 <main+0x270>
 8001104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b45      	ldr	r3, [pc, #276]	@ (800122c <main+0x274>)
 8001116:	701a      	strb	r2, [r3, #0]
  	  	 	  ////////////////KONIEC SREDNIA //////////
  	  	  }

  	  	  if((tikTak1 % 11) == 0) //co 10ms sie zmienia
 8001118:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <main+0x24c>)
 800111a:	8819      	ldrh	r1, [r3, #0]
 800111c:	4b44      	ldr	r3, [pc, #272]	@ (8001230 <main+0x278>)
 800111e:	fba3 2301 	umull	r2, r3, r3, r1
 8001122:	08da      	lsrs	r2, r3, #3
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	1acb      	subs	r3, r1, r3
 8001130:	b29b      	uxth	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <main+0x184>
  	  	  {
  	  		  //HAL_GPIO_TogglePin(GPIOB, LedH4_Pin);
  	  		  tikTak1 = 1;
 8001136:	4b33      	ldr	r3, [pc, #204]	@ (8001204 <main+0x24c>)
 8001138:	2201      	movs	r2, #1
 800113a:	801a      	strh	r2, [r3, #0]
  	  		  //HAL_ADC_Start_DMA(&hadc3, dmaBuffor, 4);
  	  	  }
  	  	  if((tikTak2 % 101U) == 0) // co 100ms
 800113c:	4b32      	ldr	r3, [pc, #200]	@ (8001208 <main+0x250>)
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	4a3c      	ldr	r2, [pc, #240]	@ (8001234 <main+0x27c>)
 8001142:	fba2 1203 	umull	r1, r2, r2, r3
 8001146:	1a99      	subs	r1, r3, r2
 8001148:	0849      	lsrs	r1, r1, #1
 800114a:	440a      	add	r2, r1
 800114c:	0992      	lsrs	r2, r2, #6
 800114e:	2165      	movs	r1, #101	@ 0x65
 8001150:	fb01 f202 	mul.w	r2, r1, r2
 8001154:	1a9b      	subs	r3, r3, r2
 8001156:	b29b      	uxth	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	d117      	bne.n	800118c <main+0x1d4>
  	      {
  	  		  HAL_GPIO_TogglePin(GPIOG, LedH5_Pin);
 800115c:	2180      	movs	r1, #128	@ 0x80
 800115e:	4836      	ldr	r0, [pc, #216]	@ (8001238 <main+0x280>)
 8001160:	f003 fbdd 	bl	800491e <HAL_GPIO_TogglePin>
  	  		  tikTak2 = 1;
 8001164:	4b28      	ldr	r3, [pc, #160]	@ (8001208 <main+0x250>)
 8001166:	2201      	movs	r2, #1
 8001168:	801a      	strh	r2, [r3, #0]

  	  		  BSP_TS_GetState(&TS_State);
 800116a:	4834      	ldr	r0, [pc, #208]	@ (800123c <main+0x284>)
 800116c:	f009 fa0e 	bl	800a58c <BSP_TS_GetState>
  	  		  if (TS_State.touchDetected) { //tutaj dodać lub po zmianie wartości odczytanej z potencjometru
 8001170:	4b32      	ldr	r3, [pc, #200]	@ (800123c <main+0x284>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d007      	beq.n	8001188 <main+0x1d0>
  	  			  ProcessTouch(TS_State.touchX[0], TS_State.touchY[0]);
 8001178:	4b30      	ldr	r3, [pc, #192]	@ (800123c <main+0x284>)
 800117a:	885b      	ldrh	r3, [r3, #2]
 800117c:	4a2f      	ldr	r2, [pc, #188]	@ (800123c <main+0x284>)
 800117e:	8992      	ldrh	r2, [r2, #12]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fdec 	bl	8001d60 <ProcessTouch>
  	  		  }
  	  		  UpdateDisplay();
 8001188:	f000 fd82 	bl	8001c90 <UpdateDisplay>
  	  	  }
  	  	  if((tikTak3 % 1001U) == 0U) //co 1000ms (1s)
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <main+0x254>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4a2b      	ldr	r2, [pc, #172]	@ (8001240 <main+0x288>)
 8001192:	fba2 1203 	umull	r1, r2, r2, r3
 8001196:	1a99      	subs	r1, r3, r2
 8001198:	0849      	lsrs	r1, r1, #1
 800119a:	440a      	add	r2, r1
 800119c:	0a52      	lsrs	r2, r2, #9
 800119e:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 80011a2:	fb01 f202 	mul.w	r2, r1, r2
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d106      	bne.n	80011bc <main+0x204>
  	  	  {
  	  	  	  HAL_GPIO_TogglePin(LedH6_GPIO_Port, LedH6_Pin);
 80011ae:	2104      	movs	r1, #4
 80011b0:	4824      	ldr	r0, [pc, #144]	@ (8001244 <main+0x28c>)
 80011b2:	f003 fbb4 	bl	800491e <HAL_GPIO_TogglePin>
  	  	  	  tikTak3 = 1;
 80011b6:	4b15      	ldr	r3, [pc, #84]	@ (800120c <main+0x254>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	801a      	strh	r2, [r3, #0]
  	  	  }
  	  	  if((tikTak4 % 10001U) == 0U) //co 10 000ms
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <main+0x258>)
 80011be:	881b      	ldrh	r3, [r3, #0]
 80011c0:	4a21      	ldr	r2, [pc, #132]	@ (8001248 <main+0x290>)
 80011c2:	fba2 1203 	umull	r1, r2, r2, r3
 80011c6:	0b52      	lsrs	r2, r2, #13
 80011c8:	f242 7111 	movw	r1, #10001	@ 0x2711
 80011cc:	fb01 f202 	mul.w	r2, r1, r2
 80011d0:	1a9b      	subs	r3, r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f47f af0e 	bne.w	8000ff6 <main+0x3e>
  	  	  {
  	  	   	  tikTak4 = 1;
 80011da:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <main+0x258>)
 80011dc:	2201      	movs	r2, #1
 80011de:	801a      	strh	r2, [r3, #0]
  	  if((uwTick % 2U) == 0U) //co 1ms
 80011e0:	e709      	b.n	8000ff6 <main+0x3e>
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40affe00 	.word	0x40affe00
 80011f0:	9999999a 	.word	0x9999999a
 80011f4:	3fa99999 	.word	0x3fa99999
 80011f8:	cccccccd 	.word	0xcccccccd
 80011fc:	3feccccc 	.word	0x3feccccc
 8001200:	200008b0 	.word	0x200008b0
 8001204:	20000000 	.word	0x20000000
 8001208:	20000002 	.word	0x20000002
 800120c:	20000004 	.word	0x20000004
 8001210:	20000006 	.word	0x20000006
 8001214:	20000234 	.word	0x20000234
 8001218:	2000053c 	.word	0x2000053c
 800121c:	20000544 	.word	0x20000544
 8001220:	3d4ccccd 	.word	0x3d4ccccd
 8001224:	3f666666 	.word	0x3f666666
 8001228:	42c80000 	.word	0x42c80000
 800122c:	2000000e 	.word	0x2000000e
 8001230:	ba2e8ba3 	.word	0xba2e8ba3
 8001234:	446f8657 	.word	0x446f8657
 8001238:	40021800 	.word	0x40021800
 800123c:	2000086c 	.word	0x2000086c
 8001240:	05e1d27b 	.word	0x05e1d27b
 8001244:	40022000 	.word	0x40022000
 8001248:	d1b1b919 	.word	0xd1b1b919

0800124c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b094      	sub	sp, #80	@ 0x50
 8001250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2230      	movs	r2, #48	@ 0x30
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f00a f951 	bl	800b502 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001270:	f004 fcc6 	bl	8005c00 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <SystemClock_Config+0xd4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	4a29      	ldr	r2, [pc, #164]	@ (8001320 <SystemClock_Config+0xd4>)
 800127a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800127e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001280:	4b27      	ldr	r3, [pc, #156]	@ (8001320 <SystemClock_Config+0xd4>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001288:	60bb      	str	r3, [r7, #8]
 800128a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <SystemClock_Config+0xd8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a24      	ldr	r2, [pc, #144]	@ (8001324 <SystemClock_Config+0xd8>)
 8001292:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <SystemClock_Config+0xd8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ae:	2302      	movs	r3, #2
 80012b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80012b8:	230c      	movs	r3, #12
 80012ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012bc:	23c0      	movs	r3, #192	@ 0xc0
 80012be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c0:	2302      	movs	r3, #2
 80012c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012c4:	2302      	movs	r3, #2
 80012c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fcf7 	bl	8005cc0 <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80012d8:	f000 fdda 	bl	8001e90 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012dc:	f004 fca0 	bl	8005c20 <HAL_PWREx_EnableOverDrive>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012e6:	f000 fdd3 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ea:	230f      	movs	r3, #15
 80012ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	2302      	movs	r3, #2
 80012f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2106      	movs	r1, #6
 8001308:	4618      	mov	r0, r3
 800130a:	f004 ff7d 	bl	8006208 <HAL_RCC_ClockConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001314:	f000 fdbc 	bl	8001e90 <Error_Handler>
  }
}
 8001318:	bf00      	nop
 800131a:	3750      	adds	r7, #80	@ 0x50
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800133c:	4a21      	ldr	r2, [pc, #132]	@ (80013c4 <MX_ADC3_Init+0x9c>)
 800133e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001342:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001346:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001348:	4b1d      	ldr	r3, [pc, #116]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001356:	2201      	movs	r2, #1
 8001358:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001362:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001364:	2200      	movs	r2, #0
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <MX_ADC3_Init+0xa0>)
 800136c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800136e:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001376:	2201      	movs	r2, #1
 8001378:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001382:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_ADC3_Init+0x98>)
 8001384:	2201      	movs	r2, #1
 8001386:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	@ (80013c0 <MX_ADC3_Init+0x98>)
 800138a:	f001 fc87 	bl	8002c9c <HAL_ADC_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001394:	f000 fd7c 	bl	8001e90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001398:	2308      	movs	r3, #8
 800139a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800139c:	2301      	movs	r3, #1
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_ADC3_Init+0x98>)
 80013aa:	f001 fec1 	bl	8003130 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80013b4:	f000 fd6c 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000234 	.word	0x20000234
 80013c4:	40012200 	.word	0x40012200
 80013c8:	0f000001 	.word	0x0f000001

080013cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013d2:	4a0e      	ldr	r2, [pc, #56]	@ (800140c <MX_CRC_Init+0x40>)
 80013d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013de:	2200      	movs	r2, #0
 80013e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_CRC_Init+0x3c>)
 80013f6:	f002 fa07 	bl	8003808 <HAL_CRC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001400:	f000 fd46 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	200002dc 	.word	0x200002dc
 800140c:	40023000 	.word	0x40023000

08001410 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <MX_DMA2D_Init+0x60>)
 8001418:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_DMA2D_Init+0x5c>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_DMA2D_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_DMA2D_Init+0x5c>)
 800143a:	2200      	movs	r2, #0
 800143c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800143e:	4b0b      	ldr	r3, [pc, #44]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001440:	2200      	movs	r2, #0
 8001442:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001446:	f002 fe19 	bl	800407c <HAL_DMA2D_Init>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001450:	f000 fd1e 	bl	8001e90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001454:	2101      	movs	r1, #1
 8001456:	4805      	ldr	r0, [pc, #20]	@ (800146c <MX_DMA2D_Init+0x5c>)
 8001458:	f002 ff6e 	bl	8004338 <HAL_DMA2D_ConfigLayer>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001462:	f000 fd15 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000300 	.word	0x20000300
 8001470:	4002b000 	.word	0x4002b000

08001474 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b09a      	sub	sp, #104	@ 0x68
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800147a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800147e:	2234      	movs	r2, #52	@ 0x34
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f00a f83d 	bl	800b502 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001488:	463b      	mov	r3, r7
 800148a:	2234      	movs	r2, #52	@ 0x34
 800148c:	2100      	movs	r1, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00a f837 	bl	800b502 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001494:	4b4e      	ldr	r3, [pc, #312]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 8001496:	4a4f      	ldr	r2, [pc, #316]	@ (80015d4 <MX_LTDC_Init+0x160>)
 8001498:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800149a:	4b4d      	ldr	r3, [pc, #308]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80014a0:	4b4b      	ldr	r3, [pc, #300]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80014a6:	4b4a      	ldr	r3, [pc, #296]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80014ac:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80014b2:	4b47      	ldr	r3, [pc, #284]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80014b8:	4b45      	ldr	r3, [pc, #276]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80014be:	4b44      	ldr	r3, [pc, #272]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014c0:	220e      	movs	r2, #14
 80014c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80014c4:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014c6:	2205      	movs	r2, #5
 80014c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80014ca:	4b41      	ldr	r3, [pc, #260]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014cc:	f240 228e 	movw	r2, #654	@ 0x28e
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80014d2:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014d4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80014d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014dc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80014e2:	4b3b      	ldr	r3, [pc, #236]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014e4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80014e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80014ea:	4b39      	ldr	r3, [pc, #228]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80014f2:	4b37      	ldr	r3, [pc, #220]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80014fa:	4b35      	ldr	r3, [pc, #212]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001502:	4833      	ldr	r0, [pc, #204]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 8001504:	f004 f804 	bl	8005510 <HAL_LTDC_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800150e:	f000 fcbf 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001522:	2300      	movs	r3, #0
 8001524:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001526:	2300      	movs	r3, #0
 8001528:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800152e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001532:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001534:	2305      	movs	r3, #5
 8001536:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	481c      	ldr	r0, [pc, #112]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 8001560:	f004 f968 	bl	8005834 <HAL_LTDC_ConfigLayer>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800156a:	f000 fc91 	bl	8001e90 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800158a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001590:	2305      	movs	r3, #5
 8001592:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80015b2:	463b      	mov	r3, r7
 80015b4:	2201      	movs	r2, #1
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_LTDC_Init+0x15c>)
 80015ba:	f004 f93b 	bl	8005834 <HAL_LTDC_ConfigLayer>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80015c4:	f000 fc64 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3768      	adds	r7, #104	@ 0x68
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000340 	.word	0x20000340
 80015d4:	40016800 	.word	0x40016800

080015d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	@ 0x38
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800160a:	4b32      	ldr	r3, [pc, #200]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 800160c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001610:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001612:	4b30      	ldr	r3, [pc, #192]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001618:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 800161a:	2220      	movs	r2, #32
 800161c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800161e:	4b2d      	ldr	r3, [pc, #180]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001620:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800162c:	4b29      	ldr	r3, [pc, #164]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001632:	4828      	ldr	r0, [pc, #160]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001634:	f005 fc4f 	bl	8006ed6 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800163e:	f000 fc27 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	4619      	mov	r1, r3
 800164e:	4821      	ldr	r0, [pc, #132]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001650:	f006 f92c 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800165a:	f000 fc19 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800165e:	481d      	ldr	r0, [pc, #116]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 8001660:	f005 fc90 	bl	8006f84 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800166a:	f000 fc11 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001676:	f107 031c 	add.w	r3, r7, #28
 800167a:	4619      	mov	r1, r3
 800167c:	4815      	ldr	r0, [pc, #84]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 800167e:	f006 fddb 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001688:	f000 fc02 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	@ 0x60
 800168e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169e:	463b      	mov	r3, r7
 80016a0:	2200      	movs	r2, #0
 80016a2:	4619      	mov	r1, r3
 80016a4:	480b      	ldr	r0, [pc, #44]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 80016a6:	f005 ffed 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80016b0:	f000 fbee 	bl	8001e90 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699a      	ldr	r2, [r3, #24]
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0208 	bic.w	r2, r2, #8
 80016c2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016c4:	4803      	ldr	r0, [pc, #12]	@ (80016d4 <MX_TIM2_Init+0xfc>)
 80016c6:	f000 fecd 	bl	8002464 <HAL_TIM_MspPostInit>

}
 80016ca:	bf00      	nop
 80016cc:	3738      	adds	r7, #56	@ 0x38
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200003e8 	.word	0x200003e8

080016d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08e      	sub	sp, #56	@ 0x38
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]
 8001700:	609a      	str	r2, [r3, #8]
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	615a      	str	r2, [r3, #20]
 8001708:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800170a:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800170c:	4a2d      	ldr	r2, [pc, #180]	@ (80017c4 <MX_TIM5_Init+0xec>)
 800170e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001716:	4b2a      	ldr	r3, [pc, #168]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 8001718:	2220      	movs	r2, #32
 800171a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 800171c:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800171e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001722:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172a:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800172c:	2280      	movs	r2, #128	@ 0x80
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001730:	4823      	ldr	r0, [pc, #140]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 8001732:	f005 fbd0 	bl	8006ed6 <HAL_TIM_Base_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 800173c:	f000 fba8 	bl	8001e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001746:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800174a:	4619      	mov	r1, r3
 800174c:	481c      	ldr	r0, [pc, #112]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800174e:	f006 f8ad 	bl	80078ac <HAL_TIM_ConfigClockSource>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001758:	f000 fb9a 	bl	8001e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800175c:	4818      	ldr	r0, [pc, #96]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800175e:	f005 fc11 	bl	8006f84 <HAL_TIM_PWM_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001768:	f000 fb92 	bl	8001e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001774:	f107 031c 	add.w	r3, r7, #28
 8001778:	4619      	mov	r1, r3
 800177a:	4811      	ldr	r0, [pc, #68]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 800177c:	f006 fd5c 	bl	8008238 <HAL_TIMEx_MasterConfigSynchronization>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001786:	f000 fb83 	bl	8001e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800178a:	2360      	movs	r3, #96	@ 0x60
 800178c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 900;
 800178e:	f44f 7361 	mov.w	r3, #900	@ 0x384
 8001792:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001794:	2300      	movs	r3, #0
 8001796:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179c:	463b      	mov	r3, r7
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 80017a4:	f005 ff6e 	bl	8007684 <HAL_TIM_PWM_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM5_Init+0xda>
  {
    Error_Handler();
 80017ae:	f000 fb6f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <MX_TIM5_Init+0xe8>)
 80017b4:	f000 fe56 	bl	8002464 <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3738      	adds	r7, #56	@ 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000434 	.word	0x20000434
 80017c4:	40000c00 	.word	0x40000c00

080017c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017cc:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <MX_USART1_UART_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_USART1_UART_Init+0x58>)
 800180c:	f006 fdc0 	bl	8008390 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 fb3b 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000480 	.word	0x20000480
 8001824:	40011000 	.word	0x40011000

08001828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_DMA_Init+0x38>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a0b      	ldr	r2, [pc, #44]	@ (8001860 <MX_DMA_Init+0x38>)
 8001834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_DMA_Init+0x38>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2038      	movs	r0, #56	@ 0x38
 800184c:	f001 ffa5 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001850:	2038      	movs	r0, #56	@ 0x38
 8001852:	f001 ffbe 	bl	80037d2 <HAL_NVIC_EnableIRQ>

}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]
 800187a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800187c:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_FMC_Init+0x94>)
 800187e:	4a1f      	ldr	r2, [pc, #124]	@ (80018fc <MX_FMC_Init+0x98>)
 8001880:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_FMC_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_FMC_Init+0x94>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800188e:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_FMC_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001894:	4b18      	ldr	r3, [pc, #96]	@ (80018f8 <MX_FMC_Init+0x94>)
 8001896:	2210      	movs	r2, #16
 8001898:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_FMC_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80018a0:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80018ac:	4b12      	ldr	r3, [pc, #72]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80018be:	2310      	movs	r3, #16
 80018c0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80018c2:	2310      	movs	r3, #16
 80018c4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80018ca:	2310      	movs	r3, #16
 80018cc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80018ce:	2310      	movs	r3, #16
 80018d0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80018d2:	2310      	movs	r3, #16
 80018d4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80018d6:	2310      	movs	r3, #16
 80018d8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4619      	mov	r1, r3
 80018de:	4806      	ldr	r0, [pc, #24]	@ (80018f8 <MX_FMC_Init+0x94>)
 80018e0:	f005 fa68 	bl	8006db4 <HAL_SDRAM_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80018ea:	f000 fad1 	bl	8001e90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018ee:	bf00      	nop
 80018f0:	3720      	adds	r7, #32
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000508 	.word	0x20000508
 80018fc:	a0000140 	.word	0xa0000140

08001900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b090      	sub	sp, #64	@ 0x40
 8001904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001906:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001916:	4b60      	ldr	r3, [pc, #384]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a5f      	ldr	r2, [pc, #380]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800191c:	f043 0310 	orr.w	r3, r3, #16
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b5d      	ldr	r3, [pc, #372]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0310 	and.w	r3, r3, #16
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	4a59      	ldr	r2, [pc, #356]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	@ 0x30
 800193a:	4b57      	ldr	r3, [pc, #348]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
 8001944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	4b54      	ldr	r3, [pc, #336]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	4a53      	ldr	r2, [pc, #332]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6313      	str	r3, [r2, #48]	@ 0x30
 8001952:	4b51      	ldr	r3, [pc, #324]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	623b      	str	r3, [r7, #32]
 800195c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800195e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a4d      	ldr	r2, [pc, #308]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001964:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001976:	4b48      	ldr	r3, [pc, #288]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a47      	ldr	r2, [pc, #284]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800197c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b45      	ldr	r3, [pc, #276]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800198e:	4b42      	ldr	r3, [pc, #264]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a41      	ldr	r2, [pc, #260]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a98 <MX_GPIO_Init+0x198>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0308 	and.w	r3, r3, #8
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b39      	ldr	r3, [pc, #228]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019be:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a35      	ldr	r2, [pc, #212]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b33      	ldr	r3, [pc, #204]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019d6:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	4a2f      	ldr	r2, [pc, #188]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a29      	ldr	r2, [pc, #164]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019f4:	f043 0320 	orr.w	r3, r3, #32
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <MX_GPIO_Init+0x198>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a23      	ldr	r2, [pc, #140]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b21      	ldr	r3, [pc, #132]	@ (8001a98 <MX_GPIO_Init+0x198>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH4_GPIO_Port, LedH4_Pin, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2110      	movs	r1, #16
 8001a22:	481e      	ldr	r0, [pc, #120]	@ (8001a9c <MX_GPIO_Init+0x19c>)
 8001a24:	f002 ff62 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH6_GPIO_Port, LedH6_Pin, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2104      	movs	r1, #4
 8001a2c:	481c      	ldr	r0, [pc, #112]	@ (8001aa0 <MX_GPIO_Init+0x1a0>)
 8001a2e:	f002 ff5d 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH5_GPIO_Port, LedH5_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2180      	movs	r1, #128	@ 0x80
 8001a36:	481b      	ldr	r0, [pc, #108]	@ (8001aa4 <MX_GPIO_Init+0x1a4>)
 8001a38:	f002 ff58 	bl	80048ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedH4_Pin */
  GPIO_InitStruct.Pin = LedH4_Pin;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a40:	2301      	movs	r3, #1
 8001a42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a44:	2302      	movs	r3, #2
 8001a46:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH4_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4812      	ldr	r0, [pc, #72]	@ (8001a9c <MX_GPIO_Init+0x19c>)
 8001a54:	f002 fd9e 	bl	8004594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedH6_Pin */
  GPIO_InitStruct.Pin = LedH6_Pin;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a60:	2302      	movs	r3, #2
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH6_GPIO_Port, &GPIO_InitStruct);
 8001a68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	@ (8001aa0 <MX_GPIO_Init+0x1a0>)
 8001a70:	f002 fd90 	bl	8004594 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedH5_Pin */
  GPIO_InitStruct.Pin = LedH5_Pin;
 8001a74:	2380      	movs	r3, #128	@ 0x80
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH5_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_GPIO_Init+0x1a4>)
 8001a8c:	f002 fd82 	bl	8004594 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a90:	bf00      	nop
 8001a92:	3740      	adds	r7, #64	@ 0x40
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021800 	.word	0x40021800

08001aa8 <CreateSinTable>:

/* USER CODE BEGIN 4 */
static void CreateSinTable()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	float tmp = 6.28 / 200;
 8001aae:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <CreateSinTable+0xbc>)
 8001ab0:	603b      	str	r3, [r7, #0]
	int i = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
	for(i = 0; i < 200; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	e04a      	b.n	8001b52 <CreateSinTable+0xaa>
	{
		sinTable[i] = 990 * (sin(tmp * i) + 1);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac6:	edd7 7a00 	vldr	s15, [r7]
 8001aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ace:	ee17 0a90 	vmov	r0, s15
 8001ad2:	f7fe fd59 	bl	8000588 <__aeabi_f2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	ec43 2b10 	vmov	d0, r2, r3
 8001ade:	f00b fddb 	bl	800d698 <sin>
 8001ae2:	ec51 0b10 	vmov	r0, r1, d0
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b1f      	ldr	r3, [pc, #124]	@ (8001b68 <CreateSinTable+0xc0>)
 8001aec:	f7fe fbee 	bl	80002cc <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <CreateSinTable+0xc4>)
 8001afe:	f7fe fd9b 	bl	8000638 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4610      	mov	r0, r2
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f7ff f86d 	bl	8000be8 <__aeabi_d2uiz>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4917      	ldr	r1, [pc, #92]	@ (8001b70 <CreateSinTable+0xc8>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		if(sinTable[i] > PWM_MAX_VALUE) { sinTable[i] = PWM_MAX_VALUE; }
 8001b18:	4a15      	ldr	r2, [pc, #84]	@ (8001b70 <CreateSinTable+0xc8>)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b20:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d906      	bls.n	8001b36 <CreateSinTable+0x8e>
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <CreateSinTable+0xc8>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f240 71c6 	movw	r1, #1990	@ 0x7c6
 8001b30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b34:	e00a      	b.n	8001b4c <CreateSinTable+0xa4>
		else if (sinTable[i] < PWM_MIN_VALUE) { sinTable[i] = PWM_MIN_VALUE; }
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <CreateSinTable+0xc8>)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	2b09      	cmp	r3, #9
 8001b40:	d804      	bhi.n	8001b4c <CreateSinTable+0xa4>
 8001b42:	4a0b      	ldr	r2, [pc, #44]	@ (8001b70 <CreateSinTable+0xc8>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	210a      	movs	r1, #10
 8001b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < 200; i++)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2bc7      	cmp	r3, #199	@ 0xc7
 8001b56:	ddb1      	ble.n	8001abc <CreateSinTable+0x14>
	}
}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	3d009d49 	.word	0x3d009d49
 8001b68:	3ff00000 	.word	0x3ff00000
 8001b6c:	408ef000 	.word	0x408ef000
 8001b70:	2000054c 	.word	0x2000054c

08001b74 <InitDisplay>:


void InitDisplay() {
 8001b74:	b598      	push	{r3, r4, r7, lr}
 8001b76:	af00      	add	r7, sp, #0
    // Inicjalizacja LCD
    BSP_LCD_Init();
 8001b78:	f007 fdce 	bl	8009718 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001b7c:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001b80:	2000      	movs	r0, #0
 8001b82:	f007 fe61 	bl	8009848 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(0);
 8001b86:	2000      	movs	r0, #0
 8001b88:	f007 febe 	bl	8009908 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f007 ff16 	bl	80099c0 <BSP_LCD_Clear>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f007 fede 	bl	8009958 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b9c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001ba0:	f007 fec2 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_SetFont(&Font24);
 8001ba4:	480a      	ldr	r0, [pc, #40]	@ (8001bd0 <InitDisplay+0x5c>)
 8001ba6:	f007 fef1 	bl	800998c <BSP_LCD_SetFont>

    // Inicjalizacja ekranu dotykowego
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001baa:	f007 fe25 	bl	80097f8 <BSP_LCD_GetXSize>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	b29c      	uxth	r4, r3
 8001bb2:	f007 fe35 	bl	8009820 <BSP_LCD_GetYSize>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f008 fca5 	bl	800a50c <BSP_TS_Init>

    // Rysowanie przycisków
    DrawButtons();
 8001bc2:	f000 f807 	bl	8001bd4 <DrawButtons>

    // Aktualizacja wyświetlanych wartości
    UpdateDisplay();
 8001bc6:	f000 f863 	bl	8001c90 <UpdateDisplay>
}
 8001bca:	bf00      	nop
 8001bcc:	bd98      	pop	{r3, r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000001c 	.word	0x2000001c

08001bd4 <DrawButtons>:

void DrawButtons(void) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
    // Rysowanie przycisku On/Off
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001bd8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8001bdc:	f007 fea4 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(BUTTON_ON_OFF_X, BUTTON_ON_OFF_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 8001be0:	2332      	movs	r3, #50	@ 0x32
 8001be2:	229b      	movs	r2, #155	@ 0x9b
 8001be4:	2114      	movs	r1, #20
 8001be6:	2014      	movs	r0, #20
 8001be8:	f008 f866 	bl	8009cb8 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001bec:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001bf0:	f007 fe9a 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(BUTTON_ON_OFF_X + 10, BUTTON_ON_OFF_Y + 15, (uint8_t *)"On/Off", LEFT_MODE);
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	4a20      	ldr	r2, [pc, #128]	@ (8001c78 <DrawButtons+0xa4>)
 8001bf8:	2123      	movs	r1, #35	@ 0x23
 8001bfa:	201e      	movs	r0, #30
 8001bfc:	f007 ff4c 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Rysowanie przycisku Tryb
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001c00:	481e      	ldr	r0, [pc, #120]	@ (8001c7c <DrawButtons+0xa8>)
 8001c02:	f007 fe91 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(BUTTON_MODE_X, BUTTON_MODE_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 8001c06:	2332      	movs	r3, #50	@ 0x32
 8001c08:	229b      	movs	r2, #155	@ 0x9b
 8001c0a:	2150      	movs	r1, #80	@ 0x50
 8001c0c:	2014      	movs	r0, #20
 8001c0e:	f008 f853 	bl	8009cb8 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c12:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c16:	f007 fe87 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(BUTTON_MODE_X + 10, BUTTON_MODE_Y + 15, (uint8_t *)"Tryb", LEFT_MODE);
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	4a18      	ldr	r2, [pc, #96]	@ (8001c80 <DrawButtons+0xac>)
 8001c1e:	215f      	movs	r1, #95	@ 0x5f
 8001c20:	201e      	movs	r0, #30
 8001c22:	f007 ff39 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Rysowanie przycisku Amplituda Up
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c26:	4817      	ldr	r0, [pc, #92]	@ (8001c84 <DrawButtons+0xb0>)
 8001c28:	f007 fe7e 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(BUTTON_AMPLITUDE_UP_X, BUTTON_AMPLITUDE_UP_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 8001c2c:	2332      	movs	r3, #50	@ 0x32
 8001c2e:	229b      	movs	r2, #155	@ 0x9b
 8001c30:	218c      	movs	r1, #140	@ 0x8c
 8001c32:	2014      	movs	r0, #20
 8001c34:	f008 f840 	bl	8009cb8 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c38:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c3c:	f007 fe74 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(BUTTON_AMPLITUDE_UP_X + 10, BUTTON_AMPLITUDE_UP_Y + 15, (uint8_t *)"Amp 1h +", LEFT_MODE);
 8001c40:	2303      	movs	r3, #3
 8001c42:	4a11      	ldr	r2, [pc, #68]	@ (8001c88 <DrawButtons+0xb4>)
 8001c44:	219b      	movs	r1, #155	@ 0x9b
 8001c46:	201e      	movs	r0, #30
 8001c48:	f007 ff26 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Rysowanie przycisku Amplituda Down
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001c4c:	480d      	ldr	r0, [pc, #52]	@ (8001c84 <DrawButtons+0xb0>)
 8001c4e:	f007 fe6b 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(BUTTON_AMPLITUDE_DOWN_X, BUTTON_AMPLITUDE_DOWN_Y, BUTTON_WIDTH, BUTTON_HEIGHT);
 8001c52:	2332      	movs	r3, #50	@ 0x32
 8001c54:	229b      	movs	r2, #155	@ 0x9b
 8001c56:	21c8      	movs	r1, #200	@ 0xc8
 8001c58:	2014      	movs	r0, #20
 8001c5a:	f008 f82d 	bl	8009cb8 <BSP_LCD_FillRect>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c5e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001c62:	f007 fe61 	bl	8009928 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(BUTTON_AMPLITUDE_DOWN_X + 10, BUTTON_AMPLITUDE_DOWN_Y + 15, (uint8_t *)"Amp 1h -", LEFT_MODE);
 8001c66:	2303      	movs	r3, #3
 8001c68:	4a08      	ldr	r2, [pc, #32]	@ (8001c8c <DrawButtons+0xb8>)
 8001c6a:	21d7      	movs	r1, #215	@ 0xd7
 8001c6c:	201e      	movs	r0, #30
 8001c6e:	f007 ff13 	bl	8009a98 <BSP_LCD_DisplayStringAt>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0800f188 	.word	0x0800f188
 8001c7c:	ff0000ff 	.word	0xff0000ff
 8001c80:	0800f190 	.word	0x0800f190
 8001c84:	ffff0000 	.word	0xffff0000
 8001c88:	0800f198 	.word	0x0800f198
 8001c8c:	0800f1a4 	.word	0x0800f1a4

08001c90 <UpdateDisplay>:

void UpdateDisplay() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
    char buffer[30];

    // Wyświetlanie stanu sygnału
    sprintf(buffer, "Sygnal: %s", signal_on ? "On " : "Off");
 8001c96:	4b24      	ldr	r3, [pc, #144]	@ (8001d28 <UpdateDisplay+0x98>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <UpdateDisplay+0x12>
 8001c9e:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <UpdateDisplay+0x9c>)
 8001ca0:	e000      	b.n	8001ca4 <UpdateDisplay+0x14>
 8001ca2:	4a23      	ldr	r2, [pc, #140]	@ (8001d30 <UpdateDisplay+0xa0>)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4923      	ldr	r1, [pc, #140]	@ (8001d34 <UpdateDisplay+0xa4>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f009 fbc7 	bl	800b43c <siprintf>
    BSP_LCD_DisplayStringAt(TEXT_OFFSET_X, TEXT_OFFSET_Y, (uint8_t *)buffer, LEFT_MODE);
 8001cae:	463a      	mov	r2, r7
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	2114      	movs	r1, #20
 8001cb4:	20c3      	movs	r0, #195	@ 0xc3
 8001cb6:	f007 feef 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Wyświetlanie trybu generacji
    sprintf(buffer, "Tryb: %s", generation_mode ? "1+3h" : "1+5h");
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <UpdateDisplay+0xa8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <UpdateDisplay+0x36>
 8001cc2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d3c <UpdateDisplay+0xac>)
 8001cc4:	e000      	b.n	8001cc8 <UpdateDisplay+0x38>
 8001cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d40 <UpdateDisplay+0xb0>)
 8001cc8:	463b      	mov	r3, r7
 8001cca:	491e      	ldr	r1, [pc, #120]	@ (8001d44 <UpdateDisplay+0xb4>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 fbb5 	bl	800b43c <siprintf>
    BSP_LCD_DisplayStringAt(TEXT_OFFSET_X, TEXT_OFFSET_Y + TEXT_SPACING, (uint8_t *)buffer, LEFT_MODE);
 8001cd2:	463a      	mov	r2, r7
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	2132      	movs	r1, #50	@ 0x32
 8001cd8:	20c3      	movs	r0, #195	@ 0xc3
 8001cda:	f007 fedd 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Wyświetlanie amplitudy podstawowej harmonicznej
    sprintf(buffer, "Amp. 1h: %.3d%%", fundamental_amplitude);
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <UpdateDisplay+0xb8>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	4919      	ldr	r1, [pc, #100]	@ (8001d4c <UpdateDisplay+0xbc>)
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f009 fba7 	bl	800b43c <siprintf>
    BSP_LCD_DisplayStringAt(TEXT_OFFSET_X, TEXT_OFFSET_Y + 2 * TEXT_SPACING, (uint8_t *)buffer, LEFT_MODE);
 8001cee:	463a      	mov	r2, r7
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	2150      	movs	r1, #80	@ 0x50
 8001cf4:	20c3      	movs	r0, #195	@ 0xc3
 8001cf6:	f007 fecf 	bl	8009a98 <BSP_LCD_DisplayStringAt>

    // Wyświetlanie amplitudy drugiej harmonicznej
    sprintf(buffer, "Amp. %s: %.3d%%", generation_mode ? "3h" : "5h", harmonic_amplitude);
 8001cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001d38 <UpdateDisplay+0xa8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <UpdateDisplay+0x76>
 8001d02:	4a13      	ldr	r2, [pc, #76]	@ (8001d50 <UpdateDisplay+0xc0>)
 8001d04:	e000      	b.n	8001d08 <UpdateDisplay+0x78>
 8001d06:	4a13      	ldr	r2, [pc, #76]	@ (8001d54 <UpdateDisplay+0xc4>)
 8001d08:	4b13      	ldr	r3, [pc, #76]	@ (8001d58 <UpdateDisplay+0xc8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	4913      	ldr	r1, [pc, #76]	@ (8001d5c <UpdateDisplay+0xcc>)
 8001d10:	f009 fb94 	bl	800b43c <siprintf>
    BSP_LCD_DisplayStringAt(TEXT_OFFSET_X, TEXT_OFFSET_Y + 3 * TEXT_SPACING, (uint8_t *)buffer, LEFT_MODE);
 8001d14:	463a      	mov	r2, r7
 8001d16:	2303      	movs	r3, #3
 8001d18:	216e      	movs	r1, #110	@ 0x6e
 8001d1a:	20c3      	movs	r0, #195	@ 0xc3
 8001d1c:	f007 febc 	bl	8009a98 <BSP_LCD_DisplayStringAt>
}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000898 	.word	0x20000898
 8001d2c:	0800f1b0 	.word	0x0800f1b0
 8001d30:	0800f1b4 	.word	0x0800f1b4
 8001d34:	0800f1b8 	.word	0x0800f1b8
 8001d38:	2000000c 	.word	0x2000000c
 8001d3c:	0800f1c4 	.word	0x0800f1c4
 8001d40:	0800f1cc 	.word	0x0800f1cc
 8001d44:	0800f1d4 	.word	0x0800f1d4
 8001d48:	2000000d 	.word	0x2000000d
 8001d4c:	0800f1e0 	.word	0x0800f1e0
 8001d50:	0800f1f0 	.word	0x0800f1f0
 8001d54:	0800f1f4 	.word	0x0800f1f4
 8001d58:	2000000e 	.word	0x2000000e
 8001d5c:	0800f1f8 	.word	0x0800f1f8

08001d60 <ProcessTouch>:

void ProcessTouch(uint16_t x, uint16_t y) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	460a      	mov	r2, r1
 8001d6a:	80fb      	strh	r3, [r7, #6]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	80bb      	strh	r3, [r7, #4]
    if (x > BUTTON_ON_OFF_X && x < BUTTON_ON_OFF_X + BUTTON_WIDTH &&
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	2b14      	cmp	r3, #20
 8001d74:	d92a      	bls.n	8001dcc <ProcessTouch+0x6c>
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	2bae      	cmp	r3, #174	@ 0xae
 8001d7a:	d827      	bhi.n	8001dcc <ProcessTouch+0x6c>
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	2b14      	cmp	r3, #20
 8001d80:	d924      	bls.n	8001dcc <ProcessTouch+0x6c>
        y > BUTTON_ON_OFF_Y && y < BUTTON_ON_OFF_Y + BUTTON_HEIGHT) {
 8001d82:	88bb      	ldrh	r3, [r7, #4]
 8001d84:	2b45      	cmp	r3, #69	@ 0x45
 8001d86:	d821      	bhi.n	8001dcc <ProcessTouch+0x6c>
        signal_on = !signal_on;
 8001d88:	4b3b      	ldr	r3, [pc, #236]	@ (8001e78 <ProcessTouch+0x118>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf0c      	ite	eq
 8001d90:	2301      	moveq	r3, #1
 8001d92:	2300      	movne	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b37      	ldr	r3, [pc, #220]	@ (8001e78 <ProcessTouch+0x118>)
 8001d9a:	701a      	strb	r2, [r3, #0]
        if (signal_on == 1) {
 8001d9c:	4b36      	ldr	r3, [pc, #216]	@ (8001e78 <ProcessTouch+0x118>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d109      	bne.n	8001db8 <ProcessTouch+0x58>
        	HAL_GPIO_WritePin(GPIOB, LedH4_Pin, 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	2110      	movs	r1, #16
 8001da8:	4834      	ldr	r0, [pc, #208]	@ (8001e7c <ProcessTouch+0x11c>)
 8001daa:	f002 fd9f 	bl	80048ec <HAL_GPIO_WritePin>

        	HAL_TIM_PWM_Start_IT(&htim5, TIM_CHANNEL_1);
 8001dae:	2100      	movs	r1, #0
 8001db0:	4833      	ldr	r0, [pc, #204]	@ (8001e80 <ProcessTouch+0x120>)
 8001db2:	f005 f949 	bl	8007048 <HAL_TIM_PWM_Start_IT>
        if (signal_on == 1) {
 8001db6:	e058      	b.n	8001e6a <ProcessTouch+0x10a>
        } else {
        	HAL_GPIO_WritePin(GPIOB, LedH4_Pin, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2110      	movs	r1, #16
 8001dbc:	482f      	ldr	r0, [pc, #188]	@ (8001e7c <ProcessTouch+0x11c>)
 8001dbe:	f002 fd95 	bl	80048ec <HAL_GPIO_WritePin>

        	HAL_TIM_PWM_Stop_IT(&htim5, TIM_CHANNEL_1);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	482e      	ldr	r0, [pc, #184]	@ (8001e80 <ProcessTouch+0x120>)
 8001dc6:	f005 fa87 	bl	80072d8 <HAL_TIM_PWM_Stop_IT>
        if (signal_on == 1) {
 8001dca:	e04e      	b.n	8001e6a <ProcessTouch+0x10a>
        }
    } else if (x > BUTTON_MODE_X && x < BUTTON_MODE_X + BUTTON_WIDTH &&
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	2b14      	cmp	r3, #20
 8001dd0:	d91e      	bls.n	8001e10 <ProcessTouch+0xb0>
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	2bae      	cmp	r3, #174	@ 0xae
 8001dd6:	d81b      	bhi.n	8001e10 <ProcessTouch+0xb0>
 8001dd8:	88bb      	ldrh	r3, [r7, #4]
 8001dda:	2b50      	cmp	r3, #80	@ 0x50
 8001ddc:	d918      	bls.n	8001e10 <ProcessTouch+0xb0>
               y > BUTTON_MODE_Y && y < BUTTON_MODE_Y + BUTTON_HEIGHT) {
 8001dde:	88bb      	ldrh	r3, [r7, #4]
 8001de0:	2b81      	cmp	r3, #129	@ 0x81
 8001de2:	d815      	bhi.n	8001e10 <ProcessTouch+0xb0>
        generation_mode = !generation_mode;
 8001de4:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <ProcessTouch+0x124>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <ProcessTouch+0x124>)
 8001df6:	701a      	strb	r2, [r3, #0]
        if (generation_mode == 1) {
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <ProcessTouch+0x124>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d103      	bne.n	8001e08 <ProcessTouch+0xa8>
        	harmonic = 3;
 8001e00:	4b21      	ldr	r3, [pc, #132]	@ (8001e88 <ProcessTouch+0x128>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
        if (generation_mode == 1) {
 8001e06:	e030      	b.n	8001e6a <ProcessTouch+0x10a>
        } else {
        	harmonic = 5;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <ProcessTouch+0x128>)
 8001e0a:	2205      	movs	r2, #5
 8001e0c:	701a      	strb	r2, [r3, #0]
        if (generation_mode == 1) {
 8001e0e:	e02c      	b.n	8001e6a <ProcessTouch+0x10a>
        }
    } else if (x > BUTTON_AMPLITUDE_UP_X && x < BUTTON_AMPLITUDE_UP_X + BUTTON_WIDTH &&
 8001e10:	88fb      	ldrh	r3, [r7, #6]
 8001e12:	2b14      	cmp	r3, #20
 8001e14:	d913      	bls.n	8001e3e <ProcessTouch+0xde>
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2bae      	cmp	r3, #174	@ 0xae
 8001e1a:	d810      	bhi.n	8001e3e <ProcessTouch+0xde>
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	2b8c      	cmp	r3, #140	@ 0x8c
 8001e20:	d90d      	bls.n	8001e3e <ProcessTouch+0xde>
               y > BUTTON_AMPLITUDE_UP_Y && y < BUTTON_AMPLITUDE_UP_Y + BUTTON_HEIGHT) {
 8001e22:	88bb      	ldrh	r3, [r7, #4]
 8001e24:	2bbd      	cmp	r3, #189	@ 0xbd
 8001e26:	d80a      	bhi.n	8001e3e <ProcessTouch+0xde>
        if (fundamental_amplitude < 100) {
 8001e28:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b63      	cmp	r3, #99	@ 0x63
 8001e2e:	d81c      	bhi.n	8001e6a <ProcessTouch+0x10a>
            fundamental_amplitude += 10;
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	330a      	adds	r3, #10
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e3a:	701a      	strb	r2, [r3, #0]
        if (fundamental_amplitude < 100) {
 8001e3c:	e015      	b.n	8001e6a <ProcessTouch+0x10a>
        }
    } else if (x > BUTTON_AMPLITUDE_DOWN_X && x < BUTTON_AMPLITUDE_DOWN_X + BUTTON_WIDTH &&
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	2b14      	cmp	r3, #20
 8001e42:	d912      	bls.n	8001e6a <ProcessTouch+0x10a>
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	2bae      	cmp	r3, #174	@ 0xae
 8001e48:	d80f      	bhi.n	8001e6a <ProcessTouch+0x10a>
 8001e4a:	88bb      	ldrh	r3, [r7, #4]
 8001e4c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001e4e:	d90c      	bls.n	8001e6a <ProcessTouch+0x10a>
               y > BUTTON_AMPLITUDE_DOWN_Y && y < BUTTON_AMPLITUDE_DOWN_Y + BUTTON_HEIGHT) {
 8001e50:	88bb      	ldrh	r3, [r7, #4]
 8001e52:	2bf9      	cmp	r3, #249	@ 0xf9
 8001e54:	d809      	bhi.n	8001e6a <ProcessTouch+0x10a>
        if (fundamental_amplitude > 10) {
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b0a      	cmp	r3, #10
 8001e5c:	d905      	bls.n	8001e6a <ProcessTouch+0x10a>
            fundamental_amplitude -= 10;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	3b0a      	subs	r3, #10
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <ProcessTouch+0x12c>)
 8001e68:	701a      	strb	r2, [r3, #0]
        }
    }
    // Aktualizacja wyświetlanych wartości
    UpdateDisplay();
 8001e6a:	f7ff ff11 	bl	8001c90 <UpdateDisplay>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000898 	.word	0x20000898
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	20000434 	.word	0x20000434
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	2000000f 	.word	0x2000000f
 8001e8c:	2000000d 	.word	0x2000000d

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <Error_Handler+0x8>

08001e9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b0c      	ldr	r3, [pc, #48]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a08      	ldr	r2, [pc, #32]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_MspInit+0x44>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800

08001ee4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a32      	ldr	r2, [pc, #200]	@ (8001fcc <HAL_ADC_MspInit+0xe8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d15d      	bne.n	8001fc2 <HAL_ADC_MspInit+0xde>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f06:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f24:	f043 0320 	orr.w	r3, r3, #32
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_ADC_MspInit+0xec>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	60fb      	str	r3, [r7, #12]
 8001f34:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4822      	ldr	r0, [pc, #136]	@ (8001fd4 <HAL_ADC_MspInit+0xf0>)
 8001f4c:	f002 fb22 	bl	8004594 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f52:	4a22      	ldr	r2, [pc, #136]	@ (8001fdc <HAL_ADC_MspInit+0xf8>)
 8001f54:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f58:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001f5c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001f6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f70:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f72:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f78:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f80:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f88:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001f96:	4810      	ldr	r0, [pc, #64]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001f98:	f001 fd28 	bl	80039ec <HAL_DMA_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001fa2:	f7ff ff75 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001faa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fac:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd8 <HAL_ADC_MspInit+0xf4>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2012      	movs	r0, #18
 8001fb8:	f001 fbef 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001fbc:	2012      	movs	r0, #18
 8001fbe:	f001 fc08 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	@ 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40012200 	.word	0x40012200
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40021400 	.word	0x40021400
 8001fd8:	2000027c 	.word	0x2000027c
 8001fdc:	40026410 	.word	0x40026410

08001fe0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	@ (8002018 <HAL_CRC_MspInit+0x38>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d10b      	bne.n	800200a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	4a09      	ldr	r2, [pc, #36]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8001ff8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <HAL_CRC_MspInit+0x3c>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023000 	.word	0x40023000
 800201c:	40023800 	.word	0x40023800

08002020 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_DMA2D_MspInit+0x38>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10b      	bne.n	800204a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_DMA2D_MspInit+0x3c>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_DMA2D_MspInit+0x3c>)
 8002038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b07      	ldr	r3, [pc, #28]	@ (800205c <HAL_DMA2D_MspInit+0x3c>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800204a:	bf00      	nop
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	4002b000 	.word	0x4002b000
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0b4      	sub	sp, #208	@ 0xd0
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207c:	2284      	movs	r2, #132	@ 0x84
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f009 fa3e 	bl	800b502 <memset>
  if(hltdc->Instance==LTDC)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4ac6      	ldr	r2, [pc, #792]	@ (80023a4 <HAL_LTDC_MspInit+0x344>)
 800208c:	4293      	cmp	r3, r2
 800208e:	f040 81a2 	bne.w	80023d6 <HAL_LTDC_MspInit+0x376>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002092:	2308      	movs	r3, #8
 8002094:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002096:	2332      	movs	r3, #50	@ 0x32
 8002098:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800209a:	2302      	movs	r3, #2
 800209c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800209e:	2302      	movs	r3, #2
 80020a0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80020a2:	2300      	movs	r3, #0
 80020a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80020aa:	2300      	movs	r3, #0
 80020ac:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020b2:	4618      	mov	r0, r3
 80020b4:	f004 fa8e 	bl	80065d4 <HAL_RCCEx_PeriphCLKConfig>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 80020be:	f7ff fee7 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80020c2:	4bb9      	ldr	r3, [pc, #740]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	4ab8      	ldr	r2, [pc, #736]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80020cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ce:	4bb6      	ldr	r3, [pc, #728]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020da:	4bb3      	ldr	r3, [pc, #716]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	4ab2      	ldr	r2, [pc, #712]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020e0:	f043 0310 	orr.w	r3, r3, #16
 80020e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e6:	4bb0      	ldr	r3, [pc, #704]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80020f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4bad      	ldr	r3, [pc, #692]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	4aac      	ldr	r2, [pc, #688]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020fe:	4baa      	ldr	r3, [pc, #680]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800210a:	4ba7      	ldr	r3, [pc, #668]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210e:	4aa6      	ldr	r2, [pc, #664]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002110:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002114:	6313      	str	r3, [r2, #48]	@ 0x30
 8002116:	4ba4      	ldr	r3, [pc, #656]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002122:	4ba1      	ldr	r3, [pc, #644]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4aa0      	ldr	r2, [pc, #640]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b9e      	ldr	r3, [pc, #632]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
 8002138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	4b9b      	ldr	r3, [pc, #620]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a9a      	ldr	r2, [pc, #616]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002140:	f043 0308 	orr.w	r3, r3, #8
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b98      	ldr	r3, [pc, #608]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	623b      	str	r3, [r7, #32]
 8002150:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002152:	4b95      	ldr	r3, [pc, #596]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	4a94      	ldr	r2, [pc, #592]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6313      	str	r3, [r2, #48]	@ 0x30
 800215e:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	61fb      	str	r3, [r7, #28]
 8002168:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	4b8f      	ldr	r3, [pc, #572]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a8e      	ldr	r2, [pc, #568]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b8c      	ldr	r3, [pc, #560]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	61bb      	str	r3, [r7, #24]
 8002180:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002182:	4b89      	ldr	r3, [pc, #548]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a88      	ldr	r2, [pc, #544]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002188:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800219a:	4b83      	ldr	r3, [pc, #524]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	4a82      	ldr	r2, [pc, #520]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80021a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021a6:	4b80      	ldr	r3, [pc, #512]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80021b2:	4b7d      	ldr	r3, [pc, #500]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a7c      	ldr	r2, [pc, #496]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b7a      	ldr	r3, [pc, #488]	@ (80023a8 <HAL_LTDC_MspInit+0x348>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80021ca:	2370      	movs	r3, #112	@ 0x70
 80021cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d0:	2302      	movs	r3, #2
 80021d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80021e2:	230e      	movs	r3, #14
 80021e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021e8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80021ec:	4619      	mov	r1, r3
 80021ee:	486f      	ldr	r0, [pc, #444]	@ (80023ac <HAL_LTDC_MspInit+0x34c>)
 80021f0:	f002 f9d0 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021f8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800220e:	230e      	movs	r3, #14
 8002210:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002218:	4619      	mov	r1, r3
 800221a:	4865      	ldr	r0, [pc, #404]	@ (80023b0 <HAL_LTDC_MspInit+0x350>)
 800221c:	f002 f9ba 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 8002220:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8002224:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800223a:	230e      	movs	r3, #14
 800223c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002240:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002244:	4619      	mov	r1, r3
 8002246:	485b      	ldr	r0, [pc, #364]	@ (80023b4 <HAL_LTDC_MspInit+0x354>)
 8002248:	f002 f9a4 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800224c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002250:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002254:	2302      	movs	r3, #2
 8002256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002266:	230e      	movs	r3, #14
 8002268:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800226c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002270:	4619      	mov	r1, r3
 8002272:	4851      	ldr	r0, [pc, #324]	@ (80023b8 <HAL_LTDC_MspInit+0x358>)
 8002274:	f002 f98e 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8002278:	2348      	movs	r3, #72	@ 0x48
 800227a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002290:	230e      	movs	r3, #14
 8002292:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800229a:	4619      	mov	r1, r3
 800229c:	4847      	ldr	r0, [pc, #284]	@ (80023bc <HAL_LTDC_MspInit+0x35c>)
 800229e:	f002 f979 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022bc:	230e      	movs	r3, #14
 80022be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80022c6:	4619      	mov	r1, r3
 80022c8:	483d      	ldr	r0, [pc, #244]	@ (80023c0 <HAL_LTDC_MspInit+0x360>)
 80022ca:	f002 f963 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 80022ce:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80022d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80022e8:	230e      	movs	r3, #14
 80022ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80022f2:	4619      	mov	r1, r3
 80022f4:	4833      	ldr	r0, [pc, #204]	@ (80023c4 <HAL_LTDC_MspInit+0x364>)
 80022f6:	f002 f94d 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 80022fa:	f244 6333 	movw	r3, #17971	@ 0x4633
 80022fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002308:	2300      	movs	r3, #0
 800230a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002314:	230e      	movs	r3, #14
 8002316:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800231a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800231e:	4619      	mov	r1, r3
 8002320:	4829      	ldr	r0, [pc, #164]	@ (80023c8 <HAL_LTDC_MspInit+0x368>)
 8002322:	f002 f937 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800233e:	230e      	movs	r3, #14
 8002340:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002344:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002348:	4619      	mov	r1, r3
 800234a:	4820      	ldr	r0, [pc, #128]	@ (80023cc <HAL_LTDC_MspInit+0x36c>)
 800234c:	f002 f922 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002350:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002354:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800236a:	2309      	movs	r3, #9
 800236c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002370:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8002374:	4619      	mov	r1, r3
 8002376:	480f      	ldr	r0, [pc, #60]	@ (80023b4 <HAL_LTDC_MspInit+0x354>)
 8002378:	f002 f90c 	bl	8004594 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_9;
 800237c:	f24a 2308 	movw	r3, #41480	@ 0xa208
 8002380:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002396:	230e      	movs	r3, #14
 8002398:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800239c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80023a0:	4619      	mov	r1, r3
 80023a2:	e015      	b.n	80023d0 <HAL_LTDC_MspInit+0x370>
 80023a4:	40016800 	.word	0x40016800
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40021800 	.word	0x40021800
 80023b8:	40022400 	.word	0x40022400
 80023bc:	40020c00 	.word	0x40020c00
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020000 	.word	0x40020000
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40022800 	.word	0x40022800
 80023d0:	4803      	ldr	r0, [pc, #12]	@ (80023e0 <HAL_LTDC_MspInit+0x380>)
 80023d2:	f002 f8df 	bl	8004594 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	37d0      	adds	r7, #208	@ 0xd0
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40021c00 	.word	0x40021c00

080023e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023f4:	d114      	bne.n	8002420 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023f6:	4b19      	ldr	r3, [pc, #100]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fa:	4a18      	ldr	r2, [pc, #96]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	6413      	str	r3, [r2, #64]	@ 0x40
 8002402:	4b16      	ldr	r3, [pc, #88]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	201c      	movs	r0, #28
 8002414:	f001 f9c1 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002418:	201c      	movs	r0, #28
 800241a:	f001 f9da 	bl	80037d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800241e:	e018      	b.n	8002452 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0e      	ldr	r2, [pc, #56]	@ (8002460 <HAL_TIM_Base_MspInit+0x7c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d113      	bne.n	8002452 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800242a:	4b0c      	ldr	r3, [pc, #48]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	4a0b      	ldr	r2, [pc, #44]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	6413      	str	r3, [r2, #64]	@ 0x40
 8002436:	4b09      	ldr	r3, [pc, #36]	@ (800245c <HAL_TIM_Base_MspInit+0x78>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	2032      	movs	r0, #50	@ 0x32
 8002448:	f001 f9a7 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800244c:	2032      	movs	r0, #50	@ 0x32
 800244e:	f001 f9c0 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	40000c00 	.word	0x40000c00

08002464 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	@ 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002484:	d11d      	bne.n	80024c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	4a20      	ldr	r2, [pc, #128]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	6313      	str	r3, [r2, #48]	@ 0x30
 8002492:	4b1e      	ldr	r3, [pc, #120]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 800249e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4619      	mov	r1, r3
 80024ba:	4815      	ldr	r0, [pc, #84]	@ (8002510 <HAL_TIM_MspPostInit+0xac>)
 80024bc:	f002 f86a 	bl	8004594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80024c0:	e020      	b.n	8002504 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM5)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a13      	ldr	r2, [pc, #76]	@ (8002514 <HAL_TIM_MspPostInit+0xb0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d11b      	bne.n	8002504 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	4a0e      	ldr	r2, [pc, #56]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <HAL_TIM_MspPostInit+0xa8>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024e4:	2301      	movs	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024f4:	2302      	movs	r3, #2
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	4804      	ldr	r0, [pc, #16]	@ (8002510 <HAL_TIM_MspPostInit+0xac>)
 8002500:	f002 f848 	bl	8004594 <HAL_GPIO_Init>
}
 8002504:	bf00      	nop
 8002506:	3728      	adds	r7, #40	@ 0x28
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40023800 	.word	0x40023800
 8002510:	40020000 	.word	0x40020000
 8002514:	40000c00 	.word	0x40000c00

08002518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0aa      	sub	sp, #168	@ 0xa8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	2284      	movs	r2, #132	@ 0x84
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f008 ffe2 	bl	800b502 <memset>
  if(huart->Instance==USART1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a21      	ldr	r2, [pc, #132]	@ (80025c8 <HAL_UART_MspInit+0xb0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d13a      	bne.n	80025be <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002548:	2340      	movs	r3, #64	@ 0x40
 800254a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800254c:	2300      	movs	r3, #0
 800254e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f004 f83d 	bl	80065d4 <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002560:	f7ff fc96 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 800256a:	f043 0310 	orr.w	r3, r3, #16
 800256e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002570:	4b16      	ldr	r3, [pc, #88]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 8002572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	6313      	str	r3, [r2, #48]	@ 0x30
 8002588:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <HAL_UART_MspInit+0xb4>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002594:	23c0      	movs	r3, #192	@ 0xc0
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259a:	2302      	movs	r3, #2
 800259c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a6:	2303      	movs	r3, #3
 80025a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ac:	2307      	movs	r3, #7
 80025ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80025b6:	4619      	mov	r1, r3
 80025b8:	4805      	ldr	r0, [pc, #20]	@ (80025d0 <HAL_UART_MspInit+0xb8>)
 80025ba:	f001 ffeb 	bl	8004594 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025be:	bf00      	nop
 80025c0:	37a8      	adds	r7, #168	@ 0xa8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40020400 	.word	0x40020400

080025d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025da:	1d3b      	adds	r3, r7, #4
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80025e8:	4b3a      	ldr	r3, [pc, #232]	@ (80026d4 <HAL_FMC_MspInit+0x100>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d16d      	bne.n	80026cc <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80025f0:	4b38      	ldr	r3, [pc, #224]	@ (80026d4 <HAL_FMC_MspInit+0x100>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80025f6:	4b38      	ldr	r3, [pc, #224]	@ (80026d8 <HAL_FMC_MspInit+0x104>)
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	4a37      	ldr	r2, [pc, #220]	@ (80026d8 <HAL_FMC_MspInit+0x104>)
 80025fc:	f043 0301 	orr.w	r3, r3, #1
 8002600:	6393      	str	r3, [r2, #56]	@ 0x38
 8002602:	4b35      	ldr	r3, [pc, #212]	@ (80026d8 <HAL_FMC_MspInit+0x104>)
 8002604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 800260e:	f248 1311 	movw	r3, #33041	@ 0x8111
 8002612:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002620:	230c      	movs	r3, #12
 8002622:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	4619      	mov	r1, r3
 8002628:	482c      	ldr	r0, [pc, #176]	@ (80026dc <HAL_FMC_MspInit+0x108>)
 800262a:	f001 ffb3 	bl	8004594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800262e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002632:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002640:	230c      	movs	r3, #12
 8002642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	4619      	mov	r1, r3
 8002648:	4825      	ldr	r0, [pc, #148]	@ (80026e0 <HAL_FMC_MspInit+0x10c>)
 800264a:	f001 ffa3 	bl	8004594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800264e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002652:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002660:	230c      	movs	r3, #12
 8002662:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	4619      	mov	r1, r3
 8002668:	481e      	ldr	r0, [pc, #120]	@ (80026e4 <HAL_FMC_MspInit+0x110>)
 800266a:	f001 ff93 	bl	8004594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 800266e:	2324      	movs	r3, #36	@ 0x24
 8002670:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800267e:	230c      	movs	r3, #12
 8002680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002682:	1d3b      	adds	r3, r7, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4818      	ldr	r0, [pc, #96]	@ (80026e8 <HAL_FMC_MspInit+0x114>)
 8002688:	f001 ff84 	bl	8004594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800268c:	2304      	movs	r3, #4
 800268e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002698:	2303      	movs	r3, #3
 800269a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800269c:	230c      	movs	r3, #12
 800269e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a0:	1d3b      	adds	r3, r7, #4
 80026a2:	4619      	mov	r1, r3
 80026a4:	4811      	ldr	r0, [pc, #68]	@ (80026ec <HAL_FMC_MspInit+0x118>)
 80026a6:	f001 ff75 	bl	8004594 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80026aa:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80026ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b8:	2303      	movs	r3, #3
 80026ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026bc:	230c      	movs	r3, #12
 80026be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	4619      	mov	r1, r3
 80026c4:	480a      	ldr	r0, [pc, #40]	@ (80026f0 <HAL_FMC_MspInit+0x11c>)
 80026c6:	f001 ff65 	bl	8004594 <HAL_GPIO_Init>
 80026ca:	e000      	b.n	80026ce <HAL_FMC_MspInit+0xfa>
    return;
 80026cc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000089c 	.word	0x2000089c
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021400 	.word	0x40021400
 80026e8:	40021c00 	.word	0x40021c00
 80026ec:	40020800 	.word	0x40020800
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80026fc:	f7ff ff6a 	bl	80025d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002700:	bf00      	nop
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <NMI_Handler+0x4>

08002710 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <HardFault_Handler+0x4>

08002718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800271c:	bf00      	nop
 800271e:	e7fd      	b.n	800271c <MemManage_Handler+0x4>

08002720 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <BusFault_Handler+0x4>

08002728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800272c:	bf00      	nop
 800272e:	e7fd      	b.n	800272c <UsageFault_Handler+0x4>

08002730 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275e:	f000 fa59 	bl	8002c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	dmaBuffor[k++] = ADC3->DR;
 800276c:	4b0c      	ldr	r3, [pc, #48]	@ (80027a0 <ADC_IRQHandler+0x38>)
 800276e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002770:	4b0c      	ldr	r3, [pc, #48]	@ (80027a4 <ADC_IRQHandler+0x3c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	b2d0      	uxtb	r0, r2
 8002778:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <ADC_IRQHandler+0x3c>)
 800277a:	7010      	strb	r0, [r2, #0]
 800277c:	461a      	mov	r2, r3
 800277e:	b289      	uxth	r1, r1
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <ADC_IRQHandler+0x40>)
 8002782:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	k %= 4;
 8002786:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <ADC_IRQHandler+0x3c>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <ADC_IRQHandler+0x3c>)
 8002792:	701a      	strb	r2, [r3, #0]
  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002794:	4805      	ldr	r0, [pc, #20]	@ (80027ac <ADC_IRQHandler+0x44>)
 8002796:	f000 fb9d 	bl	8002ed4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */


  /* USER CODE END ADC_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40012200 	.word	0x40012200
 80027a4:	200008a8 	.word	0x200008a8
 80027a8:	2000053c 	.word	0x2000053c
 80027ac:	20000234 	.word	0x20000234

080027b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
//	else if (tmpPulse < PWM_MIN_VALUE) { tmpPulse = PWM_MIN_VALUE; }

//	TIM2->CCR1 = tmpPulse;
//	tim2IntTimes++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <TIM2_IRQHandler+0x10>)
 80027b6:	f004 fe5d 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200003e8 	.word	0x200003e8
 80027c4:	00000000 	.word	0x00000000

080027c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	ed2d 8b02 	vpush	{d8}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

		float tmpPulse = 1000;
 80027d2:	4b59      	ldr	r3, [pc, #356]	@ (8002938 <TIM5_IRQHandler+0x170>)
 80027d4:	607b      	str	r3, [r7, #4]
		float tmpAmp = 0;
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	603b      	str	r3, [r7, #0]
		if(tim2IntTimes > 4999)
 80027dc:	4b57      	ldr	r3, [pc, #348]	@ (800293c <TIM5_IRQHandler+0x174>)
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d902      	bls.n	80027ee <TIM5_IRQHandler+0x26>
		{
			tim2IntTimes = 0;
 80027e8:	4b54      	ldr	r3, [pc, #336]	@ (800293c <TIM5_IRQHandler+0x174>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	801a      	strh	r2, [r3, #0]
		}
		if((tim2IntTimes % 2) == 0)
 80027ee:	4b53      	ldr	r3, [pc, #332]	@ (800293c <TIM5_IRQHandler+0x174>)
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d134      	bne.n	8002866 <TIM5_IRQHandler+0x9e>
		{
			tmpAmp = fundamental_amplitude * 0.01;
 80027fc:	4b50      	ldr	r3, [pc, #320]	@ (8002940 <TIM5_IRQHandler+0x178>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd feaf 	bl	8000564 <__aeabi_i2d>
 8002806:	a34a      	add	r3, pc, #296	@ (adr r3, 8002930 <TIM5_IRQHandler+0x168>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd ff14 	bl	8000638 <__aeabi_dmul>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe fa06 	bl	8000c28 <__aeabi_d2f>
 800281c:	4603      	mov	r3, r0
 800281e:	603b      	str	r3, [r7, #0]
			tmp1 = 490 * tmpAmp * (sinf(SinPeriodOffset * (tim2IntTimes/2)) + 1);
 8002820:	edd7 7a00 	vldr	s15, [r7]
 8002824:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8002944 <TIM5_IRQHandler+0x17c>
 8002828:	ee27 8a87 	vmul.f32	s16, s15, s14
 800282c:	4b43      	ldr	r3, [pc, #268]	@ (800293c <TIM5_IRQHandler+0x174>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	b29b      	uxth	r3, r3
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800283c:	4b42      	ldr	r3, [pc, #264]	@ (8002948 <TIM5_IRQHandler+0x180>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002846:	eeb0 0a67 	vmov.f32	s0, s15
 800284a:	f00a ff79 	bl	800d740 <sinf>
 800284e:	eef0 7a40 	vmov.f32	s15, s0
 8002852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002856:	ee77 7a87 	vadd.f32	s15, s15, s14
 800285a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800285e:	4b3b      	ldr	r3, [pc, #236]	@ (800294c <TIM5_IRQHandler+0x184>)
 8002860:	edc3 7a00 	vstr	s15, [r3]
 8002864:	e02a      	b.n	80028bc <TIM5_IRQHandler+0xf4>
		}
		else
		{
			tmp2 = 490 * adcAvg * (sinf(harmonic * (SinPeriodOffset * (tim2IntTimes/2))) + 1);
 8002866:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <TIM5_IRQHandler+0x188>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002944 <TIM5_IRQHandler+0x17c>
 8002870:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002874:	4b37      	ldr	r3, [pc, #220]	@ (8002954 <TIM5_IRQHandler+0x18c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	ee07 3a90 	vmov	s15, r3
 800287c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002880:	4b2e      	ldr	r3, [pc, #184]	@ (800293c <TIM5_IRQHandler+0x174>)
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	b29b      	uxth	r3, r3
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <TIM5_IRQHandler+0x180>)
 8002892:	edd3 7a00 	vldr	s15, [r3]
 8002896:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800289a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	f00a ff4d 	bl	800d740 <sinf>
 80028a6:	eef0 7a40 	vmov.f32	s15, s0
 80028aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <TIM5_IRQHandler+0x190>)
 80028b8:	edc3 7a00 	vstr	s15, [r3]
		}

			tmpPulse = tmp1 + tmp2;
 80028bc:	4b23      	ldr	r3, [pc, #140]	@ (800294c <TIM5_IRQHandler+0x184>)
 80028be:	ed93 7a00 	vldr	s14, [r3]
 80028c2:	4b25      	ldr	r3, [pc, #148]	@ (8002958 <TIM5_IRQHandler+0x190>)
 80028c4:	edd3 7a00 	vldr	s15, [r3]
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	edc7 7a01 	vstr	s15, [r7, #4]
		if(tmpPulse > PWM_MAX_VALUE) { tmpPulse = PWM_MAX_VALUE; }
 80028d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800295c <TIM5_IRQHandler+0x194>
 80028d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd02      	ble.n	80028e8 <TIM5_IRQHandler+0x120>
 80028e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <TIM5_IRQHandler+0x198>)
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	e00a      	b.n	80028fe <TIM5_IRQHandler+0x136>
		else if (tmpPulse < PWM_MIN_VALUE) { tmpPulse = PWM_MIN_VALUE; }
 80028e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80028ec:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80028f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d501      	bpl.n	80028fe <TIM5_IRQHandler+0x136>
 80028fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002964 <TIM5_IRQHandler+0x19c>)
 80028fc:	607b      	str	r3, [r7, #4]

		TIM5->CCR1 = tmpPulse;
 80028fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002968 <TIM5_IRQHandler+0x1a0>)
 8002900:	edd7 7a01 	vldr	s15, [r7, #4]
 8002904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002908:	ee17 2a90 	vmov	r2, s15
 800290c:	635a      	str	r2, [r3, #52]	@ 0x34
		tim2IntTimes++;
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <TIM5_IRQHandler+0x174>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	4b09      	ldr	r3, [pc, #36]	@ (800293c <TIM5_IRQHandler+0x174>)
 8002918:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800291a:	4814      	ldr	r0, [pc, #80]	@ (800296c <TIM5_IRQHandler+0x1a4>)
 800291c:	f004 fdaa 	bl	8007474 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	ecbd 8b02 	vpop	{d8}
 800292a:	bd80      	pop	{r7, pc}
 800292c:	f3af 8000 	nop.w
 8002930:	47ae147b 	.word	0x47ae147b
 8002934:	3f847ae1 	.word	0x3f847ae1
 8002938:	447a0000 	.word	0x447a0000
 800293c:	20000548 	.word	0x20000548
 8002940:	2000000d 	.word	0x2000000d
 8002944:	43f50000 	.word	0x43f50000
 8002948:	20000008 	.word	0x20000008
 800294c:	200008a0 	.word	0x200008a0
 8002950:	20000544 	.word	0x20000544
 8002954:	2000000f 	.word	0x2000000f
 8002958:	200008a4 	.word	0x200008a4
 800295c:	44f8c000 	.word	0x44f8c000
 8002960:	44f8c000 	.word	0x44f8c000
 8002964:	41200000 	.word	0x41200000
 8002968:	40000c00 	.word	0x40000c00
 800296c:	20000434 	.word	0x20000434

08002970 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002974:	4802      	ldr	r0, [pc, #8]	@ (8002980 <DMA2_Stream0_IRQHandler+0x10>)
 8002976:	f001 f945 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800297a:	bf00      	nop
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000027c 	.word	0x2000027c

08002984 <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	HAL_LTDC_IRQHandler(&hLtdcHandler);
 8002988:	4802      	ldr	r0, [pc, #8]	@ (8002994 <LTDC_IRQHandler+0x10>)
 800298a:	f002 fe91 	bl	80056b0 <HAL_LTDC_IRQHandler>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	20000910 	.word	0x20000910

08002998 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return 1;
 800299c:	2301      	movs	r3, #1
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_kill>:

int _kill(int pid, int sig)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b2:	f008 fdf9 	bl	800b5a8 <__errno>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2216      	movs	r2, #22
 80029ba:	601a      	str	r2, [r3, #0]
  return -1;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <_exit>:

void _exit (int status)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029d0:	f04f 31ff 	mov.w	r1, #4294967295
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ffe7 	bl	80029a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029da:	bf00      	nop
 80029dc:	e7fd      	b.n	80029da <_exit+0x12>

080029de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	e00a      	b.n	8002a06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029f0:	f3af 8000 	nop.w
 80029f4:	4601      	mov	r1, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	60ba      	str	r2, [r7, #8]
 80029fc:	b2ca      	uxtb	r2, r1
 80029fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	dbf0      	blt.n	80029f0 <_read+0x12>
  }

  return len;
 8002a0e:	687b      	ldr	r3, [r7, #4]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	e009      	b.n	8002a3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	60ba      	str	r2, [r7, #8]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	dbf1      	blt.n	8002a2a <_write+0x12>
  }
  return len;
 8002a46:	687b      	ldr	r3, [r7, #4]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <_close>:

int _close(int file)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a78:	605a      	str	r2, [r3, #4]
  return 0;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <_isatty>:

int _isatty(int file)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a90:	2301      	movs	r3, #1
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <_sbrk+0x5c>)
 8002ac2:	4b15      	ldr	r3, [pc, #84]	@ (8002b18 <_sbrk+0x60>)
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad4:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <_sbrk+0x64>)
 8002ad6:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <_sbrk+0x68>)
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <_sbrk+0x64>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d207      	bcs.n	8002af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae8:	f008 fd5e 	bl	800b5a8 <__errno>
 8002aec:	4603      	mov	r3, r0
 8002aee:	220c      	movs	r2, #12
 8002af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002af2:	f04f 33ff 	mov.w	r3, #4294967295
 8002af6:	e009      	b.n	8002b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <_sbrk+0x64>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afe:	4b07      	ldr	r3, [pc, #28]	@ (8002b1c <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <_sbrk+0x64>)
 8002b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20050000 	.word	0x20050000
 8002b18:	00000400 	.word	0x00000400
 8002b1c:	200008ac 	.word	0x200008ac
 8002b20:	20000cd8 	.word	0x20000cd8

08002b24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b28:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <SystemInit+0x20>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2e:	4a05      	ldr	r2, [pc, #20]	@ (8002b44 <SystemInit+0x20>)
 8002b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b4c:	f7ff ffea 	bl	8002b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b50:	480c      	ldr	r0, [pc, #48]	@ (8002b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b52:	490d      	ldr	r1, [pc, #52]	@ (8002b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b54:	4a0d      	ldr	r2, [pc, #52]	@ (8002b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	@ (8002b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b68:	4c0a      	ldr	r4, [pc, #40]	@ (8002b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b76:	f008 fd1d 	bl	800b5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7a:	f7fe fa1d 	bl	8000fb8 <main>
  bx  lr    
 8002b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b80:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b88:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002b8c:	08011608 	.word	0x08011608
  ldr r2, =_sbss
 8002b90:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002b94:	20000cd8 	.word	0x20000cd8

08002b98 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <CAN1_RX0_IRQHandler>

08002b9a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	f000 fdf0 	bl	8003784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f000 f805 	bl	8002bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002baa:	f7ff f977 	bl	8001e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bbc:	4b12      	ldr	r3, [pc, #72]	@ (8002c08 <HAL_InitTick+0x54>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_InitTick+0x58>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fe0b 	bl	80037ee <HAL_SYSTICK_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00e      	b.n	8002c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d80a      	bhi.n	8002bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be8:	2200      	movs	r2, #0
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f000 fdd3 	bl	800379a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf4:	4a06      	ldr	r2, [pc, #24]	@ (8002c10 <HAL_InitTick+0x5c>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000010 	.word	0x20000010
 8002c0c:	20000018 	.word	0x20000018
 8002c10:	20000014 	.word	0x20000014

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000018 	.word	0x20000018
 8002c38:	200008b0 	.word	0x200008b0

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	@ (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	200008b0 	.word	0x200008b0

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000018 	.word	0x20000018

08002c9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e031      	b.n	8002d16 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff f912 	bl	8001ee4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f003 0310 	and.w	r3, r3, #16
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d116      	bne.n	8002d08 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cde:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <HAL_ADC_Init+0x84>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	f043 0202 	orr.w	r2, r3, #2
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 fb76 	bl	80033dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d06:	e001      	b.n	8002d0c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	ffffeefd 	.word	0xffffeefd

08002d24 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Start_IT+0x1a>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e0b5      	b.n	8002eaa <HAL_ADC_Start_IT+0x186>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d018      	beq.n	8002d86 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002d64:	4b54      	ldr	r3, [pc, #336]	@ (8002eb8 <HAL_ADC_Start_IT+0x194>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a54      	ldr	r2, [pc, #336]	@ (8002ebc <HAL_ADC_Start_IT+0x198>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0c9a      	lsrs	r2, r3, #18
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002d78:	e002      	b.n	8002d80 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f9      	bne.n	8002d7a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d17d      	bne.n	8002e90 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d98:	4b49      	ldr	r3, [pc, #292]	@ (8002ec0 <HAL_ADC_Start_IT+0x19c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002dba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dce:	d106      	bne.n	8002dde <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd4:	f023 0206 	bic.w	r2, r3, #6
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ddc:	e002      	b.n	8002de4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002df4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b30      	ldr	r3, [pc, #192]	@ (8002ec4 <HAL_ADC_Start_IT+0x1a0>)
 8002e02:	430b      	orrs	r3, r1
 8002e04:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002e06:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_ADC_Start_IT+0x1a4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10f      	bne.n	8002e32 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d143      	bne.n	8002ea8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e2e:	609a      	str	r2, [r3, #8]
 8002e30:	e03a      	b.n	8002ea8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <HAL_ADC_Start_IT+0x1a8>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10e      	bne.n	8002e5a <HAL_ADC_Start_IT+0x136>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e58:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_ADC_Start_IT+0x1a4>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0310 	and.w	r3, r3, #16
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d120      	bne.n	8002ea8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a19      	ldr	r2, [pc, #100]	@ (8002ed0 <HAL_ADC_Start_IT+0x1ac>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d11b      	bne.n	8002ea8 <HAL_ADC_Start_IT+0x184>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d114      	bne.n	8002ea8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	f043 0210 	orr.w	r2, r3, #16
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	20000010 	.word	0x20000010
 8002ebc:	431bde83 	.word	0x431bde83
 8002ec0:	fffff8fe 	.word	0xfffff8fe
 8002ec4:	04000020 	.word	0x04000020
 8002ec8:	40012300 	.word	0x40012300
 8002ecc:	40012000 	.word	0x40012000
 8002ed0:	40012200 	.word	0x40012200

08002ed4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d049      	beq.n	8002f9e <HAL_ADC_IRQHandler+0xca>
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d12b      	bne.n	8002f8e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d127      	bne.n	8002f8e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f44:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d119      	bne.n	8002f8e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0220 	bic.w	r2, r2, #32
 8002f68:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d105      	bne.n	8002f8e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f043 0201 	orr.w	r2, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8b0 	bl	80030f4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0212 	mvn.w	r2, #18
 8002f9c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0304 	and.w	r3, r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d057      	beq.n	8003064 <HAL_ADC_IRQHandler+0x190>
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d054      	beq.n	8003064 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d105      	bne.n	8002fd2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d139      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d006      	beq.n	8002ffc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d12b      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003006:	2b00      	cmp	r3, #0
 8003008:	d124      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003014:	2b00      	cmp	r3, #0
 8003016:	d11d      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800301c:	2b00      	cmp	r3, #0
 800301e:	d119      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800302e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fabb 	bl	80035d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f06f 020c 	mvn.w	r2, #12
 8003062:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d017      	beq.n	80030aa <HAL_ADC_IRQHandler+0x1d6>
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d014      	beq.n	80030aa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10d      	bne.n	80030aa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f834 	bl	8003108 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0201 	mvn.w	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0320 	and.w	r3, r3, #32
 80030b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030b8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d015      	beq.n	80030ec <HAL_ADC_IRQHandler+0x218>
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f043 0202 	orr.w	r2, r3, #2
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0220 	mvn.w	r2, #32
 80030da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f81d 	bl	800311c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0220 	mvn.w	r2, #32
 80030ea:	601a      	str	r2, [r3, #0]
  }
}
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_ADC_ConfigChannel+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e136      	b.n	80033ba <HAL_ADC_ConfigChannel+0x28a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b09      	cmp	r3, #9
 800315a:	d93a      	bls.n	80031d2 <HAL_ADC_ConfigChannel+0xa2>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003164:	d035      	beq.n	80031d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68d9      	ldr	r1, [r3, #12]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	4613      	mov	r3, r2
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4413      	add	r3, r2
 800317a:	3b1e      	subs	r3, #30
 800317c:	2207      	movs	r2, #7
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43da      	mvns	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	400a      	ands	r2, r1
 800318a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a8d      	ldr	r2, [pc, #564]	@ (80033c8 <HAL_ADC_ConfigChannel+0x298>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10a      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68d9      	ldr	r1, [r3, #12]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	061a      	lsls	r2, r3, #24
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031aa:	e035      	b.n	8003218 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68d9      	ldr	r1, [r3, #12]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4403      	add	r3, r0
 80031c4:	3b1e      	subs	r3, #30
 80031c6:	409a      	lsls	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031d0:	e022      	b.n	8003218 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6919      	ldr	r1, [r3, #16]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	b29b      	uxth	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	2207      	movs	r2, #7
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43da      	mvns	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	400a      	ands	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6919      	ldr	r1, [r3, #16]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	4618      	mov	r0, r3
 8003208:	4603      	mov	r3, r0
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	4403      	add	r3, r0
 800320e:	409a      	lsls	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	2b06      	cmp	r3, #6
 800321e:	d824      	bhi.n	800326a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	3b05      	subs	r3, #5
 8003232:	221f      	movs	r2, #31
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43da      	mvns	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	400a      	ands	r2, r1
 8003240:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	4618      	mov	r0, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	3b05      	subs	r3, #5
 800325c:	fa00 f203 	lsl.w	r2, r0, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	635a      	str	r2, [r3, #52]	@ 0x34
 8003268:	e04c      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d824      	bhi.n	80032bc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b23      	subs	r3, #35	@ 0x23
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b23      	subs	r3, #35	@ 0x23
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80032ba:	e023      	b.n	8003304 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b41      	subs	r3, #65	@ 0x41
 80032ce:	221f      	movs	r2, #31
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43da      	mvns	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	400a      	ands	r2, r1
 80032dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	4618      	mov	r0, r3
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	3b41      	subs	r3, #65	@ 0x41
 80032f8:	fa00 f203 	lsl.w	r2, r0, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a30      	ldr	r2, [pc, #192]	@ (80033cc <HAL_ADC_ConfigChannel+0x29c>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10a      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1f4>
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003316:	d105      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003318:	4b2d      	ldr	r3, [pc, #180]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	4a2c      	ldr	r2, [pc, #176]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800331e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8003322:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a28      	ldr	r2, [pc, #160]	@ (80033cc <HAL_ADC_ConfigChannel+0x29c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10f      	bne.n	800334e <HAL_ADC_ConfigChannel+0x21e>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b12      	cmp	r3, #18
 8003334:	d10b      	bne.n	800334e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003336:	4b26      	ldr	r3, [pc, #152]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800333c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003340:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003342:	4b23      	ldr	r3, [pc, #140]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4a22      	ldr	r2, [pc, #136]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003348:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800334c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a1e      	ldr	r2, [pc, #120]	@ (80033cc <HAL_ADC_ConfigChannel+0x29c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d12b      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x280>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a1a      	ldr	r2, [pc, #104]	@ (80033c8 <HAL_ADC_ConfigChannel+0x298>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <HAL_ADC_ConfigChannel+0x23a>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b11      	cmp	r3, #17
 8003368:	d122      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800336a:	4b19      	ldr	r3, [pc, #100]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	4a18      	ldr	r2, [pc, #96]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003370:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003374:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003376:	4b16      	ldr	r3, [pc, #88]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800337c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003380:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a10      	ldr	r2, [pc, #64]	@ (80033c8 <HAL_ADC_ConfigChannel+0x298>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d111      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a11      	ldr	r2, [pc, #68]	@ (80033d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0c9a      	lsrs	r2, r3, #18
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033a2:	e002      	b.n	80033aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f9      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	10000012 	.word	0x10000012
 80033cc:	40012000 	.word	0x40012000
 80033d0:	40012300 	.word	0x40012300
 80033d4:	20000010 	.word	0x20000010
 80033d8:	431bde83 	.word	0x431bde83

080033dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80033e4:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <ADC_Init+0x1ec>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a77      	ldr	r2, [pc, #476]	@ (80035c8 <ADC_Init+0x1ec>)
 80033ea:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80033ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80033f0:	4b75      	ldr	r3, [pc, #468]	@ (80035c8 <ADC_Init+0x1ec>)
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	4973      	ldr	r1, [pc, #460]	@ (80035c8 <ADC_Init+0x1ec>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800340c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6859      	ldr	r1, [r3, #4]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003452:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <ADC_Init+0x1f0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d022      	beq.n	80034b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800347e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e00f      	b.n	80034d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0202 	bic.w	r2, r2, #2
 80034e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	005a      	lsls	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003512:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003522:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6859      	ldr	r1, [r3, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	035a      	lsls	r2, r3, #13
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	e007      	b.n	800354c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800355a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	3b01      	subs	r3, #1
 8003568:	051a      	lsls	r2, r3, #20
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800358e:	025a      	lsls	r2, r3, #9
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	029a      	lsls	r2, r3, #10
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	40012300 	.word	0x40012300
 80035cc:	0f000001 	.word	0x0f000001

080035d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003600:	4013      	ands	r3, r2
 8003602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800360c:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <__NVIC_SetPriorityGrouping+0x44>)
 800360e:	4313      	orrs	r3, r2
 8003610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003612:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <__NVIC_SetPriorityGrouping+0x40>)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	60d3      	str	r3, [r2, #12]
}
 8003618:	bf00      	nop
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00
 8003628:	05fa0000 	.word	0x05fa0000

0800362c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003630:	4b04      	ldr	r3, [pc, #16]	@ (8003644 <__NVIC_GetPriorityGrouping+0x18>)
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	0a1b      	lsrs	r3, r3, #8
 8003636:	f003 0307 	and.w	r3, r3, #7
}
 800363a:	4618      	mov	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	2b00      	cmp	r3, #0
 8003658:	db0b      	blt.n	8003672 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4907      	ldr	r1, [pc, #28]	@ (8003680 <__NVIC_EnableIRQ+0x38>)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	2001      	movs	r0, #1
 800366a:	fa00 f202 	lsl.w	r2, r0, r2
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	e000e100 	.word	0xe000e100

08003684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	6039      	str	r1, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003694:	2b00      	cmp	r3, #0
 8003696:	db0a      	blt.n	80036ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	b2da      	uxtb	r2, r3
 800369c:	490c      	ldr	r1, [pc, #48]	@ (80036d0 <__NVIC_SetPriority+0x4c>)
 800369e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a2:	0112      	lsls	r2, r2, #4
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	440b      	add	r3, r1
 80036a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036ac:	e00a      	b.n	80036c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	4908      	ldr	r1, [pc, #32]	@ (80036d4 <__NVIC_SetPriority+0x50>)
 80036b4:	79fb      	ldrb	r3, [r7, #7]
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	3b04      	subs	r3, #4
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	440b      	add	r3, r1
 80036c2:	761a      	strb	r2, [r3, #24]
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	e000e100 	.word	0xe000e100
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	@ 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f1c3 0307 	rsb	r3, r3, #7
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	bf28      	it	cs
 80036f6:	2304      	movcs	r3, #4
 80036f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3304      	adds	r3, #4
 80036fe:	2b06      	cmp	r3, #6
 8003700:	d902      	bls.n	8003708 <NVIC_EncodePriority+0x30>
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	3b03      	subs	r3, #3
 8003706:	e000      	b.n	800370a <NVIC_EncodePriority+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800370c:	f04f 32ff 	mov.w	r2, #4294967295
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43da      	mvns	r2, r3
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	401a      	ands	r2, r3
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003720:	f04f 31ff 	mov.w	r1, #4294967295
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	43d9      	mvns	r1, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	4313      	orrs	r3, r2
         );
}
 8003732:	4618      	mov	r0, r3
 8003734:	3724      	adds	r7, #36	@ 0x24
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
	...

08003740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3b01      	subs	r3, #1
 800374c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003750:	d301      	bcc.n	8003756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003752:	2301      	movs	r3, #1
 8003754:	e00f      	b.n	8003776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003756:	4a0a      	ldr	r2, [pc, #40]	@ (8003780 <SysTick_Config+0x40>)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800375e:	210f      	movs	r1, #15
 8003760:	f04f 30ff 	mov.w	r0, #4294967295
 8003764:	f7ff ff8e 	bl	8003684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003768:	4b05      	ldr	r3, [pc, #20]	@ (8003780 <SysTick_Config+0x40>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376e:	4b04      	ldr	r3, [pc, #16]	@ (8003780 <SysTick_Config+0x40>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	e000e010 	.word	0xe000e010

08003784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ff29 	bl	80035e4 <__NVIC_SetPriorityGrouping>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800379a:	b580      	push	{r7, lr}
 800379c:	b086      	sub	sp, #24
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
 80037a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ac:	f7ff ff3e 	bl	800362c <__NVIC_GetPriorityGrouping>
 80037b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	6978      	ldr	r0, [r7, #20]
 80037b8:	f7ff ff8e 	bl	80036d8 <NVIC_EncodePriority>
 80037bc:	4602      	mov	r2, r0
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	4611      	mov	r1, r2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff5d 	bl	8003684 <__NVIC_SetPriority>
}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	4603      	mov	r3, r0
 80037da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff31 	bl	8003648 <__NVIC_EnableIRQ>
}
 80037e6:	bf00      	nop
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b082      	sub	sp, #8
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f7ff ffa2 	bl	8003740 <SysTick_Config>
 80037fc:	4603      	mov	r3, r0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e054      	b.n	80038c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7f5b      	ldrb	r3, [r3, #29]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fe fbd8 	bl	8001fe0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	791b      	ldrb	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10c      	bne.n	8003858 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a22      	ldr	r2, [pc, #136]	@ (80038cc <HAL_CRC_Init+0xc4>)
 8003844:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0218 	bic.w	r2, r2, #24
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	e00c      	b.n	8003872 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6899      	ldr	r1, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	461a      	mov	r2, r3
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f834 	bl	80038d0 <HAL_CRCEx_Polynomial_Set>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e028      	b.n	80038c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	795b      	ldrb	r3, [r3, #5]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f04f 32ff 	mov.w	r2, #4294967295
 8003882:	611a      	str	r2, [r3, #16]
 8003884:	e004      	b.n	8003890 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6912      	ldr	r2, [r2, #16]
 800388e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	04c11db7 	.word	0x04c11db7

080038d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038e0:	231f      	movs	r3, #31
 80038e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
 80038f2:	e063      	b.n	80039bc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038f4:	bf00      	nop
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1e5a      	subs	r2, r3, #1
 80038fa:	613a      	str	r2, [r7, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d009      	beq.n	8003914 <HAL_CRCEx_Polynomial_Set+0x44>
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b18      	cmp	r3, #24
 8003918:	d846      	bhi.n	80039a8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800391a:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <HAL_CRCEx_Polynomial_Set+0x50>)
 800391c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003920:	080039af 	.word	0x080039af
 8003924:	080039a9 	.word	0x080039a9
 8003928:	080039a9 	.word	0x080039a9
 800392c:	080039a9 	.word	0x080039a9
 8003930:	080039a9 	.word	0x080039a9
 8003934:	080039a9 	.word	0x080039a9
 8003938:	080039a9 	.word	0x080039a9
 800393c:	080039a9 	.word	0x080039a9
 8003940:	0800399d 	.word	0x0800399d
 8003944:	080039a9 	.word	0x080039a9
 8003948:	080039a9 	.word	0x080039a9
 800394c:	080039a9 	.word	0x080039a9
 8003950:	080039a9 	.word	0x080039a9
 8003954:	080039a9 	.word	0x080039a9
 8003958:	080039a9 	.word	0x080039a9
 800395c:	080039a9 	.word	0x080039a9
 8003960:	08003991 	.word	0x08003991
 8003964:	080039a9 	.word	0x080039a9
 8003968:	080039a9 	.word	0x080039a9
 800396c:	080039a9 	.word	0x080039a9
 8003970:	080039a9 	.word	0x080039a9
 8003974:	080039a9 	.word	0x080039a9
 8003978:	080039a9 	.word	0x080039a9
 800397c:	080039a9 	.word	0x080039a9
 8003980:	08003985 	.word	0x08003985
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b06      	cmp	r3, #6
 8003988:	d913      	bls.n	80039b2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800398e:	e010      	b.n	80039b2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b07      	cmp	r3, #7
 8003994:	d90f      	bls.n	80039b6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800399a:	e00c      	b.n	80039b6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	2b0f      	cmp	r3, #15
 80039a0:	d90b      	bls.n	80039ba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80039a6:	e008      	b.n	80039ba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	75fb      	strb	r3, [r7, #23]
        break;
 80039ac:	e006      	b.n	80039bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80039ae:	bf00      	nop
 80039b0:	e004      	b.n	80039bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80039b2:	bf00      	nop
 80039b4:	e002      	b.n	80039bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80039b6:	bf00      	nop
 80039b8:	e000      	b.n	80039bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80039ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80039bc:	7dfb      	ldrb	r3, [r7, #23]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68ba      	ldr	r2, [r7, #8]
 80039c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 0118 	bic.w	r1, r3, #24
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	430a      	orrs	r2, r1
 80039dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	371c      	adds	r7, #28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039f8:	f7ff f920 	bl	8002c3c <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e099      	b.n	8003b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2202      	movs	r2, #2
 8003a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0201 	bic.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a28:	e00f      	b.n	8003a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a2a:	f7ff f907 	bl	8002c3c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d908      	bls.n	8003a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2203      	movs	r2, #3
 8003a42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e078      	b.n	8003b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1e8      	bne.n	8003a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4b38      	ldr	r3, [pc, #224]	@ (8003b44 <HAL_DMA_Init+0x158>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d107      	bne.n	8003ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	4313      	orrs	r3, r2
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0307 	bic.w	r3, r3, #7
 8003aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d117      	bne.n	8003b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa47 	bl	8003f84 <DMA_CheckFifoParam>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d008      	beq.n	8003b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e016      	b.n	8003b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f9fe 	bl	8003f18 <DMA_CalcBaseAndBitshift>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	223f      	movs	r2, #63	@ 0x3f
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	f010803f 	.word	0xf010803f

08003b48 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e050      	b.n	8003bfc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003b66:	2302      	movs	r3, #2
 8003b68:	e048      	b.n	8003bfc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2221      	movs	r2, #33	@ 0x21
 8003ba8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9b4 	bl	8003f18 <DMA_CalcBaseAndBitshift>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb8:	223f      	movs	r2, #63	@ 0x3f
 8003bba:	409a      	lsls	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003c10:	4b8e      	ldr	r3, [pc, #568]	@ (8003e4c <HAL_DMA_IRQHandler+0x248>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a8e      	ldr	r2, [pc, #568]	@ (8003e50 <HAL_DMA_IRQHandler+0x24c>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c2e:	2208      	movs	r2, #8
 8003c30:	409a      	lsls	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01a      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0204 	bic.w	r2, r2, #4
 8003c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	2208      	movs	r2, #8
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c68:	f043 0201 	orr.w	r2, r3, #1
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c74:	2201      	movs	r2, #1
 8003c76:	409a      	lsls	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d012      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c92:	2201      	movs	r2, #1
 8003c94:	409a      	lsls	r2, r3
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9e:	f043 0202 	orr.w	r2, r3, #2
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2204      	movs	r2, #4
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d012      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00b      	beq.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc8:	2204      	movs	r2, #4
 8003cca:	409a      	lsls	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd4:	f043 0204 	orr.w	r2, r3, #4
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	2210      	movs	r2, #16
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d043      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d03c      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfe:	2210      	movs	r2, #16
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d108      	bne.n	8003d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d024      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	4798      	blx	r3
 8003d32:	e01f      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	4798      	blx	r3
 8003d44:	e016      	b.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d107      	bne.n	8003d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0208 	bic.w	r2, r2, #8
 8003d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d78:	2220      	movs	r2, #32
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 808f 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8087 	beq.w	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	409a      	lsls	r2, r3
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	d136      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0216 	bic.w	r2, r2, #22
 8003dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695a      	ldr	r2, [r3, #20]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d103      	bne.n	8003dde <HAL_DMA_IRQHandler+0x1da>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d007      	beq.n	8003dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0208 	bic.w	r2, r2, #8
 8003dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	223f      	movs	r2, #63	@ 0x3f
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d07e      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
        }
        return;
 8003e1a:	e079      	b.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d01d      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10d      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d031      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
 8003e48:	e02c      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
 8003e4a:	bf00      	nop
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d023      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
 8003e64:	e01e      	b.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10f      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d003      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d032      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d022      	beq.n	8003efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2205      	movs	r2, #5
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 0201 	bic.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60bb      	str	r3, [r7, #8]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d307      	bcc.n	8003eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x2cc>
 8003eea:	e000      	b.n	8003eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
 8003f0e:	e000      	b.n	8003f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f10:	bf00      	nop
    }
  }
}
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	3b10      	subs	r3, #16
 8003f28:	4a13      	ldr	r2, [pc, #76]	@ (8003f78 <DMA_CalcBaseAndBitshift+0x60>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f32:	4a12      	ldr	r2, [pc, #72]	@ (8003f7c <DMA_CalcBaseAndBitshift+0x64>)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4413      	add	r3, r2
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b03      	cmp	r3, #3
 8003f44:	d908      	bls.n	8003f58 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <DMA_CalcBaseAndBitshift+0x68>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	1d1a      	adds	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f56:	e006      	b.n	8003f66 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <DMA_CalcBaseAndBitshift+0x68>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	aaaaaaab 	.word	0xaaaaaaab
 8003f7c:	0800f220 	.word	0x0800f220
 8003f80:	fffffc00 	.word	0xfffffc00

08003f84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11f      	bne.n	8003fde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d856      	bhi.n	8004052 <DMA_CheckFifoParam+0xce>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <DMA_CheckFifoParam+0x28>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcf 	.word	0x08003fcf
 8003fb4:	08003fbd 	.word	0x08003fbd
 8003fb8:	08004053 	.word	0x08004053
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d046      	beq.n	8004056 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fcc:	e043      	b.n	8004056 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fd6:	d140      	bne.n	800405a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fdc:	e03d      	b.n	800405a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe6:	d121      	bne.n	800402c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b03      	cmp	r3, #3
 8003fec:	d837      	bhi.n	800405e <DMA_CheckFifoParam+0xda>
 8003fee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <DMA_CheckFifoParam+0x70>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004005 	.word	0x08004005
 8003ff8:	0800400b 	.word	0x0800400b
 8003ffc:	08004005 	.word	0x08004005
 8004000:	0800401d 	.word	0x0800401d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
      break;
 8004008:	e030      	b.n	800406c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d025      	beq.n	8004062 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800401a:	e022      	b.n	8004062 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004020:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004024:	d11f      	bne.n	8004066 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800402a:	e01c      	b.n	8004066 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d903      	bls.n	800403a <DMA_CheckFifoParam+0xb6>
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2b03      	cmp	r3, #3
 8004036:	d003      	beq.n	8004040 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004038:	e018      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	73fb      	strb	r3, [r7, #15]
      break;
 800403e:	e015      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004044:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
      break;
 8004050:	e00b      	b.n	800406a <DMA_CheckFifoParam+0xe6>
      break;
 8004052:	bf00      	nop
 8004054:	e00a      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
 8004058:	e008      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800405a:	bf00      	nop
 800405c:	e006      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e004      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 8004062:	bf00      	nop
 8004064:	e002      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;   
 8004066:	bf00      	nop
 8004068:	e000      	b.n	800406c <DMA_CheckFifoParam+0xe8>
      break;
 800406a:	bf00      	nop
    }
  } 
  
  return status; 
 800406c:	7bfb      	ldrb	r3, [r7, #15]
}
 800406e:	4618      	mov	r0, r3
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop

0800407c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e039      	b.n	8004102 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fd ffbc 	bl	8002020 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040cc:	f023 0107 	bic.w	r1, r3, #7
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040e2:	4b0a      	ldr	r3, [pc, #40]	@ (800410c <HAL_DMA2D_Init+0x90>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d1      	ldr	r1, [r2, #12]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	ffffc000 	.word	0xffffc000

08004110 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_DMA2D_Start+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e018      	b.n	800415e <HAL_DMA2D_Start+0x4e>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 f988 	bl	800445c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b086      	sub	sp, #24
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d056      	beq.n	8004230 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004182:	f7fe fd5b 	bl	8002c3c <HAL_GetTick>
 8004186:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004188:	e04b      	b.n	8004222 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2221      	movs	r2, #33	@ 0x21
 80041ce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0a5      	b.n	8004330 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ea:	d01a      	beq.n	8004222 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fe fd26 	bl	8002c3c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <HAL_DMA2D_PollForTransfer+0x9c>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10f      	bne.n	8004222 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2203      	movs	r2, #3
 8004212:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e086      	b.n	8004330 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0ac      	beq.n	800418a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	f003 0320 	and.w	r3, r3, #32
 800423a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d061      	beq.n	8004316 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004252:	f7fe fcf3 	bl	8002c3c <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004258:	e056      	b.n	8004308 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02e      	beq.n	80042ca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d005      	beq.n	8004282 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427a:	f043 0204 	orr.w	r2, r3, #4
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004290:	f043 0202 	orr.w	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2229      	movs	r2, #41	@ 0x29
 80042b4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2204      	movs	r2, #4
 80042ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e032      	b.n	8004330 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fe fcb3 	bl	8002c3c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <HAL_DMA2D_PollForTransfer+0x182>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10f      	bne.n	8004308 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	f043 0220 	orr.w	r2, r3, #32
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2203      	movs	r2, #3
 80042f8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e013      	b.n	8004330 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0a1      	beq.n	800425a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2212      	movs	r2, #18
 800431c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004338:	b480      	push	{r7}
 800433a:	b087      	sub	sp, #28
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_DMA2D_ConfigLayer+0x20>
 8004354:	2302      	movs	r3, #2
 8004356:	e079      	b.n	800444c <HAL_DMA2D_ConfigLayer+0x114>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	3318      	adds	r3, #24
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004382:	4b35      	ldr	r3, [pc, #212]	@ (8004458 <HAL_DMA2D_ConfigLayer+0x120>)
 8004384:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b0a      	cmp	r3, #10
 800438c:	d003      	beq.n	8004396 <HAL_DMA2D_ConfigLayer+0x5e>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b09      	cmp	r3, #9
 8004394:	d107      	bne.n	80043a6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e005      	b.n	80043b2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	061b      	lsls	r3, r3, #24
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d120      	bne.n	80043fa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	ea02 0103 	and.w	r1, r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b0a      	cmp	r3, #10
 80043e0:	d003      	beq.n	80043ea <HAL_DMA2D_ConfigLayer+0xb2>
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b09      	cmp	r3, #9
 80043e8:	d127      	bne.n	800443a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80043f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80043f8:	e01f      	b.n	800443a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	43db      	mvns	r3, r3
 8004404:	ea02 0103 	and.w	r1, r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	430a      	orrs	r2, r1
 8004410:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b0a      	cmp	r3, #10
 8004422:	d003      	beq.n	800442c <HAL_DMA2D_ConfigLayer+0xf4>
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b09      	cmp	r3, #9
 800442a:	d106      	bne.n	800443a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004438:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	ff03000f 	.word	0xff03000f

0800445c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800445c:	b480      	push	{r7}
 800445e:	b08b      	sub	sp, #44	@ 0x2c
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
 8004468:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004470:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	041a      	lsls	r2, r3, #16
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	431a      	orrs	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004494:	d174      	bne.n	8004580 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800449c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80044a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80044ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d108      	bne.n	80044ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	697a      	ldr	r2, [r7, #20]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80044cc:	e053      	b.n	8004576 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d106      	bne.n	80044e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	4313      	orrs	r3, r2
 80044e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044e2:	e048      	b.n	8004576 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d111      	bne.n	8004510 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	0cdb      	lsrs	r3, r3, #19
 80044f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	0a9b      	lsrs	r3, r3, #10
 80044f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	08db      	lsrs	r3, r3, #3
 80044fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	02db      	lsls	r3, r3, #11
 8004506:	4313      	orrs	r3, r2
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	4313      	orrs	r3, r2
 800450c:	627b      	str	r3, [r7, #36]	@ 0x24
 800450e:	e032      	b.n	8004576 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b03      	cmp	r3, #3
 8004516:	d117      	bne.n	8004548 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	0fdb      	lsrs	r3, r3, #31
 800451c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	0cdb      	lsrs	r3, r3, #19
 8004522:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	0adb      	lsrs	r3, r3, #11
 8004528:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	431a      	orrs	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	03db      	lsls	r3, r3, #15
 800453e:	4313      	orrs	r3, r2
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	627b      	str	r3, [r7, #36]	@ 0x24
 8004546:	e016      	b.n	8004576 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	0f1b      	lsrs	r3, r3, #28
 800454c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	0d1b      	lsrs	r3, r3, #20
 8004552:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	0b1b      	lsrs	r3, r3, #12
 8004558:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	091b      	lsrs	r3, r3, #4
 800455e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	011a      	lsls	r2, r3, #4
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	431a      	orrs	r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	031b      	lsls	r3, r3, #12
 800456e:	4313      	orrs	r3, r2
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800457e:	e003      	b.n	8004588 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	60da      	str	r2, [r3, #12]
}
 8004588:	bf00      	nop
 800458a:	372c      	adds	r7, #44	@ 0x2c
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004594:	b480      	push	{r7}
 8004596:	b089      	sub	sp, #36	@ 0x24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800459e:	2300      	movs	r3, #0
 80045a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	61fb      	str	r3, [r7, #28]
 80045b2:	e175      	b.n	80048a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4013      	ands	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	f040 8164 	bne.w	800489a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d005      	beq.n	80045ea <HAL_GPIO_Init+0x56>
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d130      	bne.n	800464c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	2203      	movs	r2, #3
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43db      	mvns	r3, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4013      	ands	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004620:	2201      	movs	r2, #1
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	4013      	ands	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 0201 	and.w	r2, r3, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	2b03      	cmp	r3, #3
 8004656:	d017      	beq.n	8004688 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	2203      	movs	r2, #3
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	43db      	mvns	r3, r3
 800466a:	69ba      	ldr	r2, [r7, #24]
 800466c:	4013      	ands	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d123      	bne.n	80046dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	08da      	lsrs	r2, r3, #3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3208      	adds	r2, #8
 800469c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	220f      	movs	r2, #15
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	69b9      	ldr	r1, [r7, #24]
 80046d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2203      	movs	r2, #3
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0203 	and.w	r2, r3, #3
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80be 	beq.w	800489a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	4b66      	ldr	r3, [pc, #408]	@ (80048b8 <HAL_GPIO_Init+0x324>)
 8004720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004722:	4a65      	ldr	r2, [pc, #404]	@ (80048b8 <HAL_GPIO_Init+0x324>)
 8004724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004728:	6453      	str	r3, [r2, #68]	@ 0x44
 800472a:	4b63      	ldr	r3, [pc, #396]	@ (80048b8 <HAL_GPIO_Init+0x324>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004736:	4a61      	ldr	r2, [pc, #388]	@ (80048bc <HAL_GPIO_Init+0x328>)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	089b      	lsrs	r3, r3, #2
 800473c:	3302      	adds	r3, #2
 800473e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	220f      	movs	r2, #15
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43db      	mvns	r3, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4013      	ands	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a58      	ldr	r2, [pc, #352]	@ (80048c0 <HAL_GPIO_Init+0x32c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d037      	beq.n	80047d2 <HAL_GPIO_Init+0x23e>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a57      	ldr	r2, [pc, #348]	@ (80048c4 <HAL_GPIO_Init+0x330>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d031      	beq.n	80047ce <HAL_GPIO_Init+0x23a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a56      	ldr	r2, [pc, #344]	@ (80048c8 <HAL_GPIO_Init+0x334>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d02b      	beq.n	80047ca <HAL_GPIO_Init+0x236>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a55      	ldr	r2, [pc, #340]	@ (80048cc <HAL_GPIO_Init+0x338>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d025      	beq.n	80047c6 <HAL_GPIO_Init+0x232>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a54      	ldr	r2, [pc, #336]	@ (80048d0 <HAL_GPIO_Init+0x33c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d01f      	beq.n	80047c2 <HAL_GPIO_Init+0x22e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a53      	ldr	r2, [pc, #332]	@ (80048d4 <HAL_GPIO_Init+0x340>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d019      	beq.n	80047be <HAL_GPIO_Init+0x22a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a52      	ldr	r2, [pc, #328]	@ (80048d8 <HAL_GPIO_Init+0x344>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_GPIO_Init+0x226>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a51      	ldr	r2, [pc, #324]	@ (80048dc <HAL_GPIO_Init+0x348>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00d      	beq.n	80047b6 <HAL_GPIO_Init+0x222>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a50      	ldr	r2, [pc, #320]	@ (80048e0 <HAL_GPIO_Init+0x34c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <HAL_GPIO_Init+0x21e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4f      	ldr	r2, [pc, #316]	@ (80048e4 <HAL_GPIO_Init+0x350>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_GPIO_Init+0x21a>
 80047aa:	2309      	movs	r3, #9
 80047ac:	e012      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047ae:	230a      	movs	r3, #10
 80047b0:	e010      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047b2:	2308      	movs	r3, #8
 80047b4:	e00e      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047b6:	2307      	movs	r3, #7
 80047b8:	e00c      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047ba:	2306      	movs	r3, #6
 80047bc:	e00a      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047be:	2305      	movs	r3, #5
 80047c0:	e008      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047c2:	2304      	movs	r3, #4
 80047c4:	e006      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047c6:	2303      	movs	r3, #3
 80047c8:	e004      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e002      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <HAL_GPIO_Init+0x240>
 80047d2:	2300      	movs	r3, #0
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	f002 0203 	and.w	r2, r2, #3
 80047da:	0092      	lsls	r2, r2, #2
 80047dc:	4093      	lsls	r3, r2
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047e4:	4935      	ldr	r1, [pc, #212]	@ (80048bc <HAL_GPIO_Init+0x328>)
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	089b      	lsrs	r3, r3, #2
 80047ea:	3302      	adds	r3, #2
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047f2:	4b3d      	ldr	r3, [pc, #244]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	43db      	mvns	r3, r3
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	4013      	ands	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004816:	4a34      	ldr	r2, [pc, #208]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800481c:	4b32      	ldr	r3, [pc, #200]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	43db      	mvns	r3, r3
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	4013      	ands	r3, r2
 800482a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004838:	69ba      	ldr	r2, [r7, #24]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004840:	4a29      	ldr	r2, [pc, #164]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004846:	4b28      	ldr	r3, [pc, #160]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	43db      	mvns	r3, r3
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	4013      	ands	r3, r2
 8004854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800486a:	4a1f      	ldr	r2, [pc, #124]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004870:	4b1d      	ldr	r3, [pc, #116]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	43db      	mvns	r3, r3
 800487a:	69ba      	ldr	r2, [r7, #24]
 800487c:	4013      	ands	r3, r2
 800487e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004894:	4a14      	ldr	r2, [pc, #80]	@ (80048e8 <HAL_GPIO_Init+0x354>)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2b0f      	cmp	r3, #15
 80048a4:	f67f ae86 	bls.w	80045b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	3724      	adds	r7, #36	@ 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40013800 	.word	0x40013800
 80048c0:	40020000 	.word	0x40020000
 80048c4:	40020400 	.word	0x40020400
 80048c8:	40020800 	.word	0x40020800
 80048cc:	40020c00 	.word	0x40020c00
 80048d0:	40021000 	.word	0x40021000
 80048d4:	40021400 	.word	0x40021400
 80048d8:	40021800 	.word	0x40021800
 80048dc:	40021c00 	.word	0x40021c00
 80048e0:	40022000 	.word	0x40022000
 80048e4:	40022400 	.word	0x40022400
 80048e8:	40013c00 	.word	0x40013c00

080048ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	460b      	mov	r3, r1
 80048f6:	807b      	strh	r3, [r7, #2]
 80048f8:	4613      	mov	r3, r2
 80048fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048fc:	787b      	ldrb	r3, [r7, #1]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004902:	887a      	ldrh	r2, [r7, #2]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004908:	e003      	b.n	8004912 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800490a:	887b      	ldrh	r3, [r7, #2]
 800490c:	041a      	lsls	r2, r3, #16
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004930:	887a      	ldrh	r2, [r7, #2]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4013      	ands	r3, r2
 8004936:	041a      	lsls	r2, r3, #16
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	43d9      	mvns	r1, r3
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	400b      	ands	r3, r1
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e08b      	b.n	8004a7e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8b5 	bl	8004aea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	@ 0x24
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d107      	bne.n	80049ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ca:	609a      	str	r2, [r3, #8]
 80049cc:	e006      	b.n	80049dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80049da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d108      	bne.n	80049f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049f2:	605a      	str	r2, [r3, #4]
 80049f4:	e007      	b.n	8004a06 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6859      	ldr	r1, [r3, #4]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b1d      	ldr	r3, [pc, #116]	@ (8004a88 <HAL_I2C_Init+0x134>)
 8004a12:	430b      	orrs	r3, r1
 8004a14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69d9      	ldr	r1, [r3, #28]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	02008000 	.word	0x02008000

08004a8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e021      	b.n	8004ae2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2224      	movs	r2, #36	@ 0x24
 8004aa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f821 	bl	8004afe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	f040 80f9 	bne.w	8004d2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <HAL_I2C_Mem_Write+0x34>
 8004b42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b4e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e0ed      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2C_Mem_Write+0x4e>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e0e6      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fe f867 	bl	8002c3c <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2319      	movs	r3, #25
 8004b76:	2201      	movs	r2, #1
 8004b78:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 fad1 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e0d1      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2221      	movs	r2, #33	@ 0x21
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2240      	movs	r2, #64	@ 0x40
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a3a      	ldr	r2, [r7, #32]
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bb4:	88f8      	ldrh	r0, [r7, #6]
 8004bb6:	893a      	ldrh	r2, [r7, #8]
 8004bb8:	8979      	ldrh	r1, [r7, #10]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	9301      	str	r3, [sp, #4]
 8004bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f9e1 	bl	8004f8c <I2C_RequestMemoryWrite>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d005      	beq.n	8004bdc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0a9      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2bff      	cmp	r3, #255	@ 0xff
 8004be4:	d90e      	bls.n	8004c04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	22ff      	movs	r2, #255	@ 0xff
 8004bea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf0:	b2da      	uxtb	r2, r3
 8004bf2:	8979      	ldrh	r1, [r7, #10]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 fc55 	bl	80054ac <I2C_TransferConfig>
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	8979      	ldrh	r1, [r7, #10]
 8004c16:	2300      	movs	r3, #0
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fc44 	bl	80054ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fad4 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e07b      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d034      	beq.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d130      	bne.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c80:	2200      	movs	r2, #0
 8004c82:	2180      	movs	r1, #128	@ 0x80
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 fa4d 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e04d      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	2bff      	cmp	r3, #255	@ 0xff
 8004c9c:	d90e      	bls.n	8004cbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	22ff      	movs	r2, #255	@ 0xff
 8004ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	8979      	ldrh	r1, [r7, #10]
 8004cac:	2300      	movs	r3, #0
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 fbf9 	bl	80054ac <I2C_TransferConfig>
 8004cba:	e00f      	b.n	8004cdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	8979      	ldrh	r1, [r7, #10]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fbe8 	bl	80054ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d19e      	bne.n	8004c24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cea:	68f8      	ldr	r0, [r7, #12]
 8004cec:	f000 faba 	bl	8005264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e01a      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <HAL_I2C_Mem_Write+0x224>)
 8004d0e:	400b      	ands	r3, r1
 8004d10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e000      	b.n	8004d30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
  }
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	fe00e800 	.word	0xfe00e800

08004d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	461a      	mov	r2, r3
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	817b      	strh	r3, [r7, #10]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	813b      	strh	r3, [r7, #8]
 8004d52:	4613      	mov	r3, r2
 8004d54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	f040 80fd 	bne.w	8004f5e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d64:	6a3b      	ldr	r3, [r7, #32]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_I2C_Mem_Read+0x34>
 8004d6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d76:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e0f1      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_I2C_Mem_Read+0x4e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0ea      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d92:	f7fd ff53 	bl	8002c3c <HAL_GetTick>
 8004d96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	2319      	movs	r3, #25
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f9bd 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0d5      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2222      	movs	r2, #34	@ 0x22
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2240      	movs	r2, #64	@ 0x40
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a3a      	ldr	r2, [r7, #32]
 8004dce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ddc:	88f8      	ldrh	r0, [r7, #6]
 8004dde:	893a      	ldrh	r2, [r7, #8]
 8004de0:	8979      	ldrh	r1, [r7, #10]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	9301      	str	r3, [sp, #4]
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4603      	mov	r3, r0
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f921 	bl	8005034 <I2C_RequestMemoryRead>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0ad      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2bff      	cmp	r3, #255	@ 0xff
 8004e0c:	d90e      	bls.n	8004e2c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	b2da      	uxtb	r2, r3
 8004e1a:	8979      	ldrh	r1, [r7, #10]
 8004e1c:	4b52      	ldr	r3, [pc, #328]	@ (8004f68 <HAL_I2C_Mem_Read+0x22c>)
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f000 fb41 	bl	80054ac <I2C_TransferConfig>
 8004e2a:	e00f      	b.n	8004e4c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e3a:	b2da      	uxtb	r2, r3
 8004e3c:	8979      	ldrh	r1, [r7, #10]
 8004e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004f68 <HAL_I2C_Mem_Read+0x22c>)
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 fb30 	bl	80054ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	2200      	movs	r2, #0
 8004e54:	2104      	movs	r1, #4
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f000 f964 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07c      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d034      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d130      	bne.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	2180      	movs	r1, #128	@ 0x80
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f935 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e04d      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2bff      	cmp	r3, #255	@ 0xff
 8004ecc:	d90e      	bls.n	8004eec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	8979      	ldrh	r1, [r7, #10]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fae1 	bl	80054ac <I2C_TransferConfig>
 8004eea:	e00f      	b.n	8004f0c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	8979      	ldrh	r1, [r7, #10]
 8004efe:	2300      	movs	r3, #0
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 fad0 	bl	80054ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d19a      	bne.n	8004e4c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f9a2 	bl	8005264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e01a      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <HAL_I2C_Mem_Read+0x230>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	80002400 	.word	0x80002400
 8004f6c:	fe00e800 	.word	0xfe00e800

08004f70 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7e:	b2db      	uxtb	r3, r3
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	461a      	mov	r2, r3
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	817b      	strh	r3, [r7, #10]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	813b      	strh	r3, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004fa6:	88fb      	ldrh	r3, [r7, #6]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	8979      	ldrh	r1, [r7, #10]
 8004fac:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <I2C_RequestMemoryWrite+0xa4>)
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f000 fa79 	bl	80054ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f000 f909 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e02c      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fce:	88fb      	ldrh	r3, [r7, #6]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fd4:	893b      	ldrh	r3, [r7, #8]
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fde:	e015      	b.n	800500c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fe0:	893b      	ldrh	r3, [r7, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8ef 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e012      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005002:	893b      	ldrh	r3, [r7, #8]
 8005004:	b2da      	uxtb	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2200      	movs	r2, #0
 8005014:	2180      	movs	r1, #128	@ 0x80
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f884 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	80002000 	.word	0x80002000

08005034 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af02      	add	r7, sp, #8
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	461a      	mov	r2, r3
 8005042:	4603      	mov	r3, r0
 8005044:	817b      	strh	r3, [r7, #10]
 8005046:	460b      	mov	r3, r1
 8005048:	813b      	strh	r3, [r7, #8]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	b2da      	uxtb	r2, r3
 8005052:	8979      	ldrh	r1, [r7, #10]
 8005054:	4b20      	ldr	r3, [pc, #128]	@ (80050d8 <I2C_RequestMemoryRead+0xa4>)
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2300      	movs	r3, #0
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fa26 	bl	80054ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	69b9      	ldr	r1, [r7, #24]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 f8b6 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e02c      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005074:	88fb      	ldrh	r3, [r7, #6]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507a:	893b      	ldrh	r3, [r7, #8]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	629a      	str	r2, [r3, #40]	@ 0x28
 8005084:	e015      	b.n	80050b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005086:	893b      	ldrh	r3, [r7, #8]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	b29b      	uxth	r3, r3
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005094:	69fa      	ldr	r2, [r7, #28]
 8005096:	69b9      	ldr	r1, [r7, #24]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 f89c 	bl	80051d6 <I2C_WaitOnTXISFlagUntilTimeout>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e012      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80050a8:	893b      	ldrh	r3, [r7, #8]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	9300      	str	r3, [sp, #0]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	2200      	movs	r2, #0
 80050ba:	2140      	movs	r1, #64	@ 0x40
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 f831 	bl	8005124 <I2C_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e000      	b.n	80050ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	80002000 	.word	0x80002000

080050dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d103      	bne.n	80050fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2200      	movs	r2, #0
 80050f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d007      	beq.n	8005118 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	699a      	ldr	r2, [r3, #24]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f042 0201 	orr.w	r2, r2, #1
 8005116:	619a      	str	r2, [r3, #24]
  }
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	603b      	str	r3, [r7, #0]
 8005130:	4613      	mov	r3, r2
 8005132:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005134:	e03b      	b.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 f8d6 	bl	80052ec <I2C_IsErrorOccurred>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e041      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d02d      	beq.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005152:	f7fd fd73 	bl	8002c3c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d302      	bcc.n	8005168 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d122      	bne.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	429a      	cmp	r2, r3
 8005176:	bf0c      	ite	eq
 8005178:	2301      	moveq	r3, #1
 800517a:	2300      	movne	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	79fb      	ldrb	r3, [r7, #7]
 8005182:	429a      	cmp	r2, r3
 8005184:	d113      	bne.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2220      	movs	r2, #32
 8005196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00f      	b.n	80051ce <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699a      	ldr	r2, [r3, #24]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	4013      	ands	r3, r2
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	bf0c      	ite	eq
 80051be:	2301      	moveq	r3, #1
 80051c0:	2300      	movne	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d0b4      	beq.n	8005136 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	60f8      	str	r0, [r7, #12]
 80051de:	60b9      	str	r1, [r7, #8]
 80051e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051e2:	e033      	b.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f87f 	bl	80052ec <I2C_IsErrorOccurred>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e031      	b.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d025      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005200:	f7fd fd1c 	bl	8002c3c <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d11a      	bne.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0302 	and.w	r3, r3, #2
 8005220:	2b02      	cmp	r3, #2
 8005222:	d013      	beq.n	800524c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2220      	movs	r2, #32
 8005234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e007      	b.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d1c4      	bne.n	80051e4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005270:	e02f      	b.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f838 	bl	80052ec <I2C_IsErrorOccurred>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e02d      	b.n	80052e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005286:	f7fd fcd9 	bl	8002c3c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	d302      	bcc.n	800529c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d11a      	bne.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d013      	beq.n	80052d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	f043 0220 	orr.w	r2, r3, #32
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e007      	b.n	80052e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0320 	and.w	r3, r3, #32
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d1c8      	bne.n	8005272 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
	...

080052ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	@ 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005306:	2300      	movs	r3, #0
 8005308:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d068      	beq.n	80053ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2210      	movs	r2, #16
 800531e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005320:	e049      	b.n	80053b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d045      	beq.n	80053b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800532a:	f7fd fc87 	bl	8002c3c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	429a      	cmp	r2, r3
 8005338:	d302      	bcc.n	8005340 <I2C_IsErrorOccurred+0x54>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d13a      	bne.n	80053b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800534a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005352:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800535e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005362:	d121      	bne.n	80053a8 <I2C_IsErrorOccurred+0xbc>
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800536a:	d01d      	beq.n	80053a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800536c:	7cfb      	ldrb	r3, [r7, #19]
 800536e:	2b20      	cmp	r3, #32
 8005370:	d01a      	beq.n	80053a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005380:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005382:	f7fd fc5b 	bl	8002c3c <HAL_GetTick>
 8005386:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005388:	e00e      	b.n	80053a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800538a:	f7fd fc57 	bl	8002c3c <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b19      	cmp	r3, #25
 8005396:	d907      	bls.n	80053a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	f043 0320 	orr.w	r3, r3, #32
 800539e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80053a6:	e006      	b.n	80053b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d1e9      	bne.n	800538a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d003      	beq.n	80053cc <I2C_IsErrorOccurred+0xe0>
 80053c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0aa      	beq.n	8005322 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80053cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d103      	bne.n	80053dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2220      	movs	r2, #32
 80053da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f043 0304 	orr.w	r3, r3, #4
 80053e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00b      	beq.n	8005414 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	f043 0301 	orr.w	r3, r3, #1
 8005402:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800540c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00b      	beq.n	8005436 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f043 0308 	orr.w	r3, r3, #8
 8005424:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800542e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005440:	6a3b      	ldr	r3, [r7, #32]
 8005442:	f043 0302 	orr.w	r3, r3, #2
 8005446:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01c      	beq.n	800549a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f7ff fe3b 	bl	80050dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6859      	ldr	r1, [r3, #4]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	4b0d      	ldr	r3, [pc, #52]	@ (80054a8 <I2C_IsErrorOccurred+0x1bc>)
 8005472:	400b      	ands	r3, r1
 8005474:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	431a      	orrs	r2, r3
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800549a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3728      	adds	r7, #40	@ 0x28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	fe00e800 	.word	0xfe00e800

080054ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	607b      	str	r3, [r7, #4]
 80054b6:	460b      	mov	r3, r1
 80054b8:	817b      	strh	r3, [r7, #10]
 80054ba:	4613      	mov	r3, r2
 80054bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054c4:	7a7b      	ldrb	r3, [r7, #9]
 80054c6:	041b      	lsls	r3, r3, #16
 80054c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80054da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	0d5b      	lsrs	r3, r3, #21
 80054e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80054ea:	4b08      	ldr	r3, [pc, #32]	@ (800550c <I2C_TransferConfig+0x60>)
 80054ec:	430b      	orrs	r3, r1
 80054ee:	43db      	mvns	r3, r3
 80054f0:	ea02 0103 	and.w	r1, r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	03ff63ff 	.word	0x03ff63ff

08005510 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0bf      	b.n	80056a2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7fc fd92 	bl	8002060 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005552:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005568:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6899      	ldr	r1, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	4b4a      	ldr	r3, [pc, #296]	@ (80056ac <HAL_LTDC_Init+0x19c>)
 8005584:	400b      	ands	r3, r1
 8005586:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	041b      	lsls	r3, r3, #16
 800558e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6899      	ldr	r1, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68d9      	ldr	r1, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b3e      	ldr	r3, [pc, #248]	@ (80056ac <HAL_LTDC_Init+0x19c>)
 80055b2:	400b      	ands	r3, r1
 80055b4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69db      	ldr	r3, [r3, #28]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68d9      	ldr	r1, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6919      	ldr	r1, [r3, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	4b33      	ldr	r3, [pc, #204]	@ (80056ac <HAL_LTDC_Init+0x19c>)
 80055e0:	400b      	ands	r3, r1
 80055e2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	041b      	lsls	r3, r3, #16
 80055ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6919      	ldr	r1, [r3, #16]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6959      	ldr	r1, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	4b27      	ldr	r3, [pc, #156]	@ (80056ac <HAL_LTDC_Init+0x19c>)
 800560e:	400b      	ands	r3, r1
 8005610:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6959      	ldr	r1, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005640:	041b      	lsls	r3, r3, #16
 8005642:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005666:	431a      	orrs	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 0206 	orr.w	r2, r2, #6
 800567e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	f000f800 	.word	0xf000f800

080056b0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d023      	beq.n	800571a <HAL_LTDC_IRQHandler+0x6a>
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f003 0304 	and.w	r3, r3, #4
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01e      	beq.n	800571a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0204 	bic.w	r2, r2, #4
 80056ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2204      	movs	r2, #4
 80056f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80056fa:	f043 0201 	orr.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2204      	movs	r2, #4
 8005708:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f86f 	bl	80057f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d023      	beq.n	800576c <HAL_LTDC_IRQHandler+0xbc>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01e      	beq.n	800576c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0202 	bic.w	r2, r2, #2
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2202      	movs	r2, #2
 8005744:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800574c:	f043 0202 	orr.w	r2, r3, #2
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2204      	movs	r2, #4
 800575a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f846 	bl	80057f8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d01b      	beq.n	80057ae <HAL_LTDC_IRQHandler+0xfe>
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	d016      	beq.n	80057ae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f022 0201 	bic.w	r2, r2, #1
 800578e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2201      	movs	r2, #1
 8005796:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f82f 	bl	800580c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_LTDC_IRQHandler+0x140>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0208 	bic.w	r2, r2, #8
 80057d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2208      	movs	r2, #8
 80057d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f818 	bl	8005820 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005834:	b5b0      	push	{r4, r5, r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_LTDC_ConfigLayer+0x1a>
 800584a:	2302      	movs	r3, #2
 800584c:	e02c      	b.n	80058a8 <HAL_LTDC_ConfigLayer+0x74>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2202      	movs	r2, #2
 800585a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2134      	movs	r1, #52	@ 0x34
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	4413      	add	r3, r2
 800586a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4614      	mov	r4, r2
 8005872:	461d      	mov	r5, r3
 8005874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800587c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800587e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 f81f 	bl	80058cc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2201      	movs	r2, #1
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bdb0      	pop	{r4, r5, r7, pc}

080058b0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80058be:	b2db      	uxtb	r3, r3
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b089      	sub	sp, #36	@ 0x24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e8:	4413      	add	r3, r2
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	01db      	lsls	r3, r3, #7
 80058f8:	4413      	add	r3, r2
 80058fa:	3384      	adds	r3, #132	@ 0x84
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	4611      	mov	r1, r2
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	01d2      	lsls	r2, r2, #7
 8005908:	440a      	add	r2, r1
 800590a:	3284      	adds	r2, #132	@ 0x84
 800590c:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005910:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	0c1b      	lsrs	r3, r3, #16
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005922:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005924:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	440b      	add	r3, r1
 8005932:	3384      	adds	r3, #132	@ 0x84
 8005934:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800593a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800594a:	4413      	add	r3, r2
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	01db      	lsls	r3, r3, #7
 800595a:	4413      	add	r3, r2
 800595c:	3384      	adds	r3, #132	@ 0x84
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	4611      	mov	r1, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	01d2      	lsls	r2, r2, #7
 800596a:	440a      	add	r2, r1
 800596c:	3284      	adds	r2, #132	@ 0x84
 800596e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005972:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005982:	4413      	add	r3, r2
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4619      	mov	r1, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	01db      	lsls	r3, r3, #7
 8005990:	440b      	add	r3, r1
 8005992:	3384      	adds	r3, #132	@ 0x84
 8005994:	4619      	mov	r1, r3
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4313      	orrs	r3, r2
 800599a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	461a      	mov	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	01db      	lsls	r3, r3, #7
 80059a6:	4413      	add	r3, r2
 80059a8:	3384      	adds	r3, #132	@ 0x84
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	4611      	mov	r1, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	01d2      	lsls	r2, r2, #7
 80059b6:	440a      	add	r2, r1
 80059b8:	3284      	adds	r2, #132	@ 0x84
 80059ba:	f023 0307 	bic.w	r3, r3, #7
 80059be:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	01db      	lsls	r3, r3, #7
 80059ca:	4413      	add	r3, r2
 80059cc:	3384      	adds	r3, #132	@ 0x84
 80059ce:	461a      	mov	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059dc:	021b      	lsls	r3, r3, #8
 80059de:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	01db      	lsls	r3, r3, #7
 80059fc:	4413      	add	r3, r2
 80059fe:	3384      	adds	r3, #132	@ 0x84
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	01db      	lsls	r3, r3, #7
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3384      	adds	r3, #132	@ 0x84
 8005a10:	461a      	mov	r2, r3
 8005a12:	2300      	movs	r3, #0
 8005a14:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	431a      	orrs	r2, r3
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	01db      	lsls	r3, r3, #7
 8005a30:	440b      	add	r3, r1
 8005a32:	3384      	adds	r3, #132	@ 0x84
 8005a34:	4619      	mov	r1, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	01db      	lsls	r3, r3, #7
 8005a46:	4413      	add	r3, r2
 8005a48:	3384      	adds	r3, #132	@ 0x84
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	6812      	ldr	r2, [r2, #0]
 8005a50:	4611      	mov	r1, r2
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	01d2      	lsls	r2, r2, #7
 8005a56:	440a      	add	r2, r1
 8005a58:	3284      	adds	r2, #132	@ 0x84
 8005a5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a5e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	01db      	lsls	r3, r3, #7
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3384      	adds	r3, #132	@ 0x84
 8005a6e:	461a      	mov	r2, r3
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	01db      	lsls	r3, r3, #7
 8005a80:	4413      	add	r3, r2
 8005a82:	3384      	adds	r3, #132	@ 0x84
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	440b      	add	r3, r1
 8005a92:	3384      	adds	r3, #132	@ 0x84
 8005a94:	4619      	mov	r1, r3
 8005a96:	4b58      	ldr	r3, [pc, #352]	@ (8005bf8 <LTDC_SetConfig+0x32c>)
 8005a98:	4013      	ands	r3, r2
 8005a9a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	69da      	ldr	r2, [r3, #28]
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	68f9      	ldr	r1, [r7, #12]
 8005aa6:	6809      	ldr	r1, [r1, #0]
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	01c9      	lsls	r1, r1, #7
 8005aae:	4401      	add	r1, r0
 8005ab0:	3184      	adds	r1, #132	@ 0x84
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	01db      	lsls	r3, r3, #7
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3384      	adds	r3, #132	@ 0x84
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	@ 0x84
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	01db      	lsls	r3, r3, #7
 8005ae4:	4413      	add	r3, r2
 8005ae6:	3384      	adds	r3, #132	@ 0x84
 8005ae8:	461a      	mov	r2, r3
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005af8:	2304      	movs	r3, #4
 8005afa:	61fb      	str	r3, [r7, #28]
 8005afc:	e01b      	b.n	8005b36 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d102      	bne.n	8005b0c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005b06:	2303      	movs	r3, #3
 8005b08:	61fb      	str	r3, [r7, #28]
 8005b0a:	e014      	b.n	8005b36 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d00b      	beq.n	8005b2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d007      	beq.n	8005b2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d003      	beq.n	8005b2c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005b28:	2b07      	cmp	r3, #7
 8005b2a:	d102      	bne.n	8005b32 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	e001      	b.n	8005b36 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	01db      	lsls	r3, r3, #7
 8005b40:	4413      	add	r3, r2
 8005b42:	3384      	adds	r3, #132	@ 0x84
 8005b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	01d2      	lsls	r2, r2, #7
 8005b50:	440a      	add	r2, r1
 8005b52:	3284      	adds	r2, #132	@ 0x84
 8005b54:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b58:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	fb02 f303 	mul.w	r3, r2, r3
 8005b64:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6859      	ldr	r1, [r3, #4]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	1acb      	subs	r3, r1, r3
 8005b70:	69f9      	ldr	r1, [r7, #28]
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b78:	68f9      	ldr	r1, [r7, #12]
 8005b7a:	6809      	ldr	r1, [r1, #0]
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	01c9      	lsls	r1, r1, #7
 8005b82:	4401      	add	r1, r0
 8005b84:	3184      	adds	r1, #132	@ 0x84
 8005b86:	4313      	orrs	r3, r2
 8005b88:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	01db      	lsls	r3, r3, #7
 8005b94:	4413      	add	r3, r2
 8005b96:	3384      	adds	r3, #132	@ 0x84
 8005b98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	01db      	lsls	r3, r3, #7
 8005ba4:	440b      	add	r3, r1
 8005ba6:	3384      	adds	r3, #132	@ 0x84
 8005ba8:	4619      	mov	r1, r3
 8005baa:	4b14      	ldr	r3, [pc, #80]	@ (8005bfc <LTDC_SetConfig+0x330>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	01db      	lsls	r3, r3, #7
 8005bba:	4413      	add	r3, r2
 8005bbc:	3384      	adds	r3, #132	@ 0x84
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	01db      	lsls	r3, r3, #7
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3384      	adds	r3, #132	@ 0x84
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	6812      	ldr	r2, [r2, #0]
 8005bda:	4611      	mov	r1, r2
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	01d2      	lsls	r2, r2, #7
 8005be0:	440a      	add	r2, r1
 8005be2:	3284      	adds	r2, #132	@ 0x84
 8005be4:	f043 0301 	orr.w	r3, r3, #1
 8005be8:	6013      	str	r3, [r2, #0]
}
 8005bea:	bf00      	nop
 8005bec:	3724      	adds	r7, #36	@ 0x24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	fffff8f8 	.word	0xfffff8f8
 8005bfc:	fffff800 	.word	0xfffff800

08005c00 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c04:	4b05      	ldr	r3, [pc, #20]	@ (8005c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a04      	ldr	r2, [pc, #16]	@ (8005c1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c0e:	6013      	str	r3, [r2, #0]
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40007000 	.word	0x40007000

08005c20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005c26:	2300      	movs	r3, #0
 8005c28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005c2a:	4b23      	ldr	r3, [pc, #140]	@ (8005cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	4a22      	ldr	r2, [pc, #136]	@ (8005cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c36:	4b20      	ldr	r3, [pc, #128]	@ (8005cb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005c42:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c4e:	f7fc fff5 	bl	8002c3c <HAL_GetTick>
 8005c52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c54:	e009      	b.n	8005c6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c56:	f7fc fff1 	bl	8002c3c <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c64:	d901      	bls.n	8005c6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e022      	b.n	8005cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005c6a:	4b14      	ldr	r3, [pc, #80]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c76:	d1ee      	bne.n	8005c56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c78:	4b10      	ldr	r3, [pc, #64]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a0f      	ldr	r2, [pc, #60]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c84:	f7fc ffda 	bl	8002c3c <HAL_GetTick>
 8005c88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c8a:	e009      	b.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c8c:	f7fc ffd6 	bl	8002c3c <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c9a:	d901      	bls.n	8005ca0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e007      	b.n	8005cb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005cac:	d1ee      	bne.n	8005c8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40023800 	.word	0x40023800
 8005cbc:	40007000 	.word	0x40007000

08005cc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d101      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e291      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 8087 	beq.w	8005df2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ce4:	4b96      	ldr	r3, [pc, #600]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 030c 	and.w	r3, r3, #12
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d00c      	beq.n	8005d0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf0:	4b93      	ldr	r3, [pc, #588]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 030c 	and.w	r3, r3, #12
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d112      	bne.n	8005d22 <HAL_RCC_OscConfig+0x62>
 8005cfc:	4b90      	ldr	r3, [pc, #576]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d08:	d10b      	bne.n	8005d22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d06c      	beq.n	8005df0 <HAL_RCC_OscConfig+0x130>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d168      	bne.n	8005df0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e26b      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d2a:	d106      	bne.n	8005d3a <HAL_RCC_OscConfig+0x7a>
 8005d2c:	4b84      	ldr	r3, [pc, #528]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a83      	ldr	r2, [pc, #524]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	e02e      	b.n	8005d98 <HAL_RCC_OscConfig+0xd8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10c      	bne.n	8005d5c <HAL_RCC_OscConfig+0x9c>
 8005d42:	4b7f      	ldr	r3, [pc, #508]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a7e      	ldr	r2, [pc, #504]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a7b      	ldr	r2, [pc, #492]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e01d      	b.n	8005d98 <HAL_RCC_OscConfig+0xd8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d64:	d10c      	bne.n	8005d80 <HAL_RCC_OscConfig+0xc0>
 8005d66:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b73      	ldr	r3, [pc, #460]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a72      	ldr	r2, [pc, #456]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e00b      	b.n	8005d98 <HAL_RCC_OscConfig+0xd8>
 8005d80:	4b6f      	ldr	r3, [pc, #444]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a6e      	ldr	r2, [pc, #440]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b6c      	ldr	r3, [pc, #432]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a6b      	ldr	r2, [pc, #428]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fc ff4c 	bl	8002c3c <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fc ff48 	bl	8002c3c <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	@ 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e21f      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dba:	4b61      	ldr	r3, [pc, #388]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0xe8>
 8005dc6:	e014      	b.n	8005df2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fc ff38 	bl	8002c3c <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dd0:	f7fc ff34 	bl	8002c3c <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b64      	cmp	r3, #100	@ 0x64
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e20b      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de2:	4b57      	ldr	r3, [pc, #348]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x110>
 8005dee:	e000      	b.n	8005df2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d069      	beq.n	8005ed2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dfe:	4b50      	ldr	r3, [pc, #320]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 030c 	and.w	r3, r3, #12
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d11c      	bne.n	8005e50 <HAL_RCC_OscConfig+0x190>
 8005e16:	4b4a      	ldr	r3, [pc, #296]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d116      	bne.n	8005e50 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e22:	4b47      	ldr	r3, [pc, #284]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0302 	and.w	r3, r3, #2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_RCC_OscConfig+0x17a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d001      	beq.n	8005e3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e1df      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e3a:	4b41      	ldr	r3, [pc, #260]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	493d      	ldr	r1, [pc, #244]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4e:	e040      	b.n	8005ed2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d023      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e58:	4b39      	ldr	r3, [pc, #228]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a38      	ldr	r2, [pc, #224]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e64:	f7fc feea 	bl	8002c3c <HAL_GetTick>
 8005e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6a:	e008      	b.n	8005e7e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e6c:	f7fc fee6 	bl	8002c3c <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e1bd      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7e:	4b30      	ldr	r3, [pc, #192]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d0f0      	beq.n	8005e6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4929      	ldr	r1, [pc, #164]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]
 8005e9e:	e018      	b.n	8005ed2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ea0:	4b27      	ldr	r3, [pc, #156]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a26      	ldr	r2, [pc, #152]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eac:	f7fc fec6 	bl	8002c3c <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005eb4:	f7fc fec2 	bl	8002c3c <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e199      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1f0      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0308 	and.w	r3, r3, #8
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d038      	beq.n	8005f50 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d019      	beq.n	8005f1a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ee6:	4b16      	ldr	r3, [pc, #88]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005eea:	4a15      	ldr	r2, [pc, #84]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fc fea3 	bl	8002c3c <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef8:	e008      	b.n	8005f0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005efa:	f7fc fe9f 	bl	8002c3c <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e176      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0f0      	beq.n	8005efa <HAL_RCC_OscConfig+0x23a>
 8005f18:	e01a      	b.n	8005f50 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f1a:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	4a08      	ldr	r2, [pc, #32]	@ (8005f40 <HAL_RCC_OscConfig+0x280>)
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f26:	f7fc fe89 	bl	8002c3c <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f2c:	e00a      	b.n	8005f44 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7fc fe85 	bl	8002c3c <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d903      	bls.n	8005f44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e15c      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
 8005f40:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f44:	4b91      	ldr	r3, [pc, #580]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1ee      	bne.n	8005f2e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80a4 	beq.w	80060a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10d      	bne.n	8005f86 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f6a:	4b88      	ldr	r3, [pc, #544]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	4a87      	ldr	r2, [pc, #540]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f76:	4b85      	ldr	r3, [pc, #532]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f7e:	60bb      	str	r3, [r7, #8]
 8005f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f82:	2301      	movs	r3, #1
 8005f84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f86:	4b82      	ldr	r3, [pc, #520]	@ (8006190 <HAL_RCC_OscConfig+0x4d0>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d118      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005f92:	4b7f      	ldr	r3, [pc, #508]	@ (8006190 <HAL_RCC_OscConfig+0x4d0>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a7e      	ldr	r2, [pc, #504]	@ (8006190 <HAL_RCC_OscConfig+0x4d0>)
 8005f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f9e:	f7fc fe4d 	bl	8002c3c <HAL_GetTick>
 8005fa2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fa4:	e008      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fa6:	f7fc fe49 	bl	8002c3c <HAL_GetTick>
 8005faa:	4602      	mov	r2, r0
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	1ad3      	subs	r3, r2, r3
 8005fb0:	2b64      	cmp	r3, #100	@ 0x64
 8005fb2:	d901      	bls.n	8005fb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e120      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fb8:	4b75      	ldr	r3, [pc, #468]	@ (8006190 <HAL_RCC_OscConfig+0x4d0>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0f0      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d106      	bne.n	8005fda <HAL_RCC_OscConfig+0x31a>
 8005fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005fd2:	f043 0301 	orr.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd8:	e02d      	b.n	8006036 <HAL_RCC_OscConfig+0x376>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x33c>
 8005fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe6:	4a69      	ldr	r2, [pc, #420]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005fe8:	f023 0301 	bic.w	r3, r3, #1
 8005fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fee:	4b67      	ldr	r3, [pc, #412]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff2:	4a66      	ldr	r2, [pc, #408]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8005ff4:	f023 0304 	bic.w	r3, r3, #4
 8005ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ffa:	e01c      	b.n	8006036 <HAL_RCC_OscConfig+0x376>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	2b05      	cmp	r3, #5
 8006002:	d10c      	bne.n	800601e <HAL_RCC_OscConfig+0x35e>
 8006004:	4b61      	ldr	r3, [pc, #388]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006008:	4a60      	ldr	r2, [pc, #384]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800600a:	f043 0304 	orr.w	r3, r3, #4
 800600e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006010:	4b5e      	ldr	r3, [pc, #376]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	4a5d      	ldr	r2, [pc, #372]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	6713      	str	r3, [r2, #112]	@ 0x70
 800601c:	e00b      	b.n	8006036 <HAL_RCC_OscConfig+0x376>
 800601e:	4b5b      	ldr	r3, [pc, #364]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006022:	4a5a      	ldr	r2, [pc, #360]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	6713      	str	r3, [r2, #112]	@ 0x70
 800602a:	4b58      	ldr	r3, [pc, #352]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602e:	4a57      	ldr	r2, [pc, #348]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006030:	f023 0304 	bic.w	r3, r3, #4
 8006034:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d015      	beq.n	800606a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800603e:	f7fc fdfd 	bl	8002c3c <HAL_GetTick>
 8006042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006044:	e00a      	b.n	800605c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006046:	f7fc fdf9 	bl	8002c3c <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e0ce      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800605c:	4b4b      	ldr	r3, [pc, #300]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800605e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0ee      	beq.n	8006046 <HAL_RCC_OscConfig+0x386>
 8006068:	e014      	b.n	8006094 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800606a:	f7fc fde7 	bl	8002c3c <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006072:	f7fc fde3 	bl	8002c3c <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006080:	4293      	cmp	r3, r2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e0b8      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006088:	4b40      	ldr	r3, [pc, #256]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800608a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ee      	bne.n	8006072 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800609a:	4b3c      	ldr	r3, [pc, #240]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	4a3b      	ldr	r2, [pc, #236]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 80060a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a4 	beq.w	80061f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060b0:	4b36      	ldr	r3, [pc, #216]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 030c 	and.w	r3, r3, #12
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d06b      	beq.n	8006194 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d149      	bne.n	8006158 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c4:	4b31      	ldr	r3, [pc, #196]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a30      	ldr	r2, [pc, #192]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 80060ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fc fdb4 	bl	8002c3c <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fc fdb0 	bl	8002c3c <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e087      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ea:	4b28      	ldr	r3, [pc, #160]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f0      	bne.n	80060d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69da      	ldr	r2, [r3, #28]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	019b      	lsls	r3, r3, #6
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	3b01      	subs	r3, #1
 8006110:	041b      	lsls	r3, r3, #16
 8006112:	431a      	orrs	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006118:	061b      	lsls	r3, r3, #24
 800611a:	4313      	orrs	r3, r2
 800611c:	4a1b      	ldr	r2, [pc, #108]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800611e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006122:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006124:	4b19      	ldr	r3, [pc, #100]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a18      	ldr	r2, [pc, #96]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800612a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800612e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006130:	f7fc fd84 	bl	8002c3c <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006138:	f7fc fd80 	bl	8002c3c <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e057      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800614a:	4b10      	ldr	r3, [pc, #64]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0f0      	beq.n	8006138 <HAL_RCC_OscConfig+0x478>
 8006156:	e04f      	b.n	80061f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a0b      	ldr	r2, [pc, #44]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 800615e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7fc fd6a 	bl	8002c3c <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800616c:	f7fc fd66 	bl	8002c3c <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e03d      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800617e:	4b03      	ldr	r3, [pc, #12]	@ (800618c <HAL_RCC_OscConfig+0x4cc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1f0      	bne.n	800616c <HAL_RCC_OscConfig+0x4ac>
 800618a:	e035      	b.n	80061f8 <HAL_RCC_OscConfig+0x538>
 800618c:	40023800 	.word	0x40023800
 8006190:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <HAL_RCC_OscConfig+0x544>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d028      	beq.n	80061f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d121      	bne.n	80061f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d11a      	bne.n	80061f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061c4:	4013      	ands	r3, r2
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d111      	bne.n	80061f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061da:	085b      	lsrs	r3, r3, #1
 80061dc:	3b01      	subs	r3, #1
 80061de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d001      	beq.n	80061f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	40023800 	.word	0x40023800

08006208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0d0      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006220:	4b6a      	ldr	r3, [pc, #424]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d910      	bls.n	8006250 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b67      	ldr	r3, [pc, #412]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 020f 	bic.w	r2, r3, #15
 8006236:	4965      	ldr	r1, [pc, #404]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	4313      	orrs	r3, r2
 800623c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623e:	4b63      	ldr	r3, [pc, #396]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	683a      	ldr	r2, [r7, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d001      	beq.n	8006250 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e0b8      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d020      	beq.n	800629e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006268:	4b59      	ldr	r3, [pc, #356]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	4a58      	ldr	r2, [pc, #352]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800626e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006272:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 0308 	and.w	r3, r3, #8
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006280:	4b53      	ldr	r3, [pc, #332]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	4a52      	ldr	r2, [pc, #328]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006286:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800628a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800628c:	4b50      	ldr	r3, [pc, #320]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	494d      	ldr	r1, [pc, #308]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800629a:	4313      	orrs	r3, r2
 800629c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d040      	beq.n	800632c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b2:	4b47      	ldr	r3, [pc, #284]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d115      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e07f      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d107      	bne.n	80062da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ca:	4b41      	ldr	r3, [pc, #260]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e073      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062da:	4b3d      	ldr	r3, [pc, #244]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0302 	and.w	r3, r3, #2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d101      	bne.n	80062ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	e06b      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	4936      	ldr	r1, [pc, #216]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fc:	f7fc fc9e 	bl	8002c3c <HAL_GetTick>
 8006300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	e00a      	b.n	800631a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006304:	f7fc fc9a 	bl	8002c3c <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006312:	4293      	cmp	r3, r2
 8006314:	d901      	bls.n	800631a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e053      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800631a:	4b2d      	ldr	r3, [pc, #180]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 020c 	and.w	r2, r3, #12
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	429a      	cmp	r2, r3
 800632a:	d1eb      	bne.n	8006304 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800632c:	4b27      	ldr	r3, [pc, #156]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 030f 	and.w	r3, r3, #15
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d210      	bcs.n	800635c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633a:	4b24      	ldr	r3, [pc, #144]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f023 020f 	bic.w	r2, r3, #15
 8006342:	4922      	ldr	r1, [pc, #136]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	4313      	orrs	r3, r2
 8006348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b20      	ldr	r3, [pc, #128]	@ (80063cc <HAL_RCC_ClockConfig+0x1c4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 030f 	and.w	r3, r3, #15
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e032      	b.n	80063c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0304 	and.w	r3, r3, #4
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006368:	4b19      	ldr	r3, [pc, #100]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	4916      	ldr	r1, [pc, #88]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0308 	and.w	r3, r3, #8
 8006382:	2b00      	cmp	r3, #0
 8006384:	d009      	beq.n	800639a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006386:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	00db      	lsls	r3, r3, #3
 8006394:	490e      	ldr	r1, [pc, #56]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800639a:	f000 f821 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b0b      	ldr	r3, [pc, #44]	@ (80063d0 <HAL_RCC_ClockConfig+0x1c8>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	490a      	ldr	r1, [pc, #40]	@ (80063d4 <HAL_RCC_ClockConfig+0x1cc>)
 80063ac:	5ccb      	ldrb	r3, [r1, r3]
 80063ae:	fa22 f303 	lsr.w	r3, r2, r3
 80063b2:	4a09      	ldr	r2, [pc, #36]	@ (80063d8 <HAL_RCC_ClockConfig+0x1d0>)
 80063b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063b6:	4b09      	ldr	r3, [pc, #36]	@ (80063dc <HAL_RCC_ClockConfig+0x1d4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fc fbfa 	bl	8002bb4 <HAL_InitTick>

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40023c00 	.word	0x40023c00
 80063d0:	40023800 	.word	0x40023800
 80063d4:	0800f208 	.word	0x0800f208
 80063d8:	20000010 	.word	0x20000010
 80063dc:	20000014 	.word	0x20000014

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e4:	b090      	sub	sp, #64	@ 0x40
 80063e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80063ec:	2300      	movs	r3, #0
 80063ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063f0:	2300      	movs	r3, #0
 80063f2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80063f4:	2300      	movs	r3, #0
 80063f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063f8:	4b59      	ldr	r3, [pc, #356]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b08      	cmp	r3, #8
 8006402:	d00d      	beq.n	8006420 <HAL_RCC_GetSysClockFreq+0x40>
 8006404:	2b08      	cmp	r3, #8
 8006406:	f200 80a1 	bhi.w	800654c <HAL_RCC_GetSysClockFreq+0x16c>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <HAL_RCC_GetSysClockFreq+0x34>
 800640e:	2b04      	cmp	r3, #4
 8006410:	d003      	beq.n	800641a <HAL_RCC_GetSysClockFreq+0x3a>
 8006412:	e09b      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006414:	4b53      	ldr	r3, [pc, #332]	@ (8006564 <HAL_RCC_GetSysClockFreq+0x184>)
 8006416:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006418:	e09b      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800641a:	4b53      	ldr	r3, [pc, #332]	@ (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800641c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800641e:	e098      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006420:	4b4f      	ldr	r3, [pc, #316]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800642a:	4b4d      	ldr	r3, [pc, #308]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d028      	beq.n	8006488 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006436:	4b4a      	ldr	r3, [pc, #296]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	099b      	lsrs	r3, r3, #6
 800643c:	2200      	movs	r2, #0
 800643e:	623b      	str	r3, [r7, #32]
 8006440:	627a      	str	r2, [r7, #36]	@ 0x24
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006448:	2100      	movs	r1, #0
 800644a:	4b47      	ldr	r3, [pc, #284]	@ (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800644c:	fb03 f201 	mul.w	r2, r3, r1
 8006450:	2300      	movs	r3, #0
 8006452:	fb00 f303 	mul.w	r3, r0, r3
 8006456:	4413      	add	r3, r2
 8006458:	4a43      	ldr	r2, [pc, #268]	@ (8006568 <HAL_RCC_GetSysClockFreq+0x188>)
 800645a:	fba0 1202 	umull	r1, r2, r0, r2
 800645e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006460:	460a      	mov	r2, r1
 8006462:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006466:	4413      	add	r3, r2
 8006468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800646a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800646c:	2200      	movs	r2, #0
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006476:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800647a:	f7fa fc25 	bl	8000cc8 <__aeabi_uldivmod>
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4613      	mov	r3, r2
 8006484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006486:	e053      	b.n	8006530 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006488:	4b35      	ldr	r3, [pc, #212]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	2200      	movs	r2, #0
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	617a      	str	r2, [r7, #20]
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800649a:	f04f 0b00 	mov.w	fp, #0
 800649e:	4652      	mov	r2, sl
 80064a0:	465b      	mov	r3, fp
 80064a2:	f04f 0000 	mov.w	r0, #0
 80064a6:	f04f 0100 	mov.w	r1, #0
 80064aa:	0159      	lsls	r1, r3, #5
 80064ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b0:	0150      	lsls	r0, r2, #5
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	ebb2 080a 	subs.w	r8, r2, sl
 80064ba:	eb63 090b 	sbc.w	r9, r3, fp
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	f04f 0300 	mov.w	r3, #0
 80064c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80064ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80064ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80064d2:	ebb2 0408 	subs.w	r4, r2, r8
 80064d6:	eb63 0509 	sbc.w	r5, r3, r9
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 0300 	mov.w	r3, #0
 80064e2:	00eb      	lsls	r3, r5, #3
 80064e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064e8:	00e2      	lsls	r2, r4, #3
 80064ea:	4614      	mov	r4, r2
 80064ec:	461d      	mov	r5, r3
 80064ee:	eb14 030a 	adds.w	r3, r4, sl
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	eb45 030b 	adc.w	r3, r5, fp
 80064f8:	607b      	str	r3, [r7, #4]
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006506:	4629      	mov	r1, r5
 8006508:	028b      	lsls	r3, r1, #10
 800650a:	4621      	mov	r1, r4
 800650c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006510:	4621      	mov	r1, r4
 8006512:	028a      	lsls	r2, r1, #10
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651a:	2200      	movs	r2, #0
 800651c:	60bb      	str	r3, [r7, #8]
 800651e:	60fa      	str	r2, [r7, #12]
 8006520:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006524:	f7fa fbd0 	bl	8000cc8 <__aeabi_uldivmod>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4613      	mov	r3, r2
 800652e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006530:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <HAL_RCC_GetSysClockFreq+0x180>)
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	0c1b      	lsrs	r3, r3, #16
 8006536:	f003 0303 	and.w	r3, r3, #3
 800653a:	3301      	adds	r3, #1
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006540:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800654a:	e002      	b.n	8006552 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800654c:	4b05      	ldr	r3, [pc, #20]	@ (8006564 <HAL_RCC_GetSysClockFreq+0x184>)
 800654e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006554:	4618      	mov	r0, r3
 8006556:	3740      	adds	r7, #64	@ 0x40
 8006558:	46bd      	mov	sp, r7
 800655a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655e:	bf00      	nop
 8006560:	40023800 	.word	0x40023800
 8006564:	00f42400 	.word	0x00f42400
 8006568:	017d7840 	.word	0x017d7840

0800656c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006570:	4b03      	ldr	r3, [pc, #12]	@ (8006580 <HAL_RCC_GetHCLKFreq+0x14>)
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20000010 	.word	0x20000010

08006584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006588:	f7ff fff0 	bl	800656c <HAL_RCC_GetHCLKFreq>
 800658c:	4602      	mov	r2, r0
 800658e:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	0a9b      	lsrs	r3, r3, #10
 8006594:	f003 0307 	and.w	r3, r3, #7
 8006598:	4903      	ldr	r1, [pc, #12]	@ (80065a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800659a:	5ccb      	ldrb	r3, [r1, r3]
 800659c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40023800 	.word	0x40023800
 80065a8:	0800f218 	.word	0x0800f218

080065ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065b0:	f7ff ffdc 	bl	800656c <HAL_RCC_GetHCLKFreq>
 80065b4:	4602      	mov	r2, r0
 80065b6:	4b05      	ldr	r3, [pc, #20]	@ (80065cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	0b5b      	lsrs	r3, r3, #13
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	4903      	ldr	r1, [pc, #12]	@ (80065d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065c2:	5ccb      	ldrb	r3, [r1, r3]
 80065c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	40023800 	.word	0x40023800
 80065d0:	0800f218 	.word	0x0800f218

080065d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80065e4:	2300      	movs	r3, #0
 80065e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d012      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065fc:	4b69      	ldr	r3, [pc, #420]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4a68      	ldr	r2, [pc, #416]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006602:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006606:	6093      	str	r3, [r2, #8]
 8006608:	4b66      	ldr	r3, [pc, #408]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006610:	4964      	ldr	r1, [pc, #400]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	4313      	orrs	r3, r2
 8006614:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800661e:	2301      	movs	r3, #1
 8006620:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d017      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800662e:	4b5d      	ldr	r3, [pc, #372]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006634:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663c:	4959      	ldr	r1, [pc, #356]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800664c:	d101      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800664e:	2301      	movs	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800665a:	2301      	movs	r3, #1
 800665c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d017      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800666a:	4b4e      	ldr	r3, [pc, #312]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800666c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006670:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	494a      	ldr	r1, [pc, #296]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006688:	d101      	bne.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006696:	2301      	movs	r3, #1
 8006698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80066a6:	2301      	movs	r3, #1
 80066a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 808b 	beq.w	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066b8:	4b3a      	ldr	r3, [pc, #232]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066bc:	4a39      	ldr	r2, [pc, #228]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80066c4:	4b37      	ldr	r3, [pc, #220]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066cc:	60bb      	str	r3, [r7, #8]
 80066ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066d0:	4b35      	ldr	r3, [pc, #212]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a34      	ldr	r2, [pc, #208]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066dc:	f7fc faae 	bl	8002c3c <HAL_GetTick>
 80066e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066e2:	e008      	b.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066e4:	f7fc faaa 	bl	8002c3c <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	@ 0x64
 80066f0:	d901      	bls.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e357      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80066f6:	4b2c      	ldr	r3, [pc, #176]	@ (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0f0      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006702:	4b28      	ldr	r3, [pc, #160]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d035      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	429a      	cmp	r2, r3
 800671e:	d02e      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006720:	4b20      	ldr	r3, [pc, #128]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006728:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800672a:	4b1e      	ldr	r3, [pc, #120]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800672c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672e:	4a1d      	ldr	r2, [pc, #116]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006734:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006736:	4b1b      	ldr	r3, [pc, #108]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	4a1a      	ldr	r2, [pc, #104]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800673c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006740:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006742:	4a18      	ldr	r2, [pc, #96]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006748:	4b16      	ldr	r3, [pc, #88]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d114      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fc fa72 	bl	8002c3c <HAL_GetTick>
 8006758:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800675a:	e00a      	b.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800675c:	f7fc fa6e 	bl	8002c3c <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800676a:	4293      	cmp	r3, r2
 800676c:	d901      	bls.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e319      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0ee      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800678a:	d111      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800678c:	4b05      	ldr	r3, [pc, #20]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006798:	4b04      	ldr	r3, [pc, #16]	@ (80067ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800679a:	400b      	ands	r3, r1
 800679c:	4901      	ldr	r1, [pc, #4]	@ (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	608b      	str	r3, [r1, #8]
 80067a2:	e00b      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000
 80067ac:	0ffffcff 	.word	0x0ffffcff
 80067b0:	4baa      	ldr	r3, [pc, #680]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4aa9      	ldr	r2, [pc, #676]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80067ba:	6093      	str	r3, [r2, #8]
 80067bc:	4ba7      	ldr	r3, [pc, #668]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c8:	49a4      	ldr	r1, [pc, #656]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80067da:	4ba0      	ldr	r3, [pc, #640]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80067e0:	4a9e      	ldr	r2, [pc, #632]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80067ea:	4b9c      	ldr	r3, [pc, #624]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f4:	4999      	ldr	r1, [pc, #612]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00a      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006808:	4b94      	ldr	r3, [pc, #592]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800680a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006816:	4991      	ldr	r1, [pc, #580]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800682a:	4b8c      	ldr	r3, [pc, #560]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800682c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006830:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006838:	4988      	ldr	r1, [pc, #544]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800684c:	4b83      	ldr	r3, [pc, #524]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800684e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800685a:	4980      	ldr	r1, [pc, #512]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800685c:	4313      	orrs	r3, r2
 800685e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800686e:	4b7b      	ldr	r3, [pc, #492]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006874:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4977      	ldr	r1, [pc, #476]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800687e:	4313      	orrs	r3, r2
 8006880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006890:	4b72      	ldr	r3, [pc, #456]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006896:	f023 0203 	bic.w	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	496f      	ldr	r1, [pc, #444]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068b2:	4b6a      	ldr	r3, [pc, #424]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	f023 020c 	bic.w	r2, r3, #12
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068c0:	4966      	ldr	r1, [pc, #408]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068d4:	4b61      	ldr	r3, [pc, #388]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e2:	495e      	ldr	r1, [pc, #376]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80068f6:	4b59      	ldr	r3, [pc, #356]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80068f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006904:	4955      	ldr	r1, [pc, #340]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006918:	4b50      	ldr	r3, [pc, #320]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800691a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800691e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006926:	494d      	ldr	r1, [pc, #308]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006928:	4313      	orrs	r3, r2
 800692a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800693a:	4b48      	ldr	r3, [pc, #288]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800693c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006948:	4944      	ldr	r1, [pc, #272]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800694a:	4313      	orrs	r3, r2
 800694c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800695c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800695e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696a:	493c      	ldr	r1, [pc, #240]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800696c:	4313      	orrs	r3, r2
 800696e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800697e:	4b37      	ldr	r3, [pc, #220]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800698c:	4933      	ldr	r1, [pc, #204]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800698e:	4313      	orrs	r3, r2
 8006990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069a0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069ae:	492b      	ldr	r1, [pc, #172]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d011      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80069c2:	4b26      	ldr	r3, [pc, #152]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069d0:	4922      	ldr	r1, [pc, #136]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80069dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80069e0:	d101      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80069e2:	2301      	movs	r3, #1
 80069e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0308 	and.w	r3, r3, #8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80069f2:	2301      	movs	r3, #1
 80069f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a02:	4b16      	ldr	r3, [pc, #88]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a10:	4912      	ldr	r1, [pc, #72]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00b      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006a24:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a34:	4909      	ldr	r1, [pc, #36]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d006      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 80d9 	beq.w	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a50:	4b02      	ldr	r3, [pc, #8]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a01      	ldr	r2, [pc, #4]	@ (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a5a:	e001      	b.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006a5c:	40023800 	.word	0x40023800
 8006a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a62:	f7fc f8eb 	bl	8002c3c <HAL_GetTick>
 8006a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a68:	e008      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006a6a:	f7fc f8e7 	bl	8002c3c <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	2b64      	cmp	r3, #100	@ 0x64
 8006a76:	d901      	bls.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e194      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1f0      	bne.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d021      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d11d      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a9c:	4b64      	ldr	r3, [pc, #400]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006aaa:	4b61      	ldr	r3, [pc, #388]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ab0:	0e1b      	lsrs	r3, r3, #24
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	019a      	lsls	r2, r3, #6
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	041b      	lsls	r3, r3, #16
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	061b      	lsls	r3, r3, #24
 8006ac8:	431a      	orrs	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	071b      	lsls	r3, r3, #28
 8006ad0:	4957      	ldr	r1, [pc, #348]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d004      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aec:	d00a      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d02e      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b02:	d129      	bne.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006b04:	4b4a      	ldr	r3, [pc, #296]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b0a:	0c1b      	lsrs	r3, r3, #16
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b12:	4b47      	ldr	r3, [pc, #284]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b18:	0f1b      	lsrs	r3, r3, #28
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	019a      	lsls	r2, r3, #6
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	041b      	lsls	r3, r3, #16
 8006b2a:	431a      	orrs	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	061b      	lsls	r3, r3, #24
 8006b32:	431a      	orrs	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	071b      	lsls	r3, r3, #28
 8006b38:	493d      	ldr	r1, [pc, #244]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006b40:	4b3b      	ldr	r3, [pc, #236]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b46:	f023 021f 	bic.w	r2, r3, #31
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4937      	ldr	r1, [pc, #220]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01d      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006b64:	4b32      	ldr	r3, [pc, #200]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b6a:	0e1b      	lsrs	r3, r3, #24
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006b72:	4b2f      	ldr	r3, [pc, #188]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b78:	0f1b      	lsrs	r3, r3, #28
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	019a      	lsls	r2, r3, #6
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	061b      	lsls	r3, r3, #24
 8006b92:	431a      	orrs	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	071b      	lsls	r3, r3, #28
 8006b98:	4925      	ldr	r1, [pc, #148]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d011      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	019a      	lsls	r2, r3, #6
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	071b      	lsls	r3, r3, #28
 8006bc8:	4919      	ldr	r1, [pc, #100]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006bd0:	4b17      	ldr	r3, [pc, #92]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a16      	ldr	r2, [pc, #88]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bdc:	f7fc f82e 	bl	8002c3c <HAL_GetTick>
 8006be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006be4:	f7fc f82a 	bl	8002c3c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	@ 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e0d7      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0f0      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	f040 80cd 	bne.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006c0a:	4b09      	ldr	r3, [pc, #36]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a08      	ldr	r2, [pc, #32]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c16:	f7fc f811 	bl	8002c3c <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c1c:	e00a      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c1e:	f7fc f80d 	bl	8002c3c <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b64      	cmp	r3, #100	@ 0x64
 8006c2a:	d903      	bls.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e0ba      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006c34:	4b5e      	ldr	r3, [pc, #376]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c40:	d0ed      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d02e      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d12a      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c6a:	4b51      	ldr	r3, [pc, #324]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c70:	0c1b      	lsrs	r3, r3, #16
 8006c72:	f003 0303 	and.w	r3, r3, #3
 8006c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006c78:	4b4d      	ldr	r3, [pc, #308]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c7e:	0f1b      	lsrs	r3, r3, #28
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	019a      	lsls	r2, r3, #6
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	061b      	lsls	r3, r3, #24
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	071b      	lsls	r3, r3, #28
 8006c9e:	4944      	ldr	r1, [pc, #272]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006ca6:	4b42      	ldr	r3, [pc, #264]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	493d      	ldr	r1, [pc, #244]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d022      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006cd4:	d11d      	bne.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006cd6:	4b36      	ldr	r3, [pc, #216]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cdc:	0e1b      	lsrs	r3, r3, #24
 8006cde:	f003 030f 	and.w	r3, r3, #15
 8006ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ce4:	4b32      	ldr	r3, [pc, #200]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cea:	0f1b      	lsrs	r3, r3, #28
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	019a      	lsls	r2, r3, #6
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	041b      	lsls	r3, r3, #16
 8006cfe:	431a      	orrs	r2, r3
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	061b      	lsls	r3, r3, #24
 8006d04:	431a      	orrs	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	071b      	lsls	r3, r3, #28
 8006d0a:	4929      	ldr	r1, [pc, #164]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d028      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d1e:	4b24      	ldr	r3, [pc, #144]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d24:	0e1b      	lsrs	r3, r3, #24
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006d2c:	4b20      	ldr	r3, [pc, #128]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	019a      	lsls	r2, r3, #6
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	431a      	orrs	r2, r3
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	061b      	lsls	r3, r3, #24
 8006d4a:	431a      	orrs	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	071b      	lsls	r3, r3, #28
 8006d52:	4917      	ldr	r1, [pc, #92]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006d5a:	4b15      	ldr	r3, [pc, #84]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	4911      	ldr	r1, [pc, #68]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006d70:	4b0f      	ldr	r3, [pc, #60]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a0e      	ldr	r2, [pc, #56]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d7c:	f7fb ff5e 	bl	8002c3c <HAL_GetTick>
 8006d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d82:	e008      	b.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006d84:	f7fb ff5a 	bl	8002c3c <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	2b64      	cmp	r3, #100	@ 0x64
 8006d90:	d901      	bls.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e007      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006d96:	4b06      	ldr	r3, [pc, #24]	@ (8006db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da2:	d1ef      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40023800 	.word	0x40023800

08006db4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e025      	b.n	8006e14 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d106      	bne.n	8006de2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7fb fc89 	bl	80026f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	3304      	adds	r3, #4
 8006df2:	4619      	mov	r1, r3
 8006df4:	4610      	mov	r0, r2
 8006df6:	f001 ff47 	bl	8008c88 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	461a      	mov	r2, r3
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	f001 ff9b 	bl	8008d40 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e2e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006e30:	7dfb      	ldrb	r3, [r7, #23]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d101      	bne.n	8006e3a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006e36:	2302      	movs	r3, #2
 8006e38:	e021      	b.n	8006e7e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006e3a:	7dfb      	ldrb	r3, [r7, #23]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d002      	beq.n	8006e46 <HAL_SDRAM_SendCommand+0x2a>
 8006e40:	7dfb      	ldrb	r3, [r7, #23]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d118      	bne.n	8006e78 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 ffdc 	bl	8008e14 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d104      	bne.n	8006e6e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2205      	movs	r2, #5
 8006e68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e6c:	e006      	b.n	8006e7c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2201      	movs	r2, #1
 8006e72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006e76:	e001      	b.n	8006e7c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b082      	sub	sp, #8
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006e96:	b2db      	uxtb	r3, r3
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	d101      	bne.n	8006ea0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
 8006e9e:	e016      	b.n	8006ece <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d10f      	bne.n	8006ecc <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2202      	movs	r2, #2
 8006eb0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f001 ffce 	bl	8008e5c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	e000      	b.n	8006ece <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e049      	b.n	8006f7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fb fa71 	bl	80023e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2202      	movs	r2, #2
 8006f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
 8006f12:	4619      	mov	r1, r3
 8006f14:	4610      	mov	r0, r2
 8006f16:	f000 fdc5 	bl	8007aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e049      	b.n	800702a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f841 	bl	8007032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3304      	adds	r3, #4
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	4610      	mov	r0, r2
 8006fc4:	f000 fd6e 	bl	8007aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3708      	adds	r7, #8
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007032:	b480      	push	{r7}
 8007034:	b083      	sub	sp, #12
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d109      	bne.n	8007070 <HAL_TIM_PWM_Start_IT+0x28>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b01      	cmp	r3, #1
 8007066:	bf14      	ite	ne
 8007068:	2301      	movne	r3, #1
 800706a:	2300      	moveq	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	e03c      	b.n	80070ea <HAL_TIM_PWM_Start_IT+0xa2>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b04      	cmp	r3, #4
 8007074:	d109      	bne.n	800708a <HAL_TIM_PWM_Start_IT+0x42>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	bf14      	ite	ne
 8007082:	2301      	movne	r3, #1
 8007084:	2300      	moveq	r3, #0
 8007086:	b2db      	uxtb	r3, r3
 8007088:	e02f      	b.n	80070ea <HAL_TIM_PWM_Start_IT+0xa2>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b08      	cmp	r3, #8
 800708e:	d109      	bne.n	80070a4 <HAL_TIM_PWM_Start_IT+0x5c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	bf14      	ite	ne
 800709c:	2301      	movne	r3, #1
 800709e:	2300      	moveq	r3, #0
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	e022      	b.n	80070ea <HAL_TIM_PWM_Start_IT+0xa2>
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b0c      	cmp	r3, #12
 80070a8:	d109      	bne.n	80070be <HAL_TIM_PWM_Start_IT+0x76>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	bf14      	ite	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	2300      	moveq	r3, #0
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	e015      	b.n	80070ea <HAL_TIM_PWM_Start_IT+0xa2>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d109      	bne.n	80070d8 <HAL_TIM_PWM_Start_IT+0x90>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	bf14      	ite	ne
 80070d0:	2301      	movne	r3, #1
 80070d2:	2300      	moveq	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	e008      	b.n	80070ea <HAL_TIM_PWM_Start_IT+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	bf14      	ite	ne
 80070e4:	2301      	movne	r3, #1
 80070e6:	2300      	moveq	r3, #0
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e0dd      	b.n	80072ae <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d104      	bne.n	8007102 <HAL_TIM_PWM_Start_IT+0xba>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007100:	e023      	b.n	800714a <HAL_TIM_PWM_Start_IT+0x102>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b04      	cmp	r3, #4
 8007106:	d104      	bne.n	8007112 <HAL_TIM_PWM_Start_IT+0xca>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007110:	e01b      	b.n	800714a <HAL_TIM_PWM_Start_IT+0x102>
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b08      	cmp	r3, #8
 8007116:	d104      	bne.n	8007122 <HAL_TIM_PWM_Start_IT+0xda>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007120:	e013      	b.n	800714a <HAL_TIM_PWM_Start_IT+0x102>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d104      	bne.n	8007132 <HAL_TIM_PWM_Start_IT+0xea>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2202      	movs	r2, #2
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007130:	e00b      	b.n	800714a <HAL_TIM_PWM_Start_IT+0x102>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b10      	cmp	r3, #16
 8007136:	d104      	bne.n	8007142 <HAL_TIM_PWM_Start_IT+0xfa>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2202      	movs	r2, #2
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007140:	e003      	b.n	800714a <HAL_TIM_PWM_Start_IT+0x102>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b0c      	cmp	r3, #12
 800714e:	d841      	bhi.n	80071d4 <HAL_TIM_PWM_Start_IT+0x18c>
 8007150:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <HAL_TIM_PWM_Start_IT+0x110>)
 8007152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007156:	bf00      	nop
 8007158:	0800718d 	.word	0x0800718d
 800715c:	080071d5 	.word	0x080071d5
 8007160:	080071d5 	.word	0x080071d5
 8007164:	080071d5 	.word	0x080071d5
 8007168:	0800719f 	.word	0x0800719f
 800716c:	080071d5 	.word	0x080071d5
 8007170:	080071d5 	.word	0x080071d5
 8007174:	080071d5 	.word	0x080071d5
 8007178:	080071b1 	.word	0x080071b1
 800717c:	080071d5 	.word	0x080071d5
 8007180:	080071d5 	.word	0x080071d5
 8007184:	080071d5 	.word	0x080071d5
 8007188:	080071c3 	.word	0x080071c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0202 	orr.w	r2, r2, #2
 800719a:	60da      	str	r2, [r3, #12]
      break;
 800719c:	e01d      	b.n	80071da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f042 0204 	orr.w	r2, r2, #4
 80071ac:	60da      	str	r2, [r3, #12]
      break;
 80071ae:	e014      	b.n	80071da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68da      	ldr	r2, [r3, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f042 0208 	orr.w	r2, r2, #8
 80071be:	60da      	str	r2, [r3, #12]
      break;
 80071c0:	e00b      	b.n	80071da <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68da      	ldr	r2, [r3, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0210 	orr.w	r2, r2, #16
 80071d0:	60da      	str	r2, [r3, #12]
      break;
 80071d2:	e002      	b.n	80071da <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	73fb      	strb	r3, [r7, #15]
      break;
 80071d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d165      	bne.n	80072ac <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 ffff 	bl	80081ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a31      	ldr	r2, [pc, #196]	@ (80072b8 <HAL_TIM_PWM_Start_IT+0x270>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIM_PWM_Start_IT+0x1ba>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a2f      	ldr	r2, [pc, #188]	@ (80072bc <HAL_TIM_PWM_Start_IT+0x274>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d101      	bne.n	8007206 <HAL_TIM_PWM_Start_IT+0x1be>
 8007202:	2301      	movs	r3, #1
 8007204:	e000      	b.n	8007208 <HAL_TIM_PWM_Start_IT+0x1c0>
 8007206:	2300      	movs	r3, #0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d007      	beq.n	800721c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800721a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a25      	ldr	r2, [pc, #148]	@ (80072b8 <HAL_TIM_PWM_Start_IT+0x270>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d022      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800722e:	d01d      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a22      	ldr	r2, [pc, #136]	@ (80072c0 <HAL_TIM_PWM_Start_IT+0x278>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d018      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a21      	ldr	r2, [pc, #132]	@ (80072c4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d013      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a1f      	ldr	r2, [pc, #124]	@ (80072c8 <HAL_TIM_PWM_Start_IT+0x280>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d00e      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a1a      	ldr	r2, [pc, #104]	@ (80072bc <HAL_TIM_PWM_Start_IT+0x274>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d009      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a1b      	ldr	r2, [pc, #108]	@ (80072cc <HAL_TIM_PWM_Start_IT+0x284>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d004      	beq.n	800726c <HAL_TIM_PWM_Start_IT+0x224>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1a      	ldr	r2, [pc, #104]	@ (80072d0 <HAL_TIM_PWM_Start_IT+0x288>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d115      	bne.n	8007298 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689a      	ldr	r2, [r3, #8]
 8007272:	4b18      	ldr	r3, [pc, #96]	@ (80072d4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8007274:	4013      	ands	r3, r2
 8007276:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b06      	cmp	r3, #6
 800727c:	d015      	beq.n	80072aa <HAL_TIM_PWM_Start_IT+0x262>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007284:	d011      	beq.n	80072aa <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f042 0201 	orr.w	r2, r2, #1
 8007294:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007296:	e008      	b.n	80072aa <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	e000      	b.n	80072ac <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072aa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3710      	adds	r7, #16
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40010000 	.word	0x40010000
 80072bc:	40010400 	.word	0x40010400
 80072c0:	40000400 	.word	0x40000400
 80072c4:	40000800 	.word	0x40000800
 80072c8:	40000c00 	.word	0x40000c00
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40001800 	.word	0x40001800
 80072d4:	00010007 	.word	0x00010007

080072d8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	2b0c      	cmp	r3, #12
 80072ea:	d841      	bhi.n	8007370 <HAL_TIM_PWM_Stop_IT+0x98>
 80072ec:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007329 	.word	0x08007329
 80072f8:	08007371 	.word	0x08007371
 80072fc:	08007371 	.word	0x08007371
 8007300:	08007371 	.word	0x08007371
 8007304:	0800733b 	.word	0x0800733b
 8007308:	08007371 	.word	0x08007371
 800730c:	08007371 	.word	0x08007371
 8007310:	08007371 	.word	0x08007371
 8007314:	0800734d 	.word	0x0800734d
 8007318:	08007371 	.word	0x08007371
 800731c:	08007371 	.word	0x08007371
 8007320:	08007371 	.word	0x08007371
 8007324:	0800735f 	.word	0x0800735f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	68da      	ldr	r2, [r3, #12]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f022 0202 	bic.w	r2, r2, #2
 8007336:	60da      	str	r2, [r3, #12]
      break;
 8007338:	e01d      	b.n	8007376 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0204 	bic.w	r2, r2, #4
 8007348:	60da      	str	r2, [r3, #12]
      break;
 800734a:	e014      	b.n	8007376 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0208 	bic.w	r2, r2, #8
 800735a:	60da      	str	r2, [r3, #12]
      break;
 800735c:	e00b      	b.n	8007376 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68da      	ldr	r2, [r3, #12]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 0210 	bic.w	r2, r2, #16
 800736c:	60da      	str	r2, [r3, #12]
      break;
 800736e:	e002      	b.n	8007376 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007370:	2301      	movs	r3, #1
 8007372:	73fb      	strb	r3, [r7, #15]
      break;
 8007374:	bf00      	nop
  }

  if (status == HAL_OK)
 8007376:	7bfb      	ldrb	r3, [r7, #15]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d171      	bne.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 ff31 	bl	80081ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a37      	ldr	r2, [pc, #220]	@ (800746c <HAL_TIM_PWM_Stop_IT+0x194>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <HAL_TIM_PWM_Stop_IT+0xc6>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a35      	ldr	r2, [pc, #212]	@ (8007470 <HAL_TIM_PWM_Stop_IT+0x198>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d101      	bne.n	80073a2 <HAL_TIM_PWM_Stop_IT+0xca>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d017      	beq.n	80073d8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6a1a      	ldr	r2, [r3, #32]
 80073ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10f      	bne.n	80073d8 <HAL_TIM_PWM_Stop_IT+0x100>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6a1a      	ldr	r2, [r3, #32]
 80073be:	f240 4344 	movw	r3, #1092	@ 0x444
 80073c2:	4013      	ands	r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d107      	bne.n	80073d8 <HAL_TIM_PWM_Stop_IT+0x100>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80073d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6a1a      	ldr	r2, [r3, #32]
 80073de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80073e2:	4013      	ands	r3, r2
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10f      	bne.n	8007408 <HAL_TIM_PWM_Stop_IT+0x130>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6a1a      	ldr	r2, [r3, #32]
 80073ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80073f2:	4013      	ands	r3, r2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_PWM_Stop_IT+0x130>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0201 	bic.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d104      	bne.n	8007418 <HAL_TIM_PWM_Stop_IT+0x140>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007416:	e023      	b.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	2b04      	cmp	r3, #4
 800741c:	d104      	bne.n	8007428 <HAL_TIM_PWM_Stop_IT+0x150>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007426:	e01b      	b.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b08      	cmp	r3, #8
 800742c:	d104      	bne.n	8007438 <HAL_TIM_PWM_Stop_IT+0x160>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007436:	e013      	b.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b0c      	cmp	r3, #12
 800743c:	d104      	bne.n	8007448 <HAL_TIM_PWM_Stop_IT+0x170>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007446:	e00b      	b.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	2b10      	cmp	r3, #16
 800744c:	d104      	bne.n	8007458 <HAL_TIM_PWM_Stop_IT+0x180>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007456:	e003      	b.n	8007460 <HAL_TIM_PWM_Stop_IT+0x188>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8007460:	7bfb      	ldrb	r3, [r7, #15]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	40010000 	.word	0x40010000
 8007470:	40010400 	.word	0x40010400

08007474 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01b      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0202 	mvn.w	r2, #2
 80074a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	699b      	ldr	r3, [r3, #24]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fad2 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fac4 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fad5 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d020      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0304 	and.w	r3, r3, #4
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d01b      	beq.n	8007524 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0204 	mvn.w	r2, #4
 80074f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2202      	movs	r2, #2
 80074fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 faac 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 8007510:	e005      	b.n	800751e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa9e 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 faaf 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	f003 0308 	and.w	r3, r3, #8
 800752a:	2b00      	cmp	r3, #0
 800752c:	d020      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b00      	cmp	r3, #0
 8007536:	d01b      	beq.n	8007570 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0208 	mvn.w	r2, #8
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2204      	movs	r2, #4
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69db      	ldr	r3, [r3, #28]
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa86 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fa78 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fa89 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b00      	cmp	r3, #0
 8007578:	d020      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b00      	cmp	r3, #0
 8007582:	d01b      	beq.n	80075bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f06f 0210 	mvn.w	r2, #16
 800758c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2208      	movs	r2, #8
 8007592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d003      	beq.n	80075aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa60 	bl	8007a68 <HAL_TIM_IC_CaptureCallback>
 80075a8:	e005      	b.n	80075b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa52 	bl	8007a54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fa63 	bl	8007a7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d007      	beq.n	80075e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f06f 0201 	mvn.w	r2, #1
 80075d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa30 	bl	8007a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d104      	bne.n	80075f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00c      	beq.n	800760e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d007      	beq.n	800760e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 fead 	bl	8008368 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00c      	beq.n	8007632 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d007      	beq.n	8007632 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800762a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fea5 	bl	800837c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00c      	beq.n	8007656 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800764e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fa1d 	bl	8007a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f003 0320 	and.w	r3, r3, #32
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00c      	beq.n	800767a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b00      	cmp	r3, #0
 8007668:	d007      	beq.n	800767a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f06f 0220 	mvn.w	r2, #32
 8007672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fe6d 	bl	8008354 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0ff      	b.n	80078a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b14      	cmp	r3, #20
 80076ae:	f200 80f0 	bhi.w	8007892 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076b2:	a201      	add	r2, pc, #4	@ (adr r2, 80076b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	08007893 	.word	0x08007893
 80076c0:	08007893 	.word	0x08007893
 80076c4:	08007893 	.word	0x08007893
 80076c8:	0800774d 	.word	0x0800774d
 80076cc:	08007893 	.word	0x08007893
 80076d0:	08007893 	.word	0x08007893
 80076d4:	08007893 	.word	0x08007893
 80076d8:	0800778f 	.word	0x0800778f
 80076dc:	08007893 	.word	0x08007893
 80076e0:	08007893 	.word	0x08007893
 80076e4:	08007893 	.word	0x08007893
 80076e8:	080077cf 	.word	0x080077cf
 80076ec:	08007893 	.word	0x08007893
 80076f0:	08007893 	.word	0x08007893
 80076f4:	08007893 	.word	0x08007893
 80076f8:	08007811 	.word	0x08007811
 80076fc:	08007893 	.word	0x08007893
 8007700:	08007893 	.word	0x08007893
 8007704:	08007893 	.word	0x08007893
 8007708:	08007851 	.word	0x08007851
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68b9      	ldr	r1, [r7, #8]
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fa72 	bl	8007bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0208 	orr.w	r2, r2, #8
 8007726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f022 0204 	bic.w	r2, r2, #4
 8007736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6999      	ldr	r1, [r3, #24]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	691a      	ldr	r2, [r3, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	619a      	str	r2, [r3, #24]
      break;
 800774a:	e0a5      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	4618      	mov	r0, r3
 8007754:	f000 fac4 	bl	8007ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	699a      	ldr	r2, [r3, #24]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6999      	ldr	r1, [r3, #24]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	021a      	lsls	r2, r3, #8
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	619a      	str	r2, [r3, #24]
      break;
 800778c:	e084      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fb1b 	bl	8007dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 0204 	bic.w	r2, r2, #4
 80077b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	69d9      	ldr	r1, [r3, #28]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	61da      	str	r2, [r3, #28]
      break;
 80077cc:	e064      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68b9      	ldr	r1, [r7, #8]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 fb71 	bl	8007ebc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69da      	ldr	r2, [r3, #28]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69d9      	ldr	r1, [r3, #28]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	021a      	lsls	r2, r3, #8
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	61da      	str	r2, [r3, #28]
      break;
 800780e:	e043      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fba8 	bl	8007f6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f042 0208 	orr.w	r2, r2, #8
 800782a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f022 0204 	bic.w	r2, r2, #4
 800783a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800784e:	e023      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68b9      	ldr	r1, [r7, #8]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fbda 	bl	8008010 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800786a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800787a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	021a      	lsls	r2, r3, #8
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007890:	e002      	b.n	8007898 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	75fb      	strb	r3, [r7, #23]
      break;
 8007896:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3718      	adds	r7, #24
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop

080078ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_TIM_ConfigClockSource+0x1c>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e0b4      	b.n	8007a32 <HAL_TIM_ConfigClockSource+0x186>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	4b56      	ldr	r3, [pc, #344]	@ (8007a3c <HAL_TIM_ConfigClockSource+0x190>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007900:	d03e      	beq.n	8007980 <HAL_TIM_ConfigClockSource+0xd4>
 8007902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007906:	f200 8087 	bhi.w	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 800790a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800790e:	f000 8086 	beq.w	8007a1e <HAL_TIM_ConfigClockSource+0x172>
 8007912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007916:	d87f      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007918:	2b70      	cmp	r3, #112	@ 0x70
 800791a:	d01a      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0xa6>
 800791c:	2b70      	cmp	r3, #112	@ 0x70
 800791e:	d87b      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007920:	2b60      	cmp	r3, #96	@ 0x60
 8007922:	d050      	beq.n	80079c6 <HAL_TIM_ConfigClockSource+0x11a>
 8007924:	2b60      	cmp	r3, #96	@ 0x60
 8007926:	d877      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007928:	2b50      	cmp	r3, #80	@ 0x50
 800792a:	d03c      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0xfa>
 800792c:	2b50      	cmp	r3, #80	@ 0x50
 800792e:	d873      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007930:	2b40      	cmp	r3, #64	@ 0x40
 8007932:	d058      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0x13a>
 8007934:	2b40      	cmp	r3, #64	@ 0x40
 8007936:	d86f      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007938:	2b30      	cmp	r3, #48	@ 0x30
 800793a:	d064      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x15a>
 800793c:	2b30      	cmp	r3, #48	@ 0x30
 800793e:	d86b      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007940:	2b20      	cmp	r3, #32
 8007942:	d060      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x15a>
 8007944:	2b20      	cmp	r3, #32
 8007946:	d867      	bhi.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
 8007948:	2b00      	cmp	r3, #0
 800794a:	d05c      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x15a>
 800794c:	2b10      	cmp	r3, #16
 800794e:	d05a      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x15a>
 8007950:	e062      	b.n	8007a18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007962:	f000 fc23 	bl	80081ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	609a      	str	r2, [r3, #8]
      break;
 800797e:	e04f      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007990:	f000 fc0c 	bl	80081ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079a2:	609a      	str	r2, [r3, #8]
      break;
 80079a4:	e03c      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079b2:	461a      	mov	r2, r3
 80079b4:	f000 fb80 	bl	80080b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2150      	movs	r1, #80	@ 0x50
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fbd9 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 80079c4:	e02c      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079d2:	461a      	mov	r2, r3
 80079d4:	f000 fb9f 	bl	8008116 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2160      	movs	r1, #96	@ 0x60
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 fbc9 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 80079e4:	e01c      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f2:	461a      	mov	r2, r3
 80079f4:	f000 fb60 	bl	80080b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2140      	movs	r1, #64	@ 0x40
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fbb9 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007a04:	e00c      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f000 fbb0 	bl	8008176 <TIM_ITRx_SetConfig>
      break;
 8007a16:	e003      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a1c:	e000      	b.n	8007a20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	fffeff88 	.word	0xfffeff88

08007a40 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a46      	ldr	r2, [pc, #280]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac2:	d00f      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a43      	ldr	r2, [pc, #268]	@ (8007bd4 <TIM_Base_SetConfig+0x130>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00b      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a42      	ldr	r2, [pc, #264]	@ (8007bd8 <TIM_Base_SetConfig+0x134>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a41      	ldr	r2, [pc, #260]	@ (8007bdc <TIM_Base_SetConfig+0x138>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_Base_SetConfig+0x40>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a40      	ldr	r2, [pc, #256]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d108      	bne.n	8007af6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a35      	ldr	r2, [pc, #212]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d02b      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b04:	d027      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a32      	ldr	r2, [pc, #200]	@ (8007bd4 <TIM_Base_SetConfig+0x130>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d023      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a31      	ldr	r2, [pc, #196]	@ (8007bd8 <TIM_Base_SetConfig+0x134>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01f      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a30      	ldr	r2, [pc, #192]	@ (8007bdc <TIM_Base_SetConfig+0x138>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d01b      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a2f      	ldr	r2, [pc, #188]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d017      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a2e      	ldr	r2, [pc, #184]	@ (8007be4 <TIM_Base_SetConfig+0x140>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d013      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a2d      	ldr	r2, [pc, #180]	@ (8007be8 <TIM_Base_SetConfig+0x144>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d00f      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a2c      	ldr	r2, [pc, #176]	@ (8007bec <TIM_Base_SetConfig+0x148>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d00b      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf0 <TIM_Base_SetConfig+0x14c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d007      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a2a      	ldr	r2, [pc, #168]	@ (8007bf4 <TIM_Base_SetConfig+0x150>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d003      	beq.n	8007b56 <TIM_Base_SetConfig+0xb2>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a29      	ldr	r2, [pc, #164]	@ (8007bf8 <TIM_Base_SetConfig+0x154>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d108      	bne.n	8007b68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a10      	ldr	r2, [pc, #64]	@ (8007bd0 <TIM_Base_SetConfig+0x12c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d003      	beq.n	8007b9c <TIM_Base_SetConfig+0xf8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a12      	ldr	r2, [pc, #72]	@ (8007be0 <TIM_Base_SetConfig+0x13c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d103      	bne.n	8007ba4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d105      	bne.n	8007bc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	f023 0201 	bic.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	611a      	str	r2, [r3, #16]
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000
 8007bd4:	40000400 	.word	0x40000400
 8007bd8:	40000800 	.word	0x40000800
 8007bdc:	40000c00 	.word	0x40000c00
 8007be0:	40010400 	.word	0x40010400
 8007be4:	40014000 	.word	0x40014000
 8007be8:	40014400 	.word	0x40014400
 8007bec:	40014800 	.word	0x40014800
 8007bf0:	40001800 	.word	0x40001800
 8007bf4:	40001c00 	.word	0x40001c00
 8007bf8:	40002000 	.word	0x40002000

08007bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b087      	sub	sp, #28
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a1b      	ldr	r3, [r3, #32]
 8007c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a1b      	ldr	r3, [r3, #32]
 8007c10:	f023 0201 	bic.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd4 <TIM_OC1_SetConfig+0xd8>)
 8007c28:	4013      	ands	r3, r2
 8007c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	f023 0302 	bic.w	r3, r3, #2
 8007c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a21      	ldr	r2, [pc, #132]	@ (8007cd8 <TIM_OC1_SetConfig+0xdc>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_OC1_SetConfig+0x64>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a20      	ldr	r2, [pc, #128]	@ (8007cdc <TIM_OC1_SetConfig+0xe0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10c      	bne.n	8007c7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f023 0308 	bic.w	r3, r3, #8
 8007c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 0304 	bic.w	r3, r3, #4
 8007c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a16      	ldr	r2, [pc, #88]	@ (8007cd8 <TIM_OC1_SetConfig+0xdc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d003      	beq.n	8007c8a <TIM_OC1_SetConfig+0x8e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <TIM_OC1_SetConfig+0xe0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d111      	bne.n	8007cae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	693a      	ldr	r2, [r7, #16]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	693a      	ldr	r2, [r7, #16]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	621a      	str	r2, [r3, #32]
}
 8007cc8:	bf00      	nop
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	fffeff8f 	.word	0xfffeff8f
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40010400 	.word	0x40010400

08007ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a1b      	ldr	r3, [r3, #32]
 8007cf4:	f023 0210 	bic.w	r2, r3, #16
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8007dc4 <TIM_OC2_SetConfig+0xe4>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	021b      	lsls	r3, r3, #8
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	f023 0320 	bic.w	r3, r3, #32
 8007d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	011b      	lsls	r3, r3, #4
 8007d32:	697a      	ldr	r2, [r7, #20]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a23      	ldr	r2, [pc, #140]	@ (8007dc8 <TIM_OC2_SetConfig+0xe8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d003      	beq.n	8007d48 <TIM_OC2_SetConfig+0x68>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a22      	ldr	r2, [pc, #136]	@ (8007dcc <TIM_OC2_SetConfig+0xec>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d10d      	bne.n	8007d64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	011b      	lsls	r3, r3, #4
 8007d56:	697a      	ldr	r2, [r7, #20]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a18      	ldr	r2, [pc, #96]	@ (8007dc8 <TIM_OC2_SetConfig+0xe8>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d003      	beq.n	8007d74 <TIM_OC2_SetConfig+0x94>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a17      	ldr	r2, [pc, #92]	@ (8007dcc <TIM_OC2_SetConfig+0xec>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d113      	bne.n	8007d9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	697a      	ldr	r2, [r7, #20]
 8007db4:	621a      	str	r2, [r3, #32]
}
 8007db6:	bf00      	nop
 8007db8:	371c      	adds	r7, #28
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr
 8007dc2:	bf00      	nop
 8007dc4:	feff8fff 	.word	0xfeff8fff
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a1b      	ldr	r3, [r3, #32]
 8007de4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb0 <TIM_OC3_SetConfig+0xe0>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0303 	bic.w	r3, r3, #3
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a22      	ldr	r2, [pc, #136]	@ (8007eb4 <TIM_OC3_SetConfig+0xe4>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d003      	beq.n	8007e36 <TIM_OC3_SetConfig+0x66>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <TIM_OC3_SetConfig+0xe8>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d10d      	bne.n	8007e52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	021b      	lsls	r3, r3, #8
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a17      	ldr	r2, [pc, #92]	@ (8007eb4 <TIM_OC3_SetConfig+0xe4>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_OC3_SetConfig+0x92>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a16      	ldr	r2, [pc, #88]	@ (8007eb8 <TIM_OC3_SetConfig+0xe8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d113      	bne.n	8007e8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	fffeff8f 	.word	0xfffeff8f
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40010400 	.word	0x40010400

08007ebc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f60 <TIM_OC4_SetConfig+0xa4>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	031b      	lsls	r3, r3, #12
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a13      	ldr	r2, [pc, #76]	@ (8007f64 <TIM_OC4_SetConfig+0xa8>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d003      	beq.n	8007f24 <TIM_OC4_SetConfig+0x68>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a12      	ldr	r2, [pc, #72]	@ (8007f68 <TIM_OC4_SetConfig+0xac>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d109      	bne.n	8007f38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	695b      	ldr	r3, [r3, #20]
 8007f30:	019b      	lsls	r3, r3, #6
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	621a      	str	r2, [r3, #32]
}
 8007f52:	bf00      	nop
 8007f54:	371c      	adds	r7, #28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	feff8fff 	.word	0xfeff8fff
 8007f64:	40010000 	.word	0x40010000
 8007f68:	40010400 	.word	0x40010400

08007f6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	4b1b      	ldr	r3, [pc, #108]	@ (8008004 <TIM_OC5_SetConfig+0x98>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	041b      	lsls	r3, r3, #16
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a12      	ldr	r2, [pc, #72]	@ (8008008 <TIM_OC5_SetConfig+0x9c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC5_SetConfig+0x5e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a11      	ldr	r2, [pc, #68]	@ (800800c <TIM_OC5_SetConfig+0xa0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d109      	bne.n	8007fde <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	021b      	lsls	r3, r3, #8
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	fffeff8f 	.word	0xfffeff8f
 8008008:	40010000 	.word	0x40010000
 800800c:	40010400 	.word	0x40010400

08008010 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a1b      	ldr	r3, [r3, #32]
 8008024:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4b1c      	ldr	r3, [pc, #112]	@ (80080ac <TIM_OC6_SetConfig+0x9c>)
 800803c:	4013      	ands	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	051b      	lsls	r3, r3, #20
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	4313      	orrs	r3, r2
 800805e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a13      	ldr	r2, [pc, #76]	@ (80080b0 <TIM_OC6_SetConfig+0xa0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d003      	beq.n	8008070 <TIM_OC6_SetConfig+0x60>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a12      	ldr	r2, [pc, #72]	@ (80080b4 <TIM_OC6_SetConfig+0xa4>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d109      	bne.n	8008084 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008076:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	029b      	lsls	r3, r3, #10
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	4313      	orrs	r3, r2
 8008082:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	685a      	ldr	r2, [r3, #4]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	621a      	str	r2, [r3, #32]
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	feff8fff 	.word	0xfeff8fff
 80080b0:	40010000 	.word	0x40010000
 80080b4:	40010400 	.word	0x40010400

080080b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f023 0201 	bic.w	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f023 030a 	bic.w	r3, r3, #10
 80080f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	697a      	ldr	r2, [r7, #20]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008116:	b480      	push	{r7}
 8008118:	b087      	sub	sp, #28
 800811a:	af00      	add	r7, sp, #0
 800811c:	60f8      	str	r0, [r7, #12]
 800811e:	60b9      	str	r1, [r7, #8]
 8008120:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	f023 0210 	bic.w	r2, r3, #16
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	031b      	lsls	r3, r3, #12
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008152:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	697a      	ldr	r2, [r7, #20]
 800815a:	4313      	orrs	r3, r2
 800815c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	697a      	ldr	r2, [r7, #20]
 8008168:	621a      	str	r2, [r3, #32]
}
 800816a:	bf00      	nop
 800816c:	371c      	adds	r7, #28
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008176:	b480      	push	{r7}
 8008178:	b085      	sub	sp, #20
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800818c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	f043 0307 	orr.w	r3, r3, #7
 8008198:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	609a      	str	r2, [r3, #8]
}
 80081a0:	bf00      	nop
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	021a      	lsls	r2, r3, #8
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	431a      	orrs	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	609a      	str	r2, [r3, #8]
}
 80081e0:	bf00      	nop
 80081e2:	371c      	adds	r7, #28
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	2201      	movs	r2, #1
 8008200:	fa02 f303 	lsl.w	r3, r2, r3
 8008204:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6a1a      	ldr	r2, [r3, #32]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	43db      	mvns	r3, r3
 800820e:	401a      	ands	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6a1a      	ldr	r2, [r3, #32]
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	fa01 f303 	lsl.w	r3, r1, r3
 8008224:	431a      	orrs	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
	...

08008238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800824c:	2302      	movs	r3, #2
 800824e:	e06d      	b.n	800832c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a30      	ldr	r2, [pc, #192]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2f      	ldr	r2, [pc, #188]	@ (800833c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d108      	bne.n	8008296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800828a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a20      	ldr	r2, [pc, #128]	@ (8008338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d022      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c2:	d01d      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d018      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d013      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1a      	ldr	r2, [pc, #104]	@ (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00e      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a15      	ldr	r2, [pc, #84]	@ (800833c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d009      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a16      	ldr	r2, [pc, #88]	@ (800834c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d004      	beq.n	8008300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10c      	bne.n	800831a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008306:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	4313      	orrs	r3, r2
 8008310:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68ba      	ldr	r2, [r7, #8]
 8008318:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400
 8008340:	40000400 	.word	0x40000400
 8008344:	40000800 	.word	0x40000800
 8008348:	40000c00 	.word	0x40000c00
 800834c:	40014000 	.word	0x40014000
 8008350:	40001800 	.word	0x40001800

08008354 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e040      	b.n	8008424 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d106      	bne.n	80083b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f7fa f8b0 	bl	8002518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	@ 0x24
 80083bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa8c 	bl	80088f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f825 	bl	800842c <UART_SetConfig>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d101      	bne.n	80083ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e01b      	b.n	8008424 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689a      	ldr	r2, [r3, #8]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800840a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fb0b 	bl	8008a38 <UART_CheckIdleState>
 8008422:	4603      	mov	r3, r0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b088      	sub	sp, #32
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	4313      	orrs	r3, r2
 800844e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	4ba6      	ldr	r3, [pc, #664]	@ (80086f0 <UART_SetConfig+0x2c4>)
 8008458:	4013      	ands	r3, r2
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	6979      	ldr	r1, [r7, #20]
 8008460:	430b      	orrs	r3, r1
 8008462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	430a      	orrs	r2, r1
 8008478:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	430a      	orrs	r2, r1
 800849c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a94      	ldr	r2, [pc, #592]	@ (80086f4 <UART_SetConfig+0x2c8>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d120      	bne.n	80084ea <UART_SetConfig+0xbe>
 80084a8:	4b93      	ldr	r3, [pc, #588]	@ (80086f8 <UART_SetConfig+0x2cc>)
 80084aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ae:	f003 0303 	and.w	r3, r3, #3
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d816      	bhi.n	80084e4 <UART_SetConfig+0xb8>
 80084b6:	a201      	add	r2, pc, #4	@ (adr r2, 80084bc <UART_SetConfig+0x90>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080084cd 	.word	0x080084cd
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084d3 	.word	0x080084d3
 80084c8:	080084df 	.word	0x080084df
 80084cc:	2301      	movs	r3, #1
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e150      	b.n	8008774 <UART_SetConfig+0x348>
 80084d2:	2302      	movs	r3, #2
 80084d4:	77fb      	strb	r3, [r7, #31]
 80084d6:	e14d      	b.n	8008774 <UART_SetConfig+0x348>
 80084d8:	2304      	movs	r3, #4
 80084da:	77fb      	strb	r3, [r7, #31]
 80084dc:	e14a      	b.n	8008774 <UART_SetConfig+0x348>
 80084de:	2308      	movs	r3, #8
 80084e0:	77fb      	strb	r3, [r7, #31]
 80084e2:	e147      	b.n	8008774 <UART_SetConfig+0x348>
 80084e4:	2310      	movs	r3, #16
 80084e6:	77fb      	strb	r3, [r7, #31]
 80084e8:	e144      	b.n	8008774 <UART_SetConfig+0x348>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a83      	ldr	r2, [pc, #524]	@ (80086fc <UART_SetConfig+0x2d0>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d132      	bne.n	800855a <UART_SetConfig+0x12e>
 80084f4:	4b80      	ldr	r3, [pc, #512]	@ (80086f8 <UART_SetConfig+0x2cc>)
 80084f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084fa:	f003 030c 	and.w	r3, r3, #12
 80084fe:	2b0c      	cmp	r3, #12
 8008500:	d828      	bhi.n	8008554 <UART_SetConfig+0x128>
 8008502:	a201      	add	r2, pc, #4	@ (adr r2, 8008508 <UART_SetConfig+0xdc>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	0800853d 	.word	0x0800853d
 800850c:	08008555 	.word	0x08008555
 8008510:	08008555 	.word	0x08008555
 8008514:	08008555 	.word	0x08008555
 8008518:	08008549 	.word	0x08008549
 800851c:	08008555 	.word	0x08008555
 8008520:	08008555 	.word	0x08008555
 8008524:	08008555 	.word	0x08008555
 8008528:	08008543 	.word	0x08008543
 800852c:	08008555 	.word	0x08008555
 8008530:	08008555 	.word	0x08008555
 8008534:	08008555 	.word	0x08008555
 8008538:	0800854f 	.word	0x0800854f
 800853c:	2300      	movs	r3, #0
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e118      	b.n	8008774 <UART_SetConfig+0x348>
 8008542:	2302      	movs	r3, #2
 8008544:	77fb      	strb	r3, [r7, #31]
 8008546:	e115      	b.n	8008774 <UART_SetConfig+0x348>
 8008548:	2304      	movs	r3, #4
 800854a:	77fb      	strb	r3, [r7, #31]
 800854c:	e112      	b.n	8008774 <UART_SetConfig+0x348>
 800854e:	2308      	movs	r3, #8
 8008550:	77fb      	strb	r3, [r7, #31]
 8008552:	e10f      	b.n	8008774 <UART_SetConfig+0x348>
 8008554:	2310      	movs	r3, #16
 8008556:	77fb      	strb	r3, [r7, #31]
 8008558:	e10c      	b.n	8008774 <UART_SetConfig+0x348>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a68      	ldr	r2, [pc, #416]	@ (8008700 <UART_SetConfig+0x2d4>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d120      	bne.n	80085a6 <UART_SetConfig+0x17a>
 8008564:	4b64      	ldr	r3, [pc, #400]	@ (80086f8 <UART_SetConfig+0x2cc>)
 8008566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800856e:	2b30      	cmp	r3, #48	@ 0x30
 8008570:	d013      	beq.n	800859a <UART_SetConfig+0x16e>
 8008572:	2b30      	cmp	r3, #48	@ 0x30
 8008574:	d814      	bhi.n	80085a0 <UART_SetConfig+0x174>
 8008576:	2b20      	cmp	r3, #32
 8008578:	d009      	beq.n	800858e <UART_SetConfig+0x162>
 800857a:	2b20      	cmp	r3, #32
 800857c:	d810      	bhi.n	80085a0 <UART_SetConfig+0x174>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d002      	beq.n	8008588 <UART_SetConfig+0x15c>
 8008582:	2b10      	cmp	r3, #16
 8008584:	d006      	beq.n	8008594 <UART_SetConfig+0x168>
 8008586:	e00b      	b.n	80085a0 <UART_SetConfig+0x174>
 8008588:	2300      	movs	r3, #0
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e0f2      	b.n	8008774 <UART_SetConfig+0x348>
 800858e:	2302      	movs	r3, #2
 8008590:	77fb      	strb	r3, [r7, #31]
 8008592:	e0ef      	b.n	8008774 <UART_SetConfig+0x348>
 8008594:	2304      	movs	r3, #4
 8008596:	77fb      	strb	r3, [r7, #31]
 8008598:	e0ec      	b.n	8008774 <UART_SetConfig+0x348>
 800859a:	2308      	movs	r3, #8
 800859c:	77fb      	strb	r3, [r7, #31]
 800859e:	e0e9      	b.n	8008774 <UART_SetConfig+0x348>
 80085a0:	2310      	movs	r3, #16
 80085a2:	77fb      	strb	r3, [r7, #31]
 80085a4:	e0e6      	b.n	8008774 <UART_SetConfig+0x348>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a56      	ldr	r2, [pc, #344]	@ (8008704 <UART_SetConfig+0x2d8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d120      	bne.n	80085f2 <UART_SetConfig+0x1c6>
 80085b0:	4b51      	ldr	r3, [pc, #324]	@ (80086f8 <UART_SetConfig+0x2cc>)
 80085b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80085ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80085bc:	d013      	beq.n	80085e6 <UART_SetConfig+0x1ba>
 80085be:	2bc0      	cmp	r3, #192	@ 0xc0
 80085c0:	d814      	bhi.n	80085ec <UART_SetConfig+0x1c0>
 80085c2:	2b80      	cmp	r3, #128	@ 0x80
 80085c4:	d009      	beq.n	80085da <UART_SetConfig+0x1ae>
 80085c6:	2b80      	cmp	r3, #128	@ 0x80
 80085c8:	d810      	bhi.n	80085ec <UART_SetConfig+0x1c0>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d002      	beq.n	80085d4 <UART_SetConfig+0x1a8>
 80085ce:	2b40      	cmp	r3, #64	@ 0x40
 80085d0:	d006      	beq.n	80085e0 <UART_SetConfig+0x1b4>
 80085d2:	e00b      	b.n	80085ec <UART_SetConfig+0x1c0>
 80085d4:	2300      	movs	r3, #0
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e0cc      	b.n	8008774 <UART_SetConfig+0x348>
 80085da:	2302      	movs	r3, #2
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e0c9      	b.n	8008774 <UART_SetConfig+0x348>
 80085e0:	2304      	movs	r3, #4
 80085e2:	77fb      	strb	r3, [r7, #31]
 80085e4:	e0c6      	b.n	8008774 <UART_SetConfig+0x348>
 80085e6:	2308      	movs	r3, #8
 80085e8:	77fb      	strb	r3, [r7, #31]
 80085ea:	e0c3      	b.n	8008774 <UART_SetConfig+0x348>
 80085ec:	2310      	movs	r3, #16
 80085ee:	77fb      	strb	r3, [r7, #31]
 80085f0:	e0c0      	b.n	8008774 <UART_SetConfig+0x348>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a44      	ldr	r2, [pc, #272]	@ (8008708 <UART_SetConfig+0x2dc>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d125      	bne.n	8008648 <UART_SetConfig+0x21c>
 80085fc:	4b3e      	ldr	r3, [pc, #248]	@ (80086f8 <UART_SetConfig+0x2cc>)
 80085fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800860a:	d017      	beq.n	800863c <UART_SetConfig+0x210>
 800860c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008610:	d817      	bhi.n	8008642 <UART_SetConfig+0x216>
 8008612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008616:	d00b      	beq.n	8008630 <UART_SetConfig+0x204>
 8008618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800861c:	d811      	bhi.n	8008642 <UART_SetConfig+0x216>
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <UART_SetConfig+0x1fe>
 8008622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008626:	d006      	beq.n	8008636 <UART_SetConfig+0x20a>
 8008628:	e00b      	b.n	8008642 <UART_SetConfig+0x216>
 800862a:	2300      	movs	r3, #0
 800862c:	77fb      	strb	r3, [r7, #31]
 800862e:	e0a1      	b.n	8008774 <UART_SetConfig+0x348>
 8008630:	2302      	movs	r3, #2
 8008632:	77fb      	strb	r3, [r7, #31]
 8008634:	e09e      	b.n	8008774 <UART_SetConfig+0x348>
 8008636:	2304      	movs	r3, #4
 8008638:	77fb      	strb	r3, [r7, #31]
 800863a:	e09b      	b.n	8008774 <UART_SetConfig+0x348>
 800863c:	2308      	movs	r3, #8
 800863e:	77fb      	strb	r3, [r7, #31]
 8008640:	e098      	b.n	8008774 <UART_SetConfig+0x348>
 8008642:	2310      	movs	r3, #16
 8008644:	77fb      	strb	r3, [r7, #31]
 8008646:	e095      	b.n	8008774 <UART_SetConfig+0x348>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2f      	ldr	r2, [pc, #188]	@ (800870c <UART_SetConfig+0x2e0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d125      	bne.n	800869e <UART_SetConfig+0x272>
 8008652:	4b29      	ldr	r3, [pc, #164]	@ (80086f8 <UART_SetConfig+0x2cc>)
 8008654:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800865c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008660:	d017      	beq.n	8008692 <UART_SetConfig+0x266>
 8008662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008666:	d817      	bhi.n	8008698 <UART_SetConfig+0x26c>
 8008668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800866c:	d00b      	beq.n	8008686 <UART_SetConfig+0x25a>
 800866e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008672:	d811      	bhi.n	8008698 <UART_SetConfig+0x26c>
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <UART_SetConfig+0x254>
 8008678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800867c:	d006      	beq.n	800868c <UART_SetConfig+0x260>
 800867e:	e00b      	b.n	8008698 <UART_SetConfig+0x26c>
 8008680:	2301      	movs	r3, #1
 8008682:	77fb      	strb	r3, [r7, #31]
 8008684:	e076      	b.n	8008774 <UART_SetConfig+0x348>
 8008686:	2302      	movs	r3, #2
 8008688:	77fb      	strb	r3, [r7, #31]
 800868a:	e073      	b.n	8008774 <UART_SetConfig+0x348>
 800868c:	2304      	movs	r3, #4
 800868e:	77fb      	strb	r3, [r7, #31]
 8008690:	e070      	b.n	8008774 <UART_SetConfig+0x348>
 8008692:	2308      	movs	r3, #8
 8008694:	77fb      	strb	r3, [r7, #31]
 8008696:	e06d      	b.n	8008774 <UART_SetConfig+0x348>
 8008698:	2310      	movs	r3, #16
 800869a:	77fb      	strb	r3, [r7, #31]
 800869c:	e06a      	b.n	8008774 <UART_SetConfig+0x348>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008710 <UART_SetConfig+0x2e4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d138      	bne.n	800871a <UART_SetConfig+0x2ee>
 80086a8:	4b13      	ldr	r3, [pc, #76]	@ (80086f8 <UART_SetConfig+0x2cc>)
 80086aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ae:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80086b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086b6:	d017      	beq.n	80086e8 <UART_SetConfig+0x2bc>
 80086b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80086bc:	d82a      	bhi.n	8008714 <UART_SetConfig+0x2e8>
 80086be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086c2:	d00b      	beq.n	80086dc <UART_SetConfig+0x2b0>
 80086c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80086c8:	d824      	bhi.n	8008714 <UART_SetConfig+0x2e8>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <UART_SetConfig+0x2aa>
 80086ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086d2:	d006      	beq.n	80086e2 <UART_SetConfig+0x2b6>
 80086d4:	e01e      	b.n	8008714 <UART_SetConfig+0x2e8>
 80086d6:	2300      	movs	r3, #0
 80086d8:	77fb      	strb	r3, [r7, #31]
 80086da:	e04b      	b.n	8008774 <UART_SetConfig+0x348>
 80086dc:	2302      	movs	r3, #2
 80086de:	77fb      	strb	r3, [r7, #31]
 80086e0:	e048      	b.n	8008774 <UART_SetConfig+0x348>
 80086e2:	2304      	movs	r3, #4
 80086e4:	77fb      	strb	r3, [r7, #31]
 80086e6:	e045      	b.n	8008774 <UART_SetConfig+0x348>
 80086e8:	2308      	movs	r3, #8
 80086ea:	77fb      	strb	r3, [r7, #31]
 80086ec:	e042      	b.n	8008774 <UART_SetConfig+0x348>
 80086ee:	bf00      	nop
 80086f0:	efff69f3 	.word	0xefff69f3
 80086f4:	40011000 	.word	0x40011000
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40004400 	.word	0x40004400
 8008700:	40004800 	.word	0x40004800
 8008704:	40004c00 	.word	0x40004c00
 8008708:	40005000 	.word	0x40005000
 800870c:	40011400 	.word	0x40011400
 8008710:	40007800 	.word	0x40007800
 8008714:	2310      	movs	r3, #16
 8008716:	77fb      	strb	r3, [r7, #31]
 8008718:	e02c      	b.n	8008774 <UART_SetConfig+0x348>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a72      	ldr	r2, [pc, #456]	@ (80088e8 <UART_SetConfig+0x4bc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d125      	bne.n	8008770 <UART_SetConfig+0x344>
 8008724:	4b71      	ldr	r3, [pc, #452]	@ (80088ec <UART_SetConfig+0x4c0>)
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800872e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008732:	d017      	beq.n	8008764 <UART_SetConfig+0x338>
 8008734:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008738:	d817      	bhi.n	800876a <UART_SetConfig+0x33e>
 800873a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800873e:	d00b      	beq.n	8008758 <UART_SetConfig+0x32c>
 8008740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008744:	d811      	bhi.n	800876a <UART_SetConfig+0x33e>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <UART_SetConfig+0x326>
 800874a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800874e:	d006      	beq.n	800875e <UART_SetConfig+0x332>
 8008750:	e00b      	b.n	800876a <UART_SetConfig+0x33e>
 8008752:	2300      	movs	r3, #0
 8008754:	77fb      	strb	r3, [r7, #31]
 8008756:	e00d      	b.n	8008774 <UART_SetConfig+0x348>
 8008758:	2302      	movs	r3, #2
 800875a:	77fb      	strb	r3, [r7, #31]
 800875c:	e00a      	b.n	8008774 <UART_SetConfig+0x348>
 800875e:	2304      	movs	r3, #4
 8008760:	77fb      	strb	r3, [r7, #31]
 8008762:	e007      	b.n	8008774 <UART_SetConfig+0x348>
 8008764:	2308      	movs	r3, #8
 8008766:	77fb      	strb	r3, [r7, #31]
 8008768:	e004      	b.n	8008774 <UART_SetConfig+0x348>
 800876a:	2310      	movs	r3, #16
 800876c:	77fb      	strb	r3, [r7, #31]
 800876e:	e001      	b.n	8008774 <UART_SetConfig+0x348>
 8008770:	2310      	movs	r3, #16
 8008772:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800877c:	d15b      	bne.n	8008836 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800877e:	7ffb      	ldrb	r3, [r7, #31]
 8008780:	2b08      	cmp	r3, #8
 8008782:	d828      	bhi.n	80087d6 <UART_SetConfig+0x3aa>
 8008784:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <UART_SetConfig+0x360>)
 8008786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878a:	bf00      	nop
 800878c:	080087b1 	.word	0x080087b1
 8008790:	080087b9 	.word	0x080087b9
 8008794:	080087c1 	.word	0x080087c1
 8008798:	080087d7 	.word	0x080087d7
 800879c:	080087c7 	.word	0x080087c7
 80087a0:	080087d7 	.word	0x080087d7
 80087a4:	080087d7 	.word	0x080087d7
 80087a8:	080087d7 	.word	0x080087d7
 80087ac:	080087cf 	.word	0x080087cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b0:	f7fd fee8 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 80087b4:	61b8      	str	r0, [r7, #24]
        break;
 80087b6:	e013      	b.n	80087e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087b8:	f7fd fef8 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 80087bc:	61b8      	str	r0, [r7, #24]
        break;
 80087be:	e00f      	b.n	80087e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087c0:	4b4b      	ldr	r3, [pc, #300]	@ (80088f0 <UART_SetConfig+0x4c4>)
 80087c2:	61bb      	str	r3, [r7, #24]
        break;
 80087c4:	e00c      	b.n	80087e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087c6:	f7fd fe0b 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 80087ca:	61b8      	str	r0, [r7, #24]
        break;
 80087cc:	e008      	b.n	80087e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087d2:	61bb      	str	r3, [r7, #24]
        break;
 80087d4:	e004      	b.n	80087e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	77bb      	strb	r3, [r7, #30]
        break;
 80087de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d074      	beq.n	80088d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	005a      	lsls	r2, r3, #1
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	085b      	lsrs	r3, r3, #1
 80087f0:	441a      	add	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80087fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	2b0f      	cmp	r3, #15
 8008800:	d916      	bls.n	8008830 <UART_SetConfig+0x404>
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008808:	d212      	bcs.n	8008830 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	b29b      	uxth	r3, r3
 800880e:	f023 030f 	bic.w	r3, r3, #15
 8008812:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	b29b      	uxth	r3, r3
 800881a:	f003 0307 	and.w	r3, r3, #7
 800881e:	b29a      	uxth	r2, r3
 8008820:	89fb      	ldrh	r3, [r7, #14]
 8008822:	4313      	orrs	r3, r2
 8008824:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	89fa      	ldrh	r2, [r7, #14]
 800882c:	60da      	str	r2, [r3, #12]
 800882e:	e04f      	b.n	80088d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	77bb      	strb	r3, [r7, #30]
 8008834:	e04c      	b.n	80088d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d828      	bhi.n	800888e <UART_SetConfig+0x462>
 800883c:	a201      	add	r2, pc, #4	@ (adr r2, 8008844 <UART_SetConfig+0x418>)
 800883e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008842:	bf00      	nop
 8008844:	08008869 	.word	0x08008869
 8008848:	08008871 	.word	0x08008871
 800884c:	08008879 	.word	0x08008879
 8008850:	0800888f 	.word	0x0800888f
 8008854:	0800887f 	.word	0x0800887f
 8008858:	0800888f 	.word	0x0800888f
 800885c:	0800888f 	.word	0x0800888f
 8008860:	0800888f 	.word	0x0800888f
 8008864:	08008887 	.word	0x08008887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008868:	f7fd fe8c 	bl	8006584 <HAL_RCC_GetPCLK1Freq>
 800886c:	61b8      	str	r0, [r7, #24]
        break;
 800886e:	e013      	b.n	8008898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008870:	f7fd fe9c 	bl	80065ac <HAL_RCC_GetPCLK2Freq>
 8008874:	61b8      	str	r0, [r7, #24]
        break;
 8008876:	e00f      	b.n	8008898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008878:	4b1d      	ldr	r3, [pc, #116]	@ (80088f0 <UART_SetConfig+0x4c4>)
 800887a:	61bb      	str	r3, [r7, #24]
        break;
 800887c:	e00c      	b.n	8008898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800887e:	f7fd fdaf 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8008882:	61b8      	str	r0, [r7, #24]
        break;
 8008884:	e008      	b.n	8008898 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008886:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800888a:	61bb      	str	r3, [r7, #24]
        break;
 800888c:	e004      	b.n	8008898 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800888e:	2300      	movs	r3, #0
 8008890:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	77bb      	strb	r3, [r7, #30]
        break;
 8008896:	bf00      	nop
    }

    if (pclk != 0U)
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d018      	beq.n	80088d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	085a      	lsrs	r2, r3, #1
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	441a      	add	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80088b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	2b0f      	cmp	r3, #15
 80088b6:	d909      	bls.n	80088cc <UART_SetConfig+0x4a0>
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088be:	d205      	bcs.n	80088cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e001      	b.n	80088d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2200      	movs	r2, #0
 80088da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80088dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40007c00 	.word	0x40007c00
 80088ec:	40023800 	.word	0x40023800
 80088f0:	00f42400 	.word	0x00f42400

080088f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008900:	f003 0308 	and.w	r3, r3, #8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00a      	beq.n	800891e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d00a      	beq.n	8008962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	685b      	ldr	r3, [r3, #4]
 8008952:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	430a      	orrs	r2, r1
 8008982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	d00a      	beq.n	80089a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689b      	ldr	r3, [r3, #8]
 8008996:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	430a      	orrs	r2, r1
 80089a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	430a      	orrs	r2, r1
 80089c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d01a      	beq.n	8008a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089f2:	d10a      	bne.n	8008a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	430a      	orrs	r2, r1
 8008a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	430a      	orrs	r2, r1
 8008a2a:	605a      	str	r2, [r3, #4]
  }
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b08c      	sub	sp, #48	@ 0x30
 8008a3c:	af02      	add	r7, sp, #8
 8008a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a48:	f7fa f8f8 	bl	8002c3c <HAL_GetTick>
 8008a4c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0308 	and.w	r3, r3, #8
 8008a58:	2b08      	cmp	r3, #8
 8008a5a:	d12e      	bne.n	8008aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008a60:	9300      	str	r3, [sp, #0]
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	2200      	movs	r2, #0
 8008a66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f83b 	bl	8008ae6 <UART_WaitOnFlagUntilTimeout>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d021      	beq.n	8008aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a8a:	623b      	str	r3, [r7, #32]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	6a3b      	ldr	r3, [r7, #32]
 8008a94:	61fb      	str	r3, [r7, #28]
 8008a96:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	69b9      	ldr	r1, [r7, #24]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	617b      	str	r3, [r7, #20]
   return(result);
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e6      	bne.n	8008a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e011      	b.n	8008ade <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3728      	adds	r7, #40	@ 0x28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008af6:	e04f      	b.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008afe:	d04b      	beq.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b00:	f7fa f89c 	bl	8002c3c <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d302      	bcc.n	8008b16 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d101      	bne.n	8008b1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e04e      	b.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d037      	beq.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b80      	cmp	r3, #128	@ 0x80
 8008b2c:	d034      	beq.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	2b40      	cmp	r3, #64	@ 0x40
 8008b32:	d031      	beq.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f003 0308 	and.w	r3, r3, #8
 8008b3e:	2b08      	cmp	r3, #8
 8008b40:	d110      	bne.n	8008b64 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2208      	movs	r2, #8
 8008b48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 f838 	bl	8008bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2208      	movs	r2, #8
 8008b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e029      	b.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b72:	d111      	bne.n	8008b98 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b7e:	68f8      	ldr	r0, [r7, #12]
 8008b80:	f000 f81e 	bl	8008bc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008b94:	2303      	movs	r3, #3
 8008b96:	e00f      	b.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	69da      	ldr	r2, [r3, #28]
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	68ba      	ldr	r2, [r7, #8]
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	bf0c      	ite	eq
 8008ba8:	2301      	moveq	r3, #1
 8008baa:	2300      	movne	r3, #0
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d0a0      	beq.n	8008af8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b095      	sub	sp, #84	@ 0x54
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bd0:	e853 3f00 	ldrex	r3, [r3]
 8008bd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008bec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e6      	bne.n	8008bc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	3308      	adds	r3, #8
 8008c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6a3b      	ldr	r3, [r7, #32]
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	f023 0301 	bic.w	r3, r3, #1
 8008c10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e5      	bne.n	8008bfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d118      	bne.n	8008c68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	f023 0310 	bic.w	r3, r3, #16
 8008c4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	461a      	mov	r2, r3
 8008c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c54:	61bb      	str	r3, [r7, #24]
 8008c56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	6979      	ldr	r1, [r7, #20]
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	613b      	str	r3, [r7, #16]
   return(result);
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e6      	bne.n	8008c36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008c7c:	bf00      	nop
 8008c7e:	3754      	adds	r7, #84	@ 0x54
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d121      	bne.n	8008cde <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	4b27      	ldr	r3, [pc, #156]	@ (8008d3c <FMC_SDRAM_Init+0xb4>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	6851      	ldr	r1, [r2, #4]
 8008ca6:	683a      	ldr	r2, [r7, #0]
 8008ca8:	6892      	ldr	r2, [r2, #8]
 8008caa:	4311      	orrs	r1, r2
 8008cac:	683a      	ldr	r2, [r7, #0]
 8008cae:	68d2      	ldr	r2, [r2, #12]
 8008cb0:	4311      	orrs	r1, r2
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	6912      	ldr	r2, [r2, #16]
 8008cb6:	4311      	orrs	r1, r2
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	6952      	ldr	r2, [r2, #20]
 8008cbc:	4311      	orrs	r1, r2
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	6992      	ldr	r2, [r2, #24]
 8008cc2:	4311      	orrs	r1, r2
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	69d2      	ldr	r2, [r2, #28]
 8008cc8:	4311      	orrs	r1, r2
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	6a12      	ldr	r2, [r2, #32]
 8008cce:	4311      	orrs	r1, r2
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e026      	b.n	8008d2c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	69d9      	ldr	r1, [r3, #28]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	4319      	orrs	r1, r3
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf4:	430b      	orrs	r3, r1
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	4b0e      	ldr	r3, [pc, #56]	@ (8008d3c <FMC_SDRAM_Init+0xb4>)
 8008d02:	4013      	ands	r3, r2
 8008d04:	683a      	ldr	r2, [r7, #0]
 8008d06:	6851      	ldr	r1, [r2, #4]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	6892      	ldr	r2, [r2, #8]
 8008d0c:	4311      	orrs	r1, r2
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	68d2      	ldr	r2, [r2, #12]
 8008d12:	4311      	orrs	r1, r2
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	6912      	ldr	r2, [r2, #16]
 8008d18:	4311      	orrs	r1, r2
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	6952      	ldr	r2, [r2, #20]
 8008d1e:	4311      	orrs	r1, r2
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	6992      	ldr	r2, [r2, #24]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	431a      	orrs	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	ffff8000 	.word	0xffff8000

08008d40 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d128      	bne.n	8008da4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	1e59      	subs	r1, r3, #1
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	011b      	lsls	r3, r3, #4
 8008d68:	4319      	orrs	r1, r3
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	4319      	orrs	r1, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	031b      	lsls	r3, r3, #12
 8008d7c:	4319      	orrs	r1, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	691b      	ldr	r3, [r3, #16]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	4319      	orrs	r1, r3
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	695b      	ldr	r3, [r3, #20]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	051b      	lsls	r3, r3, #20
 8008d90:	4319      	orrs	r1, r3
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	431a      	orrs	r2, r3
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	609a      	str	r2, [r3, #8]
 8008da2:	e02d      	b.n	8008e00 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	689a      	ldr	r2, [r3, #8]
 8008da8:	4b19      	ldr	r3, [pc, #100]	@ (8008e10 <FMC_SDRAM_Timing_Init+0xd0>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	68ba      	ldr	r2, [r7, #8]
 8008dae:	68d2      	ldr	r2, [r2, #12]
 8008db0:	3a01      	subs	r2, #1
 8008db2:	0311      	lsls	r1, r2, #12
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	6952      	ldr	r2, [r2, #20]
 8008db8:	3a01      	subs	r2, #1
 8008dba:	0512      	lsls	r2, r2, #20
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	431a      	orrs	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	1e59      	subs	r1, r3, #1
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	4319      	orrs	r1, r3
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	689b      	ldr	r3, [r3, #8]
 8008de0:	3b01      	subs	r3, #1
 8008de2:	021b      	lsls	r3, r3, #8
 8008de4:	4319      	orrs	r1, r3
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	041b      	lsls	r3, r3, #16
 8008dee:	4319      	orrs	r1, r3
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	061b      	lsls	r3, r3, #24
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3714      	adds	r7, #20
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	ff0f0fff 	.word	0xff0f0fff

08008e14 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	691a      	ldr	r2, [r3, #16]
 8008e24:	4b0c      	ldr	r3, [pc, #48]	@ (8008e58 <FMC_SDRAM_SendCommand+0x44>)
 8008e26:	4013      	ands	r3, r2
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	6811      	ldr	r1, [r2, #0]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	6852      	ldr	r2, [r2, #4]
 8008e30:	4311      	orrs	r1, r2
 8008e32:	68ba      	ldr	r2, [r7, #8]
 8008e34:	6892      	ldr	r2, [r2, #8]
 8008e36:	3a01      	subs	r2, #1
 8008e38:	0152      	lsls	r2, r2, #5
 8008e3a:	4311      	orrs	r1, r2
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	68d2      	ldr	r2, [r2, #12]
 8008e40:	0252      	lsls	r2, r2, #9
 8008e42:	430a      	orrs	r2, r1
 8008e44:	431a      	orrs	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8008e4a:	2300      	movs	r3, #0
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e56:	4770      	bx	lr
 8008e58:	ffc00000 	.word	0xffc00000

08008e5c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695a      	ldr	r2, [r3, #20]
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	0052      	lsls	r2, r2, #1
 8008e72:	431a      	orrs	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	ffffc001 	.word	0xffffc001

08008e8c <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8008e96:	20c8      	movs	r0, #200	@ 0xc8
 8008e98:	f000 fc32 	bl	8009700 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8008e9c:	f000 fa7a 	bl	8009394 <ft5336_I2C_InitializeIfRequired>
}
 8008ea0:	bf00      	nop
 8008ea2:	3708      	adds	r7, #8
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}

08008ea8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	4603      	mov	r3, r0
 8008eb0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8008eb2:	bf00      	nop
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8008ed4:	f000 fa5e 	bl	8009394 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
 8008edc:	e010      	b.n	8008f00 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8008ede:	88fb      	ldrh	r3, [r7, #6]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	21a8      	movs	r1, #168	@ 0xa8
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fbed 	bl	80096c4 <TS_IO_Read>
 8008eea:	4603      	mov	r3, r0
 8008eec:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b51      	cmp	r3, #81	@ 0x51
 8008ef4:	d101      	bne.n	8008efa <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	3301      	adds	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d802      	bhi.n	8008f0c <ft5336_ReadID+0x4e>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d0e8      	beq.n	8008ede <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8008f0c:	7b7b      	ldrb	r3, [r7, #13]
 8008f0e:	b2db      	uxtb	r3, r3
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	4603      	mov	r3, r0
 8008f20:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8008f22:	88fb      	ldrh	r3, [r7, #6]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f000 fa45 	bl	80093b4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8008f2a:	88fb      	ldrh	r3, [r7, #6]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f933 	bl	8009198 <ft5336_TS_DisableIT>
}
 8008f32:	bf00      	nop
 8008f34:	3708      	adds	r7, #8
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8008f4a:	88fb      	ldrh	r3, [r7, #6]
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2102      	movs	r1, #2
 8008f50:	4618      	mov	r0, r3
 8008f52:	f000 fbb7 	bl	80096c4 <TS_IO_Read>
 8008f56:	4603      	mov	r3, r0
 8008f58:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	f003 030f 	and.w	r3, r3, #15
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d901      	bls.n	8008f72 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	4b05      	ldr	r3, [pc, #20]	@ (8008f8c <ft5336_TS_DetectTouch+0x50>)
 8008f78:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8008f7a:	4b04      	ldr	r3, [pc, #16]	@ (8008f8c <ft5336_TS_DetectTouch+0x50>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	b2db      	uxtb	r3, r3
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200008b4 	.word	0x200008b4

08008f90 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8008fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8009168 <ft5336_TS_GetXY+0x1d8>)
 8008fb4:	789a      	ldrb	r2, [r3, #2]
 8008fb6:	4b6c      	ldr	r3, [pc, #432]	@ (8009168 <ft5336_TS_GetXY+0x1d8>)
 8008fb8:	785b      	ldrb	r3, [r3, #1]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	f080 80cf 	bcs.w	800915e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8008fc0:	4b69      	ldr	r3, [pc, #420]	@ (8009168 <ft5336_TS_GetXY+0x1d8>)
 8008fc2:	789b      	ldrb	r3, [r3, #2]
 8008fc4:	2b09      	cmp	r3, #9
 8008fc6:	d871      	bhi.n	80090ac <ft5336_TS_GetXY+0x11c>
 8008fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd0 <ft5336_TS_GetXY+0x40>)
 8008fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fce:	bf00      	nop
 8008fd0:	08008ff9 	.word	0x08008ff9
 8008fd4:	0800900b 	.word	0x0800900b
 8008fd8:	0800901d 	.word	0x0800901d
 8008fdc:	0800902f 	.word	0x0800902f
 8008fe0:	08009041 	.word	0x08009041
 8008fe4:	08009053 	.word	0x08009053
 8008fe8:	08009065 	.word	0x08009065
 8008fec:	08009077 	.word	0x08009077
 8008ff0:	08009089 	.word	0x08009089
 8008ff4:	0800909b 	.word	0x0800909b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8008ff8:	2304      	movs	r3, #4
 8008ffa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8009000:	2306      	movs	r3, #6
 8009002:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8009004:	2305      	movs	r3, #5
 8009006:	753b      	strb	r3, [r7, #20]
      break;
 8009008:	e051      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800900a:	230a      	movs	r3, #10
 800900c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800900e:	2309      	movs	r3, #9
 8009010:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8009012:	230c      	movs	r3, #12
 8009014:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8009016:	230b      	movs	r3, #11
 8009018:	753b      	strb	r3, [r7, #20]
      break;
 800901a:	e048      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800901c:	2310      	movs	r3, #16
 800901e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8009020:	230f      	movs	r3, #15
 8009022:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8009024:	2312      	movs	r3, #18
 8009026:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8009028:	2311      	movs	r3, #17
 800902a:	753b      	strb	r3, [r7, #20]
      break;
 800902c:	e03f      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800902e:	2316      	movs	r3, #22
 8009030:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8009032:	2315      	movs	r3, #21
 8009034:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8009036:	2318      	movs	r3, #24
 8009038:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800903a:	2317      	movs	r3, #23
 800903c:	753b      	strb	r3, [r7, #20]
      break;
 800903e:	e036      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8009040:	231c      	movs	r3, #28
 8009042:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8009044:	231b      	movs	r3, #27
 8009046:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8009048:	231e      	movs	r3, #30
 800904a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800904c:	231d      	movs	r3, #29
 800904e:	753b      	strb	r3, [r7, #20]
      break;
 8009050:	e02d      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8009052:	2322      	movs	r3, #34	@ 0x22
 8009054:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8009056:	2321      	movs	r3, #33	@ 0x21
 8009058:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800905a:	2324      	movs	r3, #36	@ 0x24
 800905c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800905e:	2323      	movs	r3, #35	@ 0x23
 8009060:	753b      	strb	r3, [r7, #20]
      break;
 8009062:	e024      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8009064:	2328      	movs	r3, #40	@ 0x28
 8009066:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8009068:	2327      	movs	r3, #39	@ 0x27
 800906a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800906c:	232a      	movs	r3, #42	@ 0x2a
 800906e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8009070:	2329      	movs	r3, #41	@ 0x29
 8009072:	753b      	strb	r3, [r7, #20]
      break;
 8009074:	e01b      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8009076:	232e      	movs	r3, #46	@ 0x2e
 8009078:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800907a:	232d      	movs	r3, #45	@ 0x2d
 800907c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800907e:	2330      	movs	r3, #48	@ 0x30
 8009080:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8009082:	232f      	movs	r3, #47	@ 0x2f
 8009084:	753b      	strb	r3, [r7, #20]
      break;
 8009086:	e012      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8009088:	2334      	movs	r3, #52	@ 0x34
 800908a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 800908c:	2333      	movs	r3, #51	@ 0x33
 800908e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8009090:	2336      	movs	r3, #54	@ 0x36
 8009092:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8009094:	2335      	movs	r3, #53	@ 0x35
 8009096:	753b      	strb	r3, [r7, #20]
      break;
 8009098:	e009      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800909a:	233a      	movs	r3, #58	@ 0x3a
 800909c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800909e:	2339      	movs	r3, #57	@ 0x39
 80090a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80090a2:	233c      	movs	r3, #60	@ 0x3c
 80090a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80090a6:	233b      	movs	r3, #59	@ 0x3b
 80090a8:	753b      	strb	r3, [r7, #20]
      break;
 80090aa:	e000      	b.n	80090ae <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80090ac:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80090ae:	89fb      	ldrh	r3, [r7, #14]
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	7dfa      	ldrb	r2, [r7, #23]
 80090b4:	4611      	mov	r1, r2
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fb04 	bl	80096c4 <TS_IO_Read>
 80090bc:	4603      	mov	r3, r0
 80090be:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80090c0:	7cfb      	ldrb	r3, [r7, #19]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b29      	ldr	r3, [pc, #164]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 80090c8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80090ca:	89fb      	ldrh	r3, [r7, #14]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	7dba      	ldrb	r2, [r7, #22]
 80090d0:	4611      	mov	r1, r2
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 faf6 	bl	80096c4 <TS_IO_Read>
 80090d8:	4603      	mov	r3, r0
 80090da:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80090dc:	7cfb      	ldrb	r3, [r7, #19]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	021b      	lsls	r3, r3, #8
 80090e2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80090e6:	b21a      	sxth	r2, r3
 80090e8:	4b20      	ldr	r3, [pc, #128]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 80090ea:	881b      	ldrh	r3, [r3, #0]
 80090ec:	b21b      	sxth	r3, r3
 80090ee:	4313      	orrs	r3, r2
 80090f0:	b21b      	sxth	r3, r3
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	4b1d      	ldr	r3, [pc, #116]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 80090f6:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80090f8:	4b1c      	ldr	r3, [pc, #112]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 80090fa:	881a      	ldrh	r2, [r3, #0]
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8009100:	89fb      	ldrh	r3, [r7, #14]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	7d7a      	ldrb	r2, [r7, #21]
 8009106:	4611      	mov	r1, r2
 8009108:	4618      	mov	r0, r3
 800910a:	f000 fadb 	bl	80096c4 <TS_IO_Read>
 800910e:	4603      	mov	r3, r0
 8009110:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8009112:	7cfb      	ldrb	r3, [r7, #19]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	4b14      	ldr	r3, [pc, #80]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 800911a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800911c:	89fb      	ldrh	r3, [r7, #14]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	7d3a      	ldrb	r2, [r7, #20]
 8009122:	4611      	mov	r1, r2
 8009124:	4618      	mov	r0, r3
 8009126:	f000 facd 	bl	80096c4 <TS_IO_Read>
 800912a:	4603      	mov	r3, r0
 800912c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800912e:	7cfb      	ldrb	r3, [r7, #19]
 8009130:	b2db      	uxtb	r3, r3
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009138:	b21a      	sxth	r2, r3
 800913a:	4b0c      	ldr	r3, [pc, #48]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b21b      	sxth	r3, r3
 8009140:	4313      	orrs	r3, r2
 8009142:	b21b      	sxth	r3, r3
 8009144:	b29a      	uxth	r2, r3
 8009146:	4b09      	ldr	r3, [pc, #36]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 8009148:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800914a:	4b08      	ldr	r3, [pc, #32]	@ (800916c <ft5336_TS_GetXY+0x1dc>)
 800914c:	881a      	ldrh	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8009152:	4b05      	ldr	r3, [pc, #20]	@ (8009168 <ft5336_TS_GetXY+0x1d8>)
 8009154:	789b      	ldrb	r3, [r3, #2]
 8009156:	3301      	adds	r3, #1
 8009158:	b2da      	uxtb	r2, r3
 800915a:	4b03      	ldr	r3, [pc, #12]	@ (8009168 <ft5336_TS_GetXY+0x1d8>)
 800915c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800915e:	bf00      	nop
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200008b4 	.word	0x200008b4
 800916c:	200008b8 	.word	0x200008b8

08009170 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	4603      	mov	r3, r0
 8009178:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800917e:	2301      	movs	r3, #1
 8009180:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8009182:	88fb      	ldrh	r3, [r7, #6]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	7bfa      	ldrb	r2, [r7, #15]
 8009188:	21a4      	movs	r1, #164	@ 0xa4
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fa80 	bl	8009690 <TS_IO_Write>
}
 8009190:	bf00      	nop
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80091a6:	2300      	movs	r3, #0
 80091a8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	7bfa      	ldrb	r2, [r7, #15]
 80091b0:	21a4      	movs	r1, #164	@ 0xa4
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fa6c 	bl	8009690 <TS_IO_Write>
}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	4603      	mov	r3, r0
 80091c8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	370c      	adds	r7, #12
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr

080091d8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	4603      	mov	r3, r0
 80091e0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b084      	sub	sp, #16
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	4603      	mov	r3, r0
 80091f6:	6039      	str	r1, [r7, #0]
 80091f8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80091fe:	88fb      	ldrh	r3, [r7, #6]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2101      	movs	r1, #1
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fa5d 	bl	80096c4 <TS_IO_Read>
 800920a:	4603      	mov	r3, r0
 800920c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	b2db      	uxtb	r3, r3
 8009212:	461a      	mov	r2, r3
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	601a      	str	r2, [r3, #0]
}
 8009218:	bf00      	nop
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60b9      	str	r1, [r7, #8]
 8009228:	607a      	str	r2, [r7, #4]
 800922a:	603b      	str	r3, [r7, #0]
 800922c:	4603      	mov	r3, r0
 800922e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8009238:	2300      	movs	r3, #0
 800923a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8009240:	4b4d      	ldr	r3, [pc, #308]	@ (8009378 <ft5336_TS_GetTouchInfo+0x158>)
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	461a      	mov	r2, r3
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4293      	cmp	r3, r2
 800924a:	f080 8090 	bcs.w	800936e <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	2b09      	cmp	r3, #9
 8009252:	d85d      	bhi.n	8009310 <ft5336_TS_GetTouchInfo+0xf0>
 8009254:	a201      	add	r2, pc, #4	@ (adr r2, 800925c <ft5336_TS_GetTouchInfo+0x3c>)
 8009256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800925a:	bf00      	nop
 800925c:	08009285 	.word	0x08009285
 8009260:	08009293 	.word	0x08009293
 8009264:	080092a1 	.word	0x080092a1
 8009268:	080092af 	.word	0x080092af
 800926c:	080092bd 	.word	0x080092bd
 8009270:	080092cb 	.word	0x080092cb
 8009274:	080092d9 	.word	0x080092d9
 8009278:	080092e7 	.word	0x080092e7
 800927c:	080092f5 	.word	0x080092f5
 8009280:	08009303 	.word	0x08009303
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8009284:	2303      	movs	r3, #3
 8009286:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8009288:	2307      	movs	r3, #7
 800928a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 800928c:	2308      	movs	r3, #8
 800928e:	757b      	strb	r3, [r7, #21]
      break;
 8009290:	e03f      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8009292:	2309      	movs	r3, #9
 8009294:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8009296:	230d      	movs	r3, #13
 8009298:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800929a:	230e      	movs	r3, #14
 800929c:	757b      	strb	r3, [r7, #21]
      break;
 800929e:	e038      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80092a0:	230f      	movs	r3, #15
 80092a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80092a4:	2313      	movs	r3, #19
 80092a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80092a8:	2314      	movs	r3, #20
 80092aa:	757b      	strb	r3, [r7, #21]
      break;
 80092ac:	e031      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80092ae:	2315      	movs	r3, #21
 80092b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80092b2:	2319      	movs	r3, #25
 80092b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80092b6:	231a      	movs	r3, #26
 80092b8:	757b      	strb	r3, [r7, #21]
      break;
 80092ba:	e02a      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80092bc:	231b      	movs	r3, #27
 80092be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80092c0:	231f      	movs	r3, #31
 80092c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80092c4:	2320      	movs	r3, #32
 80092c6:	757b      	strb	r3, [r7, #21]
      break;
 80092c8:	e023      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80092ca:	2321      	movs	r3, #33	@ 0x21
 80092cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80092ce:	2325      	movs	r3, #37	@ 0x25
 80092d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80092d2:	2326      	movs	r3, #38	@ 0x26
 80092d4:	757b      	strb	r3, [r7, #21]
      break;
 80092d6:	e01c      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80092d8:	2327      	movs	r3, #39	@ 0x27
 80092da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80092dc:	232b      	movs	r3, #43	@ 0x2b
 80092de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80092e0:	232c      	movs	r3, #44	@ 0x2c
 80092e2:	757b      	strb	r3, [r7, #21]
      break;
 80092e4:	e015      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80092e6:	232d      	movs	r3, #45	@ 0x2d
 80092e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80092ea:	2331      	movs	r3, #49	@ 0x31
 80092ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80092ee:	2332      	movs	r3, #50	@ 0x32
 80092f0:	757b      	strb	r3, [r7, #21]
      break;
 80092f2:	e00e      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80092f4:	2333      	movs	r3, #51	@ 0x33
 80092f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80092f8:	2337      	movs	r3, #55	@ 0x37
 80092fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80092fc:	2338      	movs	r3, #56	@ 0x38
 80092fe:	757b      	strb	r3, [r7, #21]
      break;
 8009300:	e007      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8009302:	2339      	movs	r3, #57	@ 0x39
 8009304:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8009306:	233d      	movs	r3, #61	@ 0x3d
 8009308:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800930a:	233e      	movs	r3, #62	@ 0x3e
 800930c:	757b      	strb	r3, [r7, #21]
      break;
 800930e:	e000      	b.n	8009312 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8009310:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8009312:	89fb      	ldrh	r3, [r7, #14]
 8009314:	b2db      	uxtb	r3, r3
 8009316:	7dfa      	ldrb	r2, [r7, #23]
 8009318:	4611      	mov	r1, r2
 800931a:	4618      	mov	r0, r3
 800931c:	f000 f9d2 	bl	80096c4 <TS_IO_Read>
 8009320:	4603      	mov	r3, r0
 8009322:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8009324:	7d3b      	ldrb	r3, [r7, #20]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	119b      	asrs	r3, r3, #6
 800932a:	f003 0203 	and.w	r2, r3, #3
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8009332:	89fb      	ldrh	r3, [r7, #14]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	7dba      	ldrb	r2, [r7, #22]
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f000 f9c2 	bl	80096c4 <TS_IO_Read>
 8009340:	4603      	mov	r3, r0
 8009342:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8009344:	7d3b      	ldrb	r3, [r7, #20]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800934e:	89fb      	ldrh	r3, [r7, #14]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	7d7a      	ldrb	r2, [r7, #21]
 8009354:	4611      	mov	r1, r2
 8009356:	4618      	mov	r0, r3
 8009358:	f000 f9b4 	bl	80096c4 <TS_IO_Read>
 800935c:	4603      	mov	r3, r0
 800935e:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8009360:	7d3b      	ldrb	r3, [r7, #20]
 8009362:	b2db      	uxtb	r3, r3
 8009364:	111b      	asrs	r3, r3, #4
 8009366:	f003 0204 	and.w	r2, r3, #4
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800936e:	bf00      	nop
 8009370:	3718      	adds	r7, #24
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	200008b4 	.word	0x200008b4

0800937c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800937c:	b480      	push	{r7}
 800937e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8009380:	4b03      	ldr	r3, [pc, #12]	@ (8009390 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8009382:	781b      	ldrb	r3, [r3, #0]
}
 8009384:	4618      	mov	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	200008b4 	.word	0x200008b4

08009394 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8009398:	f7ff fff0 	bl	800937c <ft5336_Get_I2C_InitializedStatus>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80093a2:	f000 f96b 	bl	800967c <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80093a6:	4b02      	ldr	r3, [pc, #8]	@ (80093b0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80093a8:	2201      	movs	r2, #1
 80093aa:	701a      	strb	r2, [r3, #0]
  }
}
 80093ac:	bf00      	nop
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	200008b4 	.word	0x200008b4

080093b4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	4603      	mov	r3, r0
 80093bc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80093be:	2300      	movs	r3, #0
 80093c0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80093c2:	68fb      	ldr	r3, [r7, #12]
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3714      	adds	r7, #20
 80093c8:	46bd      	mov	sp, r7
 80093ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ce:	4770      	bx	lr

080093d0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b08c      	sub	sp, #48	@ 0x30
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	4a51      	ldr	r2, [pc, #324]	@ (8009520 <I2Cx_MspInit+0x150>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d14d      	bne.n	800947c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80093e0:	4b50      	ldr	r3, [pc, #320]	@ (8009524 <I2Cx_MspInit+0x154>)
 80093e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e4:	4a4f      	ldr	r2, [pc, #316]	@ (8009524 <I2Cx_MspInit+0x154>)
 80093e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80093ec:	4b4d      	ldr	r3, [pc, #308]	@ (8009524 <I2Cx_MspInit+0x154>)
 80093ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80093fc:	2312      	movs	r3, #18
 80093fe:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8009400:	2300      	movs	r3, #0
 8009402:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8009404:	2302      	movs	r3, #2
 8009406:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8009408:	2304      	movs	r3, #4
 800940a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800940c:	f107 031c 	add.w	r3, r7, #28
 8009410:	4619      	mov	r1, r3
 8009412:	4845      	ldr	r0, [pc, #276]	@ (8009528 <I2Cx_MspInit+0x158>)
 8009414:	f7fb f8be 	bl	8004594 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8009418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800941c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800941e:	f107 031c 	add.w	r3, r7, #28
 8009422:	4619      	mov	r1, r3
 8009424:	4840      	ldr	r0, [pc, #256]	@ (8009528 <I2Cx_MspInit+0x158>)
 8009426:	f7fb f8b5 	bl	8004594 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800942a:	4b3e      	ldr	r3, [pc, #248]	@ (8009524 <I2Cx_MspInit+0x154>)
 800942c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800942e:	4a3d      	ldr	r2, [pc, #244]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009430:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009434:	6413      	str	r3, [r2, #64]	@ 0x40
 8009436:	4b3b      	ldr	r3, [pc, #236]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800943a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800943e:	617b      	str	r3, [r7, #20]
 8009440:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8009442:	4b38      	ldr	r3, [pc, #224]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	4a37      	ldr	r2, [pc, #220]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009448:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800944c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800944e:	4b35      	ldr	r3, [pc, #212]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	4a34      	ldr	r2, [pc, #208]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009454:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009458:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800945a:	2200      	movs	r2, #0
 800945c:	210f      	movs	r1, #15
 800945e:	2048      	movs	r0, #72	@ 0x48
 8009460:	f7fa f99b 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8009464:	2048      	movs	r0, #72	@ 0x48
 8009466:	f7fa f9b4 	bl	80037d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800946a:	2200      	movs	r2, #0
 800946c:	210f      	movs	r1, #15
 800946e:	2049      	movs	r0, #73	@ 0x49
 8009470:	f7fa f993 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8009474:	2049      	movs	r0, #73	@ 0x49
 8009476:	f7fa f9ac 	bl	80037d2 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800947a:	e04d      	b.n	8009518 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800947c:	4b29      	ldr	r3, [pc, #164]	@ (8009524 <I2Cx_MspInit+0x154>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009480:	4a28      	ldr	r2, [pc, #160]	@ (8009524 <I2Cx_MspInit+0x154>)
 8009482:	f043 0302 	orr.w	r3, r3, #2
 8009486:	6313      	str	r3, [r2, #48]	@ 0x30
 8009488:	4b26      	ldr	r3, [pc, #152]	@ (8009524 <I2Cx_MspInit+0x154>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	613b      	str	r3, [r7, #16]
 8009492:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8009494:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009498:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800949a:	2312      	movs	r3, #18
 800949c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800949e:	2300      	movs	r3, #0
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80094a2:	2302      	movs	r3, #2
 80094a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80094a6:	2304      	movs	r3, #4
 80094a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80094aa:	f107 031c 	add.w	r3, r7, #28
 80094ae:	4619      	mov	r1, r3
 80094b0:	481e      	ldr	r0, [pc, #120]	@ (800952c <I2Cx_MspInit+0x15c>)
 80094b2:	f7fb f86f 	bl	8004594 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80094b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80094ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80094bc:	f107 031c 	add.w	r3, r7, #28
 80094c0:	4619      	mov	r1, r3
 80094c2:	481a      	ldr	r0, [pc, #104]	@ (800952c <I2Cx_MspInit+0x15c>)
 80094c4:	f7fb f866 	bl	8004594 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80094c8:	4b16      	ldr	r3, [pc, #88]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094cc:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80094d4:	4b13      	ldr	r3, [pc, #76]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80094e0:	4b10      	ldr	r3, [pc, #64]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	4a0f      	ldr	r2, [pc, #60]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094ea:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80094ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094ee:	6a1b      	ldr	r3, [r3, #32]
 80094f0:	4a0c      	ldr	r2, [pc, #48]	@ (8009524 <I2Cx_MspInit+0x154>)
 80094f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094f6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80094f8:	2200      	movs	r2, #0
 80094fa:	210f      	movs	r1, #15
 80094fc:	201f      	movs	r0, #31
 80094fe:	f7fa f94c 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8009502:	201f      	movs	r0, #31
 8009504:	f7fa f965 	bl	80037d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	210f      	movs	r1, #15
 800950c:	2020      	movs	r0, #32
 800950e:	f7fa f944 	bl	800379a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8009512:	2020      	movs	r0, #32
 8009514:	f7fa f95d 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 8009518:	bf00      	nop
 800951a:	3730      	adds	r7, #48	@ 0x30
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	200008bc 	.word	0x200008bc
 8009524:	40023800 	.word	0x40023800
 8009528:	40021c00 	.word	0x40021c00
 800952c:	40020400 	.word	0x40020400

08009530 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7fb fd19 	bl	8004f70 <HAL_I2C_GetState>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d125      	bne.n	8009590 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a14      	ldr	r2, [pc, #80]	@ (8009598 <I2Cx_Init+0x68>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d103      	bne.n	8009554 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a13      	ldr	r2, [pc, #76]	@ (800959c <I2Cx_Init+0x6c>)
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e002      	b.n	800955a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a12      	ldr	r2, [pc, #72]	@ (80095a0 <I2Cx_Init+0x70>)
 8009558:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a11      	ldr	r2, [pc, #68]	@ (80095a4 <I2Cx_Init+0x74>)
 800955e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7ff ff23 	bl	80093d0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fb f9e2 	bl	8004954 <HAL_I2C_Init>
  }
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	200008bc 	.word	0x200008bc
 800959c:	40005c00 	.word	0x40005c00
 80095a0:	40005400 	.word	0x40005400
 80095a4:	40912732 	.word	0x40912732

080095a8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	@ 0x28
 80095ac:	af04      	add	r7, sp, #16
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	461a      	mov	r2, r3
 80095b6:	4603      	mov	r3, r0
 80095b8:	72fb      	strb	r3, [r7, #11]
 80095ba:	460b      	mov	r3, r1
 80095bc:	813b      	strh	r3, [r7, #8]
 80095be:	4613      	mov	r3, r2
 80095c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80095c2:	2300      	movs	r3, #0
 80095c4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80095c6:	7afb      	ldrb	r3, [r7, #11]
 80095c8:	b299      	uxth	r1, r3
 80095ca:	88f8      	ldrh	r0, [r7, #6]
 80095cc:	893a      	ldrh	r2, [r7, #8]
 80095ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80095d2:	9302      	str	r3, [sp, #8]
 80095d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095d6:	9301      	str	r3, [sp, #4]
 80095d8:	6a3b      	ldr	r3, [r7, #32]
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4603      	mov	r3, r0
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	f7fb fbac 	bl	8004d3c <HAL_I2C_Mem_Read>
 80095e4:	4603      	mov	r3, r0
 80095e6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80095e8:	7dfb      	ldrb	r3, [r7, #23]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80095ee:	7afb      	ldrb	r3, [r7, #11]
 80095f0:	4619      	mov	r1, r3
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 f832 	bl	800965c <I2Cx_Error>
  }
  return status;    
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b08a      	sub	sp, #40	@ 0x28
 8009606:	af04      	add	r7, sp, #16
 8009608:	60f8      	str	r0, [r7, #12]
 800960a:	4608      	mov	r0, r1
 800960c:	4611      	mov	r1, r2
 800960e:	461a      	mov	r2, r3
 8009610:	4603      	mov	r3, r0
 8009612:	72fb      	strb	r3, [r7, #11]
 8009614:	460b      	mov	r3, r1
 8009616:	813b      	strh	r3, [r7, #8]
 8009618:	4613      	mov	r3, r2
 800961a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009620:	7afb      	ldrb	r3, [r7, #11]
 8009622:	b299      	uxth	r1, r3
 8009624:	88f8      	ldrh	r0, [r7, #6]
 8009626:	893a      	ldrh	r2, [r7, #8]
 8009628:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800962c:	9302      	str	r3, [sp, #8]
 800962e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	6a3b      	ldr	r3, [r7, #32]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	4603      	mov	r3, r0
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f7fb fa6b 	bl	8004b14 <HAL_I2C_Mem_Write>
 800963e:	4603      	mov	r3, r0
 8009640:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d004      	beq.n	8009652 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 f805 	bl	800965c <I2Cx_Error>
  }
  return status;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fb fa0f 	bl	8004a8c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff ff5e 	bl	8009530 <I2Cx_Init>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8009680:	4802      	ldr	r0, [pc, #8]	@ (800968c <TS_IO_Init+0x10>)
 8009682:	f7ff ff55 	bl	8009530 <I2Cx_Init>
}
 8009686:	bf00      	nop
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	200008bc 	.word	0x200008bc

08009690 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af02      	add	r7, sp, #8
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
 800969a:	460b      	mov	r3, r1
 800969c:	71bb      	strb	r3, [r7, #6]
 800969e:	4613      	mov	r3, r2
 80096a0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80096a2:	79bb      	ldrb	r3, [r7, #6]
 80096a4:	b29a      	uxth	r2, r3
 80096a6:	79f9      	ldrb	r1, [r7, #7]
 80096a8:	2301      	movs	r3, #1
 80096aa:	9301      	str	r3, [sp, #4]
 80096ac:	1d7b      	adds	r3, r7, #5
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2301      	movs	r3, #1
 80096b2:	4803      	ldr	r0, [pc, #12]	@ (80096c0 <TS_IO_Write+0x30>)
 80096b4:	f7ff ffa5 	bl	8009602 <I2Cx_WriteMultiple>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	200008bc 	.word	0x200008bc

080096c4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	4603      	mov	r3, r0
 80096cc:	460a      	mov	r2, r1
 80096ce:	71fb      	strb	r3, [r7, #7]
 80096d0:	4613      	mov	r3, r2
 80096d2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80096d8:	79bb      	ldrb	r3, [r7, #6]
 80096da:	b29a      	uxth	r2, r3
 80096dc:	79f9      	ldrb	r1, [r7, #7]
 80096de:	2301      	movs	r3, #1
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f107 030f 	add.w	r3, r7, #15
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	2301      	movs	r3, #1
 80096ea:	4804      	ldr	r0, [pc, #16]	@ (80096fc <TS_IO_Read+0x38>)
 80096ec:	f7ff ff5c 	bl	80095a8 <I2Cx_ReadMultiple>

  return read_value;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	200008bc 	.word	0x200008bc

08009700 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7f9 faa3 	bl	8002c54 <HAL_Delay>
}
 800970e:	bf00      	nop
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
	...

08009718 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8009718:	b580      	push	{r7, lr}
 800971a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800971c:	4b31      	ldr	r3, [pc, #196]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800971e:	2228      	movs	r2, #40	@ 0x28
 8009720:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8009722:	4b30      	ldr	r3, [pc, #192]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009724:	2209      	movs	r2, #9
 8009726:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8009728:	4b2e      	ldr	r3, [pc, #184]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800972a:	2235      	movs	r2, #53	@ 0x35
 800972c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800972e:	4b2d      	ldr	r3, [pc, #180]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009730:	220b      	movs	r2, #11
 8009732:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8009734:	4b2b      	ldr	r3, [pc, #172]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009736:	f240 121b 	movw	r2, #283	@ 0x11b
 800973a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800973c:	4b29      	ldr	r3, [pc, #164]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800973e:	f240 2215 	movw	r2, #533	@ 0x215
 8009742:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8009744:	4b27      	ldr	r3, [pc, #156]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009746:	f240 121d 	movw	r2, #285	@ 0x11d
 800974a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800974c:	4b25      	ldr	r3, [pc, #148]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800974e:	f240 2235 	movw	r2, #565	@ 0x235
 8009752:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8009754:	2100      	movs	r1, #0
 8009756:	4823      	ldr	r0, [pc, #140]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009758:	f000 fc02 	bl	8009f60 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800975c:	4b21      	ldr	r3, [pc, #132]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800975e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009762:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8009764:	4b1f      	ldr	r3, [pc, #124]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009766:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800976a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800976c:	4b1d      	ldr	r3, [pc, #116]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8009774:	4b1b      	ldr	r3, [pc, #108]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009776:	2200      	movs	r2, #0
 8009778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800977c:	4b19      	ldr	r3, [pc, #100]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009784:	4b17      	ldr	r3, [pc, #92]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009786:	2200      	movs	r2, #0
 8009788:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800978a:	4b16      	ldr	r3, [pc, #88]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800978c:	2200      	movs	r2, #0
 800978e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8009790:	4b14      	ldr	r3, [pc, #80]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009792:	2200      	movs	r2, #0
 8009794:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009796:	4b13      	ldr	r3, [pc, #76]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 8009798:	2200      	movs	r2, #0
 800979a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800979c:	4b11      	ldr	r3, [pc, #68]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 800979e:	4a12      	ldr	r2, [pc, #72]	@ (80097e8 <BSP_LCD_Init+0xd0>)
 80097a0:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80097a2:	4810      	ldr	r0, [pc, #64]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 80097a4:	f7fc f884 	bl	80058b0 <HAL_LTDC_GetState>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d103      	bne.n	80097b6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80097ae:	2100      	movs	r1, #0
 80097b0:	480c      	ldr	r0, [pc, #48]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 80097b2:	f000 fafb 	bl	8009dac <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80097b6:	480b      	ldr	r0, [pc, #44]	@ (80097e4 <BSP_LCD_Init+0xcc>)
 80097b8:	f7fb feaa 	bl	8005510 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80097bc:	2201      	movs	r2, #1
 80097be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80097c2:	480a      	ldr	r0, [pc, #40]	@ (80097ec <BSP_LCD_Init+0xd4>)
 80097c4:	f7fb f892 	bl	80048ec <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80097c8:	2201      	movs	r2, #1
 80097ca:	2108      	movs	r1, #8
 80097cc:	4808      	ldr	r0, [pc, #32]	@ (80097f0 <BSP_LCD_Init+0xd8>)
 80097ce:	f7fb f88d 	bl	80048ec <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80097d2:	f000 fce5 	bl	800a1a0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80097d6:	4807      	ldr	r0, [pc, #28]	@ (80097f4 <BSP_LCD_Init+0xdc>)
 80097d8:	f000 f8d8 	bl	800998c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20000910 	.word	0x20000910
 80097e8:	40016800 	.word	0x40016800
 80097ec:	40022000 	.word	0x40022000
 80097f0:	40022800 	.word	0x40022800
 80097f4:	2000001c 	.word	0x2000001c

080097f8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80097fc:	4b06      	ldr	r3, [pc, #24]	@ (8009818 <BSP_LCD_GetXSize+0x20>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a06      	ldr	r2, [pc, #24]	@ (800981c <BSP_LCD_GetXSize+0x24>)
 8009802:	2134      	movs	r1, #52	@ 0x34
 8009804:	fb01 f303 	mul.w	r3, r1, r3
 8009808:	4413      	add	r3, r2
 800980a:	3360      	adds	r3, #96	@ 0x60
 800980c:	681b      	ldr	r3, [r3, #0]
}
 800980e:	4618      	mov	r0, r3
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	200009f8 	.word	0x200009f8
 800981c:	20000910 	.word	0x20000910

08009820 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8009820:	b480      	push	{r7}
 8009822:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8009824:	4b06      	ldr	r3, [pc, #24]	@ (8009840 <BSP_LCD_GetYSize+0x20>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a06      	ldr	r2, [pc, #24]	@ (8009844 <BSP_LCD_GetYSize+0x24>)
 800982a:	2134      	movs	r1, #52	@ 0x34
 800982c:	fb01 f303 	mul.w	r3, r1, r3
 8009830:	4413      	add	r3, r2
 8009832:	3364      	adds	r3, #100	@ 0x64
 8009834:	681b      	ldr	r3, [r3, #0]
}
 8009836:	4618      	mov	r0, r3
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr
 8009840:	200009f8 	.word	0x200009f8
 8009844:	20000910 	.word	0x20000910

08009848 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8009848:	b580      	push	{r7, lr}
 800984a:	b090      	sub	sp, #64	@ 0x40
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8009858:	f7ff ffce 	bl	80097f8 <BSP_LCD_GetXSize>
 800985c:	4603      	mov	r3, r0
 800985e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8009864:	f7ff ffdc 	bl	8009820 <BSP_LCD_GetYSize>
 8009868:	4603      	mov	r3, r0
 800986a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8009874:	23ff      	movs	r3, #255	@ 0xff
 8009876:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8009878:	2300      	movs	r3, #0
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 800987c:	2300      	movs	r3, #0
 800987e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8009888:	2300      	movs	r3, #0
 800988a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800988e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009892:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009894:	2307      	movs	r3, #7
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8009898:	f7ff ffae 	bl	80097f8 <BSP_LCD_GetXSize>
 800989c:	4603      	mov	r3, r0
 800989e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80098a0:	f7ff ffbe 	bl	8009820 <BSP_LCD_GetYSize>
 80098a4:	4603      	mov	r3, r0
 80098a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	f107 030c 	add.w	r3, r7, #12
 80098ae:	4619      	mov	r1, r3
 80098b0:	4812      	ldr	r0, [pc, #72]	@ (80098fc <BSP_LCD_LayerDefaultInit+0xb4>)
 80098b2:	f7fb ffbf 	bl	8005834 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80098b6:	88fa      	ldrh	r2, [r7, #6]
 80098b8:	4911      	ldr	r1, [pc, #68]	@ (8009900 <BSP_LCD_LayerDefaultInit+0xb8>)
 80098ba:	4613      	mov	r3, r2
 80098bc:	005b      	lsls	r3, r3, #1
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	3304      	adds	r3, #4
 80098c6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80098cc:	88fa      	ldrh	r2, [r7, #6]
 80098ce:	490c      	ldr	r1, [pc, #48]	@ (8009900 <BSP_LCD_LayerDefaultInit+0xb8>)
 80098d0:	4613      	mov	r3, r2
 80098d2:	005b      	lsls	r3, r3, #1
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	3308      	adds	r3, #8
 80098dc:	4a09      	ldr	r2, [pc, #36]	@ (8009904 <BSP_LCD_LayerDefaultInit+0xbc>)
 80098de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80098e0:	88fa      	ldrh	r2, [r7, #6]
 80098e2:	4907      	ldr	r1, [pc, #28]	@ (8009900 <BSP_LCD_LayerDefaultInit+0xb8>)
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	440b      	add	r3, r1
 80098ee:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80098f2:	601a      	str	r2, [r3, #0]
}
 80098f4:	bf00      	nop
 80098f6:	3740      	adds	r7, #64	@ 0x40
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	20000910 	.word	0x20000910
 8009900:	200009fc 	.word	0x200009fc
 8009904:	2000001c 	.word	0x2000001c

08009908 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8009910:	4a04      	ldr	r2, [pc, #16]	@ (8009924 <BSP_LCD_SelectLayer+0x1c>)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6013      	str	r3, [r2, #0]
} 
 8009916:	bf00      	nop
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	200009f8 	.word	0x200009f8

08009928 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <BSP_LCD_SetTextColor+0x28>)
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	4907      	ldr	r1, [pc, #28]	@ (8009954 <BSP_LCD_SetTextColor+0x2c>)
 8009936:	4613      	mov	r3, r2
 8009938:	005b      	lsls	r3, r3, #1
 800993a:	4413      	add	r3, r2
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	440b      	add	r3, r1
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	200009f8 	.word	0x200009f8
 8009954:	200009fc 	.word	0x200009fc

08009958 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8009960:	4b08      	ldr	r3, [pc, #32]	@ (8009984 <BSP_LCD_SetBackColor+0x2c>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	4908      	ldr	r1, [pc, #32]	@ (8009988 <BSP_LCD_SetBackColor+0x30>)
 8009966:	4613      	mov	r3, r2
 8009968:	005b      	lsls	r3, r3, #1
 800996a:	4413      	add	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	440b      	add	r3, r1
 8009970:	3304      	adds	r3, #4
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	601a      	str	r2, [r3, #0]
}
 8009976:	bf00      	nop
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	200009f8 	.word	0x200009f8
 8009988:	200009fc 	.word	0x200009fc

0800998c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8009994:	4b08      	ldr	r3, [pc, #32]	@ (80099b8 <BSP_LCD_SetFont+0x2c>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	4908      	ldr	r1, [pc, #32]	@ (80099bc <BSP_LCD_SetFont+0x30>)
 800999a:	4613      	mov	r3, r2
 800999c:	005b      	lsls	r3, r3, #1
 800999e:	4413      	add	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	440b      	add	r3, r1
 80099a4:	3308      	adds	r3, #8
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	601a      	str	r2, [r3, #0]
}
 80099aa:	bf00      	nop
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
 80099b6:	bf00      	nop
 80099b8:	200009f8 	.word	0x200009f8
 80099bc:	200009fc 	.word	0x200009fc

080099c0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80099c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099c2:	b085      	sub	sp, #20
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80099c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009a08 <BSP_LCD_Clear+0x48>)
 80099ca:	681c      	ldr	r4, [r3, #0]
 80099cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a08 <BSP_LCD_Clear+0x48>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a0e      	ldr	r2, [pc, #56]	@ (8009a0c <BSP_LCD_Clear+0x4c>)
 80099d2:	2134      	movs	r1, #52	@ 0x34
 80099d4:	fb01 f303 	mul.w	r3, r1, r3
 80099d8:	4413      	add	r3, r2
 80099da:	335c      	adds	r3, #92	@ 0x5c
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	461e      	mov	r6, r3
 80099e0:	f7ff ff0a 	bl	80097f8 <BSP_LCD_GetXSize>
 80099e4:	4605      	mov	r5, r0
 80099e6:	f7ff ff1b 	bl	8009820 <BSP_LCD_GetYSize>
 80099ea:	4602      	mov	r2, r0
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	9301      	str	r3, [sp, #4]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9300      	str	r3, [sp, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	462a      	mov	r2, r5
 80099f8:	4631      	mov	r1, r6
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fb84 	bl	800a108 <LL_FillBuffer>
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a08:	200009f8 	.word	0x200009f8
 8009a0c:	20000910 	.word	0x20000910

08009a10 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	80fb      	strh	r3, [r7, #6]
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	80bb      	strh	r3, [r7, #4]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009a22:	4b1b      	ldr	r3, [pc, #108]	@ (8009a90 <BSP_LCD_DisplayChar+0x80>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	491b      	ldr	r1, [pc, #108]	@ (8009a94 <BSP_LCD_DisplayChar+0x84>)
 8009a28:	4613      	mov	r3, r2
 8009a2a:	005b      	lsls	r3, r3, #1
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	440b      	add	r3, r1
 8009a32:	3308      	adds	r3, #8
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	6819      	ldr	r1, [r3, #0]
 8009a38:	78fb      	ldrb	r3, [r7, #3]
 8009a3a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009a3e:	4b14      	ldr	r3, [pc, #80]	@ (8009a90 <BSP_LCD_DisplayChar+0x80>)
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4c14      	ldr	r4, [pc, #80]	@ (8009a94 <BSP_LCD_DisplayChar+0x84>)
 8009a44:	4613      	mov	r3, r2
 8009a46:	005b      	lsls	r3, r3, #1
 8009a48:	4413      	add	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4423      	add	r3, r4
 8009a4e:	3308      	adds	r3, #8
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009a54:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8009a58:	4b0d      	ldr	r3, [pc, #52]	@ (8009a90 <BSP_LCD_DisplayChar+0x80>)
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009a94 <BSP_LCD_DisplayChar+0x84>)
 8009a5e:	4613      	mov	r3, r2
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4423      	add	r3, r4
 8009a68:	3308      	adds	r3, #8
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	889b      	ldrh	r3, [r3, #4]
 8009a6e:	3307      	adds	r3, #7
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	da00      	bge.n	8009a76 <BSP_LCD_DisplayChar+0x66>
 8009a74:	3307      	adds	r3, #7
 8009a76:	10db      	asrs	r3, r3, #3
 8009a78:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8009a7c:	18ca      	adds	r2, r1, r3
 8009a7e:	88b9      	ldrh	r1, [r7, #4]
 8009a80:	88fb      	ldrh	r3, [r7, #6]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fa88 	bl	8009f98 <DrawChar>
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}
 8009a90:	200009f8 	.word	0x200009f8
 8009a94:	200009fc 	.word	0x200009fc

08009a98 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8009a98:	b5b0      	push	{r4, r5, r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60ba      	str	r2, [r7, #8]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	81fb      	strh	r3, [r7, #14]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	81bb      	strh	r3, [r7, #12]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	83fb      	strh	r3, [r7, #30]
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	2300      	movs	r3, #0
 8009abc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8009ac2:	e002      	b.n	8009aca <BSP_LCD_DisplayStringAt+0x32>
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	617a      	str	r2, [r7, #20]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1f6      	bne.n	8009ac4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8009ad6:	f7ff fe8f 	bl	80097f8 <BSP_LCD_GetXSize>
 8009ada:	4601      	mov	r1, r0
 8009adc:	4b50      	ldr	r3, [pc, #320]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	4850      	ldr	r0, [pc, #320]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	4403      	add	r3, r0
 8009aec:	3308      	adds	r3, #8
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	889b      	ldrh	r3, [r3, #4]
 8009af2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009af6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8009af8:	79fb      	ldrb	r3, [r7, #7]
 8009afa:	2b03      	cmp	r3, #3
 8009afc:	d01c      	beq.n	8009b38 <BSP_LCD_DisplayStringAt+0xa0>
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	dc33      	bgt.n	8009b6a <BSP_LCD_DisplayStringAt+0xd2>
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d002      	beq.n	8009b0c <BSP_LCD_DisplayStringAt+0x74>
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d019      	beq.n	8009b3e <BSP_LCD_DisplayStringAt+0xa6>
 8009b0a:	e02e      	b.n	8009b6a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	1ad1      	subs	r1, r2, r3
 8009b12:	4b43      	ldr	r3, [pc, #268]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	4843      	ldr	r0, [pc, #268]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009b18:	4613      	mov	r3, r2
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4403      	add	r3, r0
 8009b22:	3308      	adds	r3, #8
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	889b      	ldrh	r3, [r3, #4]
 8009b28:	fb01 f303 	mul.w	r3, r1, r3
 8009b2c:	085b      	lsrs	r3, r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	89fb      	ldrh	r3, [r7, #14]
 8009b32:	4413      	add	r3, r2
 8009b34:	83fb      	strh	r3, [r7, #30]
      break;
 8009b36:	e01b      	b.n	8009b70 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8009b38:	89fb      	ldrh	r3, [r7, #14]
 8009b3a:	83fb      	strh	r3, [r7, #30]
      break;
 8009b3c:	e018      	b.n	8009b70 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	1ad3      	subs	r3, r2, r3
 8009b44:	b299      	uxth	r1, r3
 8009b46:	4b36      	ldr	r3, [pc, #216]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	4836      	ldr	r0, [pc, #216]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4403      	add	r3, r0
 8009b56:	3308      	adds	r3, #8
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	889b      	ldrh	r3, [r3, #4]
 8009b5c:	fb11 f303 	smulbb	r3, r1, r3
 8009b60:	b29a      	uxth	r2, r3
 8009b62:	89fb      	ldrh	r3, [r7, #14]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	83fb      	strh	r3, [r7, #30]
      break;
 8009b68:	e002      	b.n	8009b70 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8009b6a:	89fb      	ldrh	r3, [r7, #14]
 8009b6c:	83fb      	strh	r3, [r7, #30]
      break;
 8009b6e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8009b70:	8bfb      	ldrh	r3, [r7, #30]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <BSP_LCD_DisplayStringAt+0xe6>
 8009b76:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	da1d      	bge.n	8009bba <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009b82:	e01a      	b.n	8009bba <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	781a      	ldrb	r2, [r3, #0]
 8009b88:	89b9      	ldrh	r1, [r7, #12]
 8009b8a:	8bfb      	ldrh	r3, [r7, #30]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff ff3f 	bl	8009a10 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8009b92:	4b23      	ldr	r3, [pc, #140]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	4923      	ldr	r1, [pc, #140]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009b98:	4613      	mov	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4413      	add	r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3308      	adds	r3, #8
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	889a      	ldrh	r2, [r3, #4]
 8009ba8:	8bfb      	ldrh	r3, [r7, #30]
 8009baa:	4413      	add	r3, r2
 8009bac:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	60bb      	str	r3, [r7, #8]
    i++;
 8009bb4:	8bbb      	ldrh	r3, [r7, #28]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2301      	movne	r3, #1
 8009bc4:	2300      	moveq	r3, #0
 8009bc6:	b2dc      	uxtb	r4, r3
 8009bc8:	f7ff fe16 	bl	80097f8 <BSP_LCD_GetXSize>
 8009bcc:	8bb9      	ldrh	r1, [r7, #28]
 8009bce:	4b14      	ldr	r3, [pc, #80]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	4d14      	ldr	r5, [pc, #80]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	005b      	lsls	r3, r3, #1
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	442b      	add	r3, r5
 8009bde:	3308      	adds	r3, #8
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	889b      	ldrh	r3, [r3, #4]
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	1ac3      	subs	r3, r0, r3
 8009bea:	b299      	uxth	r1, r3
 8009bec:	4b0c      	ldr	r3, [pc, #48]	@ (8009c20 <BSP_LCD_DisplayStringAt+0x188>)
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	480c      	ldr	r0, [pc, #48]	@ (8009c24 <BSP_LCD_DisplayStringAt+0x18c>)
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4403      	add	r3, r0
 8009bfc:	3308      	adds	r3, #8
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	889b      	ldrh	r3, [r3, #4]
 8009c02:	4299      	cmp	r1, r3
 8009c04:	bf2c      	ite	cs
 8009c06:	2301      	movcs	r3, #1
 8009c08:	2300      	movcc	r3, #0
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	4023      	ands	r3, r4
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1b7      	bne.n	8009b84 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8009c14:	bf00      	nop
 8009c16:	bf00      	nop
 8009c18:	3720      	adds	r7, #32
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200009f8 	.word	0x200009f8
 8009c24:	200009fc 	.word	0x200009fc

08009c28 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8009c28:	b5b0      	push	{r4, r5, r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	603a      	str	r2, [r7, #0]
 8009c32:	80fb      	strh	r3, [r7, #6]
 8009c34:	460b      	mov	r3, r1
 8009c36:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8009c38:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb0 <BSP_LCD_DrawPixel+0x88>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb4 <BSP_LCD_DrawPixel+0x8c>)
 8009c3e:	2134      	movs	r1, #52	@ 0x34
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	4413      	add	r3, r2
 8009c46:	3348      	adds	r3, #72	@ 0x48
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d116      	bne.n	8009c7c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8009c4e:	4b18      	ldr	r3, [pc, #96]	@ (8009cb0 <BSP_LCD_DrawPixel+0x88>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a18      	ldr	r2, [pc, #96]	@ (8009cb4 <BSP_LCD_DrawPixel+0x8c>)
 8009c54:	2134      	movs	r1, #52	@ 0x34
 8009c56:	fb01 f303 	mul.w	r3, r1, r3
 8009c5a:	4413      	add	r3, r2
 8009c5c:	335c      	adds	r3, #92	@ 0x5c
 8009c5e:	681c      	ldr	r4, [r3, #0]
 8009c60:	88bd      	ldrh	r5, [r7, #4]
 8009c62:	f7ff fdc9 	bl	80097f8 <BSP_LCD_GetXSize>
 8009c66:	4603      	mov	r3, r0
 8009c68:	fb03 f205 	mul.w	r2, r3, r5
 8009c6c:	88fb      	ldrh	r3, [r7, #6]
 8009c6e:	4413      	add	r3, r2
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	4423      	add	r3, r4
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	b292      	uxth	r2, r2
 8009c78:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8009c7a:	e015      	b.n	8009ca8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8009c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb0 <BSP_LCD_DrawPixel+0x88>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a0c      	ldr	r2, [pc, #48]	@ (8009cb4 <BSP_LCD_DrawPixel+0x8c>)
 8009c82:	2134      	movs	r1, #52	@ 0x34
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	4413      	add	r3, r2
 8009c8a:	335c      	adds	r3, #92	@ 0x5c
 8009c8c:	681c      	ldr	r4, [r3, #0]
 8009c8e:	88bd      	ldrh	r5, [r7, #4]
 8009c90:	f7ff fdb2 	bl	80097f8 <BSP_LCD_GetXSize>
 8009c94:	4603      	mov	r3, r0
 8009c96:	fb03 f205 	mul.w	r2, r3, r5
 8009c9a:	88fb      	ldrh	r3, [r7, #6]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4423      	add	r3, r4
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	6013      	str	r3, [r2, #0]
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bdb0      	pop	{r4, r5, r7, pc}
 8009cb0:	200009f8 	.word	0x200009f8
 8009cb4:	20000910 	.word	0x20000910

08009cb8 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8009cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cbc:	b086      	sub	sp, #24
 8009cbe:	af02      	add	r7, sp, #8
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	4608      	mov	r0, r1
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4623      	mov	r3, r4
 8009cca:	80fb      	strh	r3, [r7, #6]
 8009ccc:	4603      	mov	r3, r0
 8009cce:	80bb      	strh	r3, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	807b      	strh	r3, [r7, #2]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8009cdc:	4b30      	ldr	r3, [pc, #192]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	4930      	ldr	r1, [pc, #192]	@ (8009da4 <BSP_LCD_FillRect+0xec>)
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	440b      	add	r3, r1
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fe1a 	bl	8009928 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8009cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8009da8 <BSP_LCD_FillRect+0xf0>)
 8009cfa:	2134      	movs	r1, #52	@ 0x34
 8009cfc:	fb01 f303 	mul.w	r3, r1, r3
 8009d00:	4413      	add	r3, r2
 8009d02:	3348      	adds	r3, #72	@ 0x48
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d114      	bne.n	8009d34 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8009d0a:	4b25      	ldr	r3, [pc, #148]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a26      	ldr	r2, [pc, #152]	@ (8009da8 <BSP_LCD_FillRect+0xf0>)
 8009d10:	2134      	movs	r1, #52	@ 0x34
 8009d12:	fb01 f303 	mul.w	r3, r1, r3
 8009d16:	4413      	add	r3, r2
 8009d18:	335c      	adds	r3, #92	@ 0x5c
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	f7ff fd6c 	bl	80097f8 <BSP_LCD_GetXSize>
 8009d20:	4602      	mov	r2, r0
 8009d22:	88bb      	ldrh	r3, [r7, #4]
 8009d24:	fb03 f202 	mul.w	r2, r3, r2
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	005b      	lsls	r3, r3, #1
 8009d2e:	4423      	add	r3, r4
 8009d30:	60fb      	str	r3, [r7, #12]
 8009d32:	e013      	b.n	8009d5c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8009d34:	4b1a      	ldr	r3, [pc, #104]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a1b      	ldr	r2, [pc, #108]	@ (8009da8 <BSP_LCD_FillRect+0xf0>)
 8009d3a:	2134      	movs	r1, #52	@ 0x34
 8009d3c:	fb01 f303 	mul.w	r3, r1, r3
 8009d40:	4413      	add	r3, r2
 8009d42:	335c      	adds	r3, #92	@ 0x5c
 8009d44:	681c      	ldr	r4, [r3, #0]
 8009d46:	f7ff fd57 	bl	80097f8 <BSP_LCD_GetXSize>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	88bb      	ldrh	r3, [r7, #4]
 8009d4e:	fb03 f202 	mul.w	r2, r3, r2
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4423      	add	r3, r4
 8009d5a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8009d5c:	4b10      	ldr	r3, [pc, #64]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009d5e:	681c      	ldr	r4, [r3, #0]
 8009d60:	68fd      	ldr	r5, [r7, #12]
 8009d62:	887e      	ldrh	r6, [r7, #2]
 8009d64:	f8b7 8000 	ldrh.w	r8, [r7]
 8009d68:	f7ff fd46 	bl	80097f8 <BSP_LCD_GetXSize>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	887b      	ldrh	r3, [r7, #2]
 8009d70:	1ad1      	subs	r1, r2, r3
 8009d72:	4b0b      	ldr	r3, [pc, #44]	@ (8009da0 <BSP_LCD_FillRect+0xe8>)
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	480b      	ldr	r0, [pc, #44]	@ (8009da4 <BSP_LCD_FillRect+0xec>)
 8009d78:	4613      	mov	r3, r2
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4403      	add	r3, r0
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	9301      	str	r3, [sp, #4]
 8009d86:	9100      	str	r1, [sp, #0]
 8009d88:	4643      	mov	r3, r8
 8009d8a:	4632      	mov	r2, r6
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 f9ba 	bl	800a108 <LL_FillBuffer>
}
 8009d94:	bf00      	nop
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d9e:	bf00      	nop
 8009da0:	200009f8 	.word	0x200009f8
 8009da4:	200009fc 	.word	0x200009fc
 8009da8:	20000910 	.word	0x20000910

08009dac <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b090      	sub	sp, #64	@ 0x40
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8009db6:	4b64      	ldr	r3, [pc, #400]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dba:	4a63      	ldr	r2, [pc, #396]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009dbc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8009dc2:	4b61      	ldr	r3, [pc, #388]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8009dce:	4b5e      	ldr	r3, [pc, #376]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd2:	4a5d      	ldr	r2, [pc, #372]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009dd4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009dda:	4b5b      	ldr	r3, [pc, #364]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009de6:	4b58      	ldr	r3, [pc, #352]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	4a57      	ldr	r2, [pc, #348]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009dec:	f043 0310 	orr.w	r3, r3, #16
 8009df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8009df2:	4b55      	ldr	r3, [pc, #340]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009df6:	f003 0310 	and.w	r3, r3, #16
 8009dfa:	623b      	str	r3, [r7, #32]
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009dfe:	4b52      	ldr	r3, [pc, #328]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e02:	4a51      	ldr	r2, [pc, #324]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e0a:	4b4f      	ldr	r3, [pc, #316]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e12:	61fb      	str	r3, [r7, #28]
 8009e14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009e16:	4b4c      	ldr	r3, [pc, #304]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1a:	4a4b      	ldr	r2, [pc, #300]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e22:	4b49      	ldr	r3, [pc, #292]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e2a:	61bb      	str	r3, [r7, #24]
 8009e2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009e2e:	4b46      	ldr	r3, [pc, #280]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e32:	4a45      	ldr	r2, [pc, #276]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e34:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e3a:	4b43      	ldr	r3, [pc, #268]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8009e46:	4b40      	ldr	r3, [pc, #256]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e52:	4b3d      	ldr	r3, [pc, #244]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e5a:	613b      	str	r3, [r7, #16]
 8009e5c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8009e5e:	4b3a      	ldr	r3, [pc, #232]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e62:	4a39      	ldr	r2, [pc, #228]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e6a:	4b37      	ldr	r3, [pc, #220]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e72:	60fb      	str	r3, [r7, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8009e76:	4b34      	ldr	r3, [pc, #208]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7a:	4a33      	ldr	r2, [pc, #204]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e7c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e82:	4b31      	ldr	r3, [pc, #196]	@ (8009f48 <BSP_LCD_MspInit+0x19c>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e8a:	60bb      	str	r3, [r7, #8]
 8009e8c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8009e8e:	2310      	movs	r3, #16
 8009e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009e92:	2302      	movs	r3, #2
 8009e94:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8009e9e:	230e      	movs	r3, #14
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8009ea2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4828      	ldr	r0, [pc, #160]	@ (8009f4c <BSP_LCD_MspInit+0x1a0>)
 8009eaa:	f7fa fb73 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8009eae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009eb4:	2302      	movs	r3, #2
 8009eb6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8009eb8:	2309      	movs	r3, #9
 8009eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8009ebc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4823      	ldr	r0, [pc, #140]	@ (8009f50 <BSP_LCD_MspInit+0x1a4>)
 8009ec4:	f7fa fb66 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8009ec8:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8009ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009ece:	2302      	movs	r3, #2
 8009ed0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8009ed2:	230e      	movs	r3, #14
 8009ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8009ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009eda:	4619      	mov	r1, r3
 8009edc:	481d      	ldr	r0, [pc, #116]	@ (8009f54 <BSP_LCD_MspInit+0x1a8>)
 8009ede:	f7fa fb59 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8009ee2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8009ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009ee8:	2302      	movs	r3, #2
 8009eea:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8009eec:	230e      	movs	r3, #14
 8009eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8009ef0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4818      	ldr	r0, [pc, #96]	@ (8009f58 <BSP_LCD_MspInit+0x1ac>)
 8009ef8:	f7fa fb4c 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8009efc:	23f7      	movs	r3, #247	@ 0xf7
 8009efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8009f00:	2302      	movs	r3, #2
 8009f02:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8009f04:	230e      	movs	r3, #14
 8009f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8009f08:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4813      	ldr	r0, [pc, #76]	@ (8009f5c <BSP_LCD_MspInit+0x1b0>)
 8009f10:	f7fa fb40 	bl	8004594 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8009f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8009f1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f22:	4619      	mov	r1, r3
 8009f24:	480b      	ldr	r0, [pc, #44]	@ (8009f54 <BSP_LCD_MspInit+0x1a8>)
 8009f26:	f7fa fb35 	bl	8004594 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8009f2a:	2308      	movs	r3, #8
 8009f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8009f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009f36:	4619      	mov	r1, r3
 8009f38:	4808      	ldr	r0, [pc, #32]	@ (8009f5c <BSP_LCD_MspInit+0x1b0>)
 8009f3a:	f7fa fb2b 	bl	8004594 <HAL_GPIO_Init>
}
 8009f3e:	bf00      	nop
 8009f40:	3740      	adds	r7, #64	@ 0x40
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	40021000 	.word	0x40021000
 8009f50:	40021800 	.word	0x40021800
 8009f54:	40022000 	.word	0x40022000
 8009f58:	40022400 	.word	0x40022400
 8009f5c:	40022800 	.word	0x40022800

08009f60 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009f94 <BSP_LCD_ClockConfig+0x34>)
 8009f6c:	2208      	movs	r2, #8
 8009f6e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8009f70:	4b08      	ldr	r3, [pc, #32]	@ (8009f94 <BSP_LCD_ClockConfig+0x34>)
 8009f72:	22c0      	movs	r2, #192	@ 0xc0
 8009f74:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8009f76:	4b07      	ldr	r3, [pc, #28]	@ (8009f94 <BSP_LCD_ClockConfig+0x34>)
 8009f78:	2205      	movs	r2, #5
 8009f7a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8009f7c:	4b05      	ldr	r3, [pc, #20]	@ (8009f94 <BSP_LCD_ClockConfig+0x34>)
 8009f7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009f82:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8009f84:	4803      	ldr	r0, [pc, #12]	@ (8009f94 <BSP_LCD_ClockConfig+0x34>)
 8009f86:	f7fc fb25 	bl	80065d4 <HAL_RCCEx_PeriphCLKConfig>
}
 8009f8a:	bf00      	nop
 8009f8c:	3708      	adds	r7, #8
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	20000a14 	.word	0x20000a14

08009f98 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	603a      	str	r2, [r7, #0]
 8009fa2:	80fb      	strh	r3, [r7, #6]
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	61fb      	str	r3, [r7, #28]
 8009fac:	2300      	movs	r3, #0
 8009fae:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8009fb0:	4b53      	ldr	r3, [pc, #332]	@ (800a100 <DrawChar+0x168>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	4953      	ldr	r1, [pc, #332]	@ (800a104 <DrawChar+0x16c>)
 8009fb6:	4613      	mov	r3, r2
 8009fb8:	005b      	lsls	r3, r3, #1
 8009fba:	4413      	add	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	440b      	add	r3, r1
 8009fc0:	3308      	adds	r3, #8
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	88db      	ldrh	r3, [r3, #6]
 8009fc6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8009fc8:	4b4d      	ldr	r3, [pc, #308]	@ (800a100 <DrawChar+0x168>)
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	494d      	ldr	r1, [pc, #308]	@ (800a104 <DrawChar+0x16c>)
 8009fce:	4613      	mov	r3, r2
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	3308      	adds	r3, #8
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	889b      	ldrh	r3, [r3, #4]
 8009fde:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8009fe0:	8a3b      	ldrh	r3, [r7, #16]
 8009fe2:	3307      	adds	r3, #7
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	da00      	bge.n	8009fea <DrawChar+0x52>
 8009fe8:	3307      	adds	r3, #7
 8009fea:	10db      	asrs	r3, r3, #3
 8009fec:	b2db      	uxtb	r3, r3
 8009fee:	00db      	lsls	r3, r3, #3
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	8a3b      	ldrh	r3, [r7, #16]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61fb      	str	r3, [r7, #28]
 8009ffe:	e076      	b.n	800a0ee <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800a000:	8a3b      	ldrh	r3, [r7, #16]
 800a002:	3307      	adds	r3, #7
 800a004:	2b00      	cmp	r3, #0
 800a006:	da00      	bge.n	800a00a <DrawChar+0x72>
 800a008:	3307      	adds	r3, #7
 800a00a:	10db      	asrs	r3, r3, #3
 800a00c:	461a      	mov	r2, r3
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	fb02 f303 	mul.w	r3, r2, r3
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	4413      	add	r3, r2
 800a018:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800a01a:	8a3b      	ldrh	r3, [r7, #16]
 800a01c:	3307      	adds	r3, #7
 800a01e:	2b00      	cmp	r3, #0
 800a020:	da00      	bge.n	800a024 <DrawChar+0x8c>
 800a022:	3307      	adds	r3, #7
 800a024:	10db      	asrs	r3, r3, #3
 800a026:	2b01      	cmp	r3, #1
 800a028:	d002      	beq.n	800a030 <DrawChar+0x98>
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d004      	beq.n	800a038 <DrawChar+0xa0>
 800a02e:	e00c      	b.n	800a04a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	617b      	str	r3, [r7, #20]
      break;
 800a036:	e016      	b.n	800a066 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	021b      	lsls	r3, r3, #8
 800a03e:	68ba      	ldr	r2, [r7, #8]
 800a040:	3201      	adds	r2, #1
 800a042:	7812      	ldrb	r2, [r2, #0]
 800a044:	4313      	orrs	r3, r2
 800a046:	617b      	str	r3, [r7, #20]
      break;
 800a048:	e00d      	b.n	800a066 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	041a      	lsls	r2, r3, #16
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	3301      	adds	r3, #1
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	4313      	orrs	r3, r2
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	3202      	adds	r2, #2
 800a05e:	7812      	ldrb	r2, [r2, #0]
 800a060:	4313      	orrs	r3, r2
 800a062:	617b      	str	r3, [r7, #20]
      break;
 800a064:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800a066:	2300      	movs	r3, #0
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	e036      	b.n	800a0da <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800a06c:	8a3a      	ldrh	r2, [r7, #16]
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	1ad2      	subs	r2, r2, r3
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	4413      	add	r3, r2
 800a076:	3b01      	subs	r3, #1
 800a078:	2201      	movs	r2, #1
 800a07a:	fa02 f303 	lsl.w	r3, r2, r3
 800a07e:	461a      	mov	r2, r3
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4013      	ands	r3, r2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d012      	beq.n	800a0ae <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	4413      	add	r3, r2
 800a090:	b298      	uxth	r0, r3
 800a092:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <DrawChar+0x168>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	491b      	ldr	r1, [pc, #108]	@ (800a104 <DrawChar+0x16c>)
 800a098:	4613      	mov	r3, r2
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	88bb      	ldrh	r3, [r7, #4]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f7ff fdbe 	bl	8009c28 <BSP_LCD_DrawPixel>
 800a0ac:	e012      	b.n	800a0d4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	b298      	uxth	r0, r3
 800a0b8:	4b11      	ldr	r3, [pc, #68]	@ (800a100 <DrawChar+0x168>)
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	4911      	ldr	r1, [pc, #68]	@ (800a104 <DrawChar+0x16c>)
 800a0be:	4613      	mov	r3, r2
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	4413      	add	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	440b      	add	r3, r1
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	88bb      	ldrh	r3, [r7, #4]
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	f7ff fdaa 	bl	8009c28 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61bb      	str	r3, [r7, #24]
 800a0da:	8a3b      	ldrh	r3, [r7, #16]
 800a0dc:	69ba      	ldr	r2, [r7, #24]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d3c4      	bcc.n	800a06c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800a0e2:	88bb      	ldrh	r3, [r7, #4]
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	61fb      	str	r3, [r7, #28]
 800a0ee:	8a7b      	ldrh	r3, [r7, #18]
 800a0f0:	69fa      	ldr	r2, [r7, #28]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d384      	bcc.n	800a000 <DrawChar+0x68>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	bf00      	nop
 800a0fa:	3720      	adds	r7, #32
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	200009f8 	.word	0x200009f8
 800a104:	200009fc 	.word	0x200009fc

0800a108 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800a116:	4b1e      	ldr	r3, [pc, #120]	@ (800a190 <LL_FillBuffer+0x88>)
 800a118:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a11c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800a11e:	4b1d      	ldr	r3, [pc, #116]	@ (800a194 <LL_FillBuffer+0x8c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4a1d      	ldr	r2, [pc, #116]	@ (800a198 <LL_FillBuffer+0x90>)
 800a124:	2134      	movs	r1, #52	@ 0x34
 800a126:	fb01 f303 	mul.w	r3, r1, r3
 800a12a:	4413      	add	r3, r2
 800a12c:	3348      	adds	r3, #72	@ 0x48
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2b02      	cmp	r3, #2
 800a132:	d103      	bne.n	800a13c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800a134:	4b16      	ldr	r3, [pc, #88]	@ (800a190 <LL_FillBuffer+0x88>)
 800a136:	2202      	movs	r2, #2
 800a138:	609a      	str	r2, [r3, #8]
 800a13a:	e002      	b.n	800a142 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800a13c:	4b14      	ldr	r3, [pc, #80]	@ (800a190 <LL_FillBuffer+0x88>)
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800a142:	4a13      	ldr	r2, [pc, #76]	@ (800a190 <LL_FillBuffer+0x88>)
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 800a148:	4b11      	ldr	r3, [pc, #68]	@ (800a190 <LL_FillBuffer+0x88>)
 800a14a:	4a14      	ldr	r2, [pc, #80]	@ (800a19c <LL_FillBuffer+0x94>)
 800a14c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800a14e:	4810      	ldr	r0, [pc, #64]	@ (800a190 <LL_FillBuffer+0x88>)
 800a150:	f7f9 ff94 	bl	800407c <HAL_DMA2D_Init>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d115      	bne.n	800a186 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800a15a:	68f9      	ldr	r1, [r7, #12]
 800a15c:	480c      	ldr	r0, [pc, #48]	@ (800a190 <LL_FillBuffer+0x88>)
 800a15e:	f7fa f8eb 	bl	8004338 <HAL_DMA2D_ConfigLayer>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d10e      	bne.n	800a186 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	69f9      	ldr	r1, [r7, #28]
 800a172:	4807      	ldr	r0, [pc, #28]	@ (800a190 <LL_FillBuffer+0x88>)
 800a174:	f7f9 ffcc 	bl	8004110 <HAL_DMA2D_Start>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800a17e:	210a      	movs	r1, #10
 800a180:	4803      	ldr	r0, [pc, #12]	@ (800a190 <LL_FillBuffer+0x88>)
 800a182:	f7f9 fff0 	bl	8004166 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800a186:	bf00      	nop
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	200009b8 	.word	0x200009b8
 800a194:	200009f8 	.word	0x200009f8
 800a198:	20000910 	.word	0x20000910
 800a19c:	4002b000 	.word	0x4002b000

0800a1a0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800a1a4:	4b29      	ldr	r3, [pc, #164]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a250 <BSP_SDRAM_Init+0xb0>)
 800a1a8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800a1aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1ac:	2202      	movs	r2, #2
 800a1ae:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800a1b0:	4b28      	ldr	r3, [pc, #160]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1b2:	2207      	movs	r2, #7
 800a1b4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800a1b6:	4b27      	ldr	r3, [pc, #156]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800a1bc:	4b25      	ldr	r3, [pc, #148]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1be:	2207      	movs	r2, #7
 800a1c0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800a1c2:	4b24      	ldr	r3, [pc, #144]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800a1c8:	4b22      	ldr	r3, [pc, #136]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800a1ce:	4b21      	ldr	r3, [pc, #132]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a1d0:	2202      	movs	r2, #2
 800a1d2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800a1d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a1da:	4b1c      	ldr	r3, [pc, #112]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1dc:	2200      	movs	r2, #0
 800a1de:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800a1e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1e2:	2204      	movs	r2, #4
 800a1e4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800a1e6:	4b19      	ldr	r3, [pc, #100]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a1ec:	4b17      	ldr	r3, [pc, #92]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1ee:	2240      	movs	r2, #64	@ 0x40
 800a1f0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800a1f2:	4b16      	ldr	r3, [pc, #88]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1f8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a1fa:	4b14      	ldr	r3, [pc, #80]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800a200:	4b12      	ldr	r3, [pc, #72]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a202:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a206:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800a208:	4b10      	ldr	r3, [pc, #64]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a20a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a20e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800a210:	4b0e      	ldr	r3, [pc, #56]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a212:	2200      	movs	r2, #0
 800a214:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800a216:	2100      	movs	r1, #0
 800a218:	480c      	ldr	r0, [pc, #48]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a21a:	f000 f87f 	bl	800a31c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800a21e:	490d      	ldr	r1, [pc, #52]	@ (800a254 <BSP_SDRAM_Init+0xb4>)
 800a220:	480a      	ldr	r0, [pc, #40]	@ (800a24c <BSP_SDRAM_Init+0xac>)
 800a222:	f7fc fdc7 	bl	8006db4 <HAL_SDRAM_Init>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	@ (800a258 <BSP_SDRAM_Init+0xb8>)
 800a22e:	2201      	movs	r2, #1
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	e002      	b.n	800a23a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800a234:	4b08      	ldr	r3, [pc, #32]	@ (800a258 <BSP_SDRAM_Init+0xb8>)
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800a23a:	f240 6003 	movw	r0, #1539	@ 0x603
 800a23e:	f000 f80d 	bl	800a25c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800a242:	4b05      	ldr	r3, [pc, #20]	@ (800a258 <BSP_SDRAM_Init+0xb8>)
 800a244:	781b      	ldrb	r3, [r3, #0]
}
 800a246:	4618      	mov	r0, r3
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000a98 	.word	0x20000a98
 800a250:	a0000140 	.word	0xa0000140
 800a254:	20000acc 	.word	0x20000acc
 800a258:	2000004c 	.word	0x2000004c

0800a25c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800a268:	4b2a      	ldr	r3, [pc, #168]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a26a:	2201      	movs	r2, #1
 800a26c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a26e:	4b29      	ldr	r3, [pc, #164]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a270:	2210      	movs	r2, #16
 800a272:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a274:	4b27      	ldr	r3, [pc, #156]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a276:	2201      	movs	r2, #1
 800a278:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a27a:	4b26      	ldr	r3, [pc, #152]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a27c:	2200      	movs	r2, #0
 800a27e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a284:	4923      	ldr	r1, [pc, #140]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a286:	4824      	ldr	r0, [pc, #144]	@ (800a318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a288:	f7fc fdc8 	bl	8006e1c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800a28c:	2001      	movs	r0, #1
 800a28e:	f7f8 fce1 	bl	8002c54 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800a292:	4b20      	ldr	r3, [pc, #128]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a294:	2202      	movs	r2, #2
 800a296:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a298:	4b1e      	ldr	r3, [pc, #120]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a29a:	2210      	movs	r2, #16
 800a29c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a29e:	4b1d      	ldr	r3, [pc, #116]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800a2aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2ae:	4919      	ldr	r1, [pc, #100]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2b0:	4819      	ldr	r0, [pc, #100]	@ (800a318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a2b2:	f7fc fdb3 	bl	8006e1c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a2b6:	4b17      	ldr	r3, [pc, #92]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a2bc:	4b15      	ldr	r3, [pc, #84]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2be:	2210      	movs	r2, #16
 800a2c0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800a2c2:	4b14      	ldr	r3, [pc, #80]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2c4:	2208      	movs	r2, #8
 800a2c6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800a2c8:	4b12      	ldr	r3, [pc, #72]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a2ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2d2:	4910      	ldr	r1, [pc, #64]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2d4:	4810      	ldr	r0, [pc, #64]	@ (800a318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a2d6:	f7fc fda1 	bl	8006e1c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800a2da:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800a2de:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800a2e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2e8:	2210      	movs	r2, #16
 800a2ea:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800a2ec:	4b09      	ldr	r3, [pc, #36]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4a07      	ldr	r2, [pc, #28]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2f6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800a2f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a2fc:	4905      	ldr	r1, [pc, #20]	@ (800a314 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800a2fe:	4806      	ldr	r0, [pc, #24]	@ (800a318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a300:	f7fc fd8c 	bl	8006e1c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	4804      	ldr	r0, [pc, #16]	@ (800a318 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800a308:	f7fc fdbd 	bl	8006e86 <HAL_SDRAM_ProgramRefreshRate>
}
 800a30c:	bf00      	nop
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	20000ae8 	.word	0x20000ae8
 800a318:	20000a98 	.word	0x20000a98

0800a31c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b090      	sub	sp, #64	@ 0x40
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a326:	4b70      	ldr	r3, [pc, #448]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	4a6f      	ldr	r2, [pc, #444]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a32c:	f043 0301 	orr.w	r3, r3, #1
 800a330:	6393      	str	r3, [r2, #56]	@ 0x38
 800a332:	4b6d      	ldr	r3, [pc, #436]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800a33e:	4b6a      	ldr	r3, [pc, #424]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a342:	4a69      	ldr	r2, [pc, #420]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a344:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a348:	6313      	str	r3, [r2, #48]	@ 0x30
 800a34a:	4b67      	ldr	r3, [pc, #412]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a34e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a352:	627b      	str	r3, [r7, #36]	@ 0x24
 800a354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a356:	4b64      	ldr	r3, [pc, #400]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a35a:	4a63      	ldr	r2, [pc, #396]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a35c:	f043 0304 	orr.w	r3, r3, #4
 800a360:	6313      	str	r3, [r2, #48]	@ 0x30
 800a362:	4b61      	ldr	r3, [pc, #388]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a366:	f003 0304 	and.w	r3, r3, #4
 800a36a:	623b      	str	r3, [r7, #32]
 800a36c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a36e:	4b5e      	ldr	r3, [pc, #376]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a372:	4a5d      	ldr	r2, [pc, #372]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a374:	f043 0308 	orr.w	r3, r3, #8
 800a378:	6313      	str	r3, [r2, #48]	@ 0x30
 800a37a:	4b5b      	ldr	r3, [pc, #364]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a37c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	61fb      	str	r3, [r7, #28]
 800a384:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a386:	4b58      	ldr	r3, [pc, #352]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38a:	4a57      	ldr	r2, [pc, #348]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a38c:	f043 0310 	orr.w	r3, r3, #16
 800a390:	6313      	str	r3, [r2, #48]	@ 0x30
 800a392:	4b55      	ldr	r3, [pc, #340]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a396:	f003 0310 	and.w	r3, r3, #16
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a39e:	4b52      	ldr	r3, [pc, #328]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a2:	4a51      	ldr	r2, [pc, #324]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3a4:	f043 0320 	orr.w	r3, r3, #32
 800a3a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3aa:	4b4f      	ldr	r3, [pc, #316]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ae:	f003 0320 	and.w	r3, r3, #32
 800a3b2:	617b      	str	r3, [r7, #20]
 800a3b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800a3b6:	4b4c      	ldr	r3, [pc, #304]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ba:	4a4b      	ldr	r2, [pc, #300]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3c2:	4b49      	ldr	r3, [pc, #292]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3ca:	613b      	str	r3, [r7, #16]
 800a3cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a3ce:	4b46      	ldr	r3, [pc, #280]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d2:	4a45      	ldr	r2, [pc, #276]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3da:	4b43      	ldr	r3, [pc, #268]	@ (800a4e8 <BSP_SDRAM_MspInit+0x1cc>)
 800a3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3e2:	60fb      	str	r3, [r7, #12]
 800a3e4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800a3f2:	230c      	movs	r3, #12
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800a3f6:	2308      	movs	r3, #8
 800a3f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800a3fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a3fe:	4619      	mov	r1, r3
 800a400:	483a      	ldr	r0, [pc, #232]	@ (800a4ec <BSP_SDRAM_MspInit+0x1d0>)
 800a402:	f7fa f8c7 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800a406:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800a40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800a40c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a410:	4619      	mov	r1, r3
 800a412:	4837      	ldr	r0, [pc, #220]	@ (800a4f0 <BSP_SDRAM_MspInit+0x1d4>)
 800a414:	f7fa f8be 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800a418:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800a41c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800a41e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a422:	4619      	mov	r1, r3
 800a424:	4833      	ldr	r0, [pc, #204]	@ (800a4f4 <BSP_SDRAM_MspInit+0x1d8>)
 800a426:	f7fa f8b5 	bl	8004594 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800a42a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800a42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800a430:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a434:	4619      	mov	r1, r3
 800a436:	4830      	ldr	r0, [pc, #192]	@ (800a4f8 <BSP_SDRAM_MspInit+0x1dc>)
 800a438:	f7fa f8ac 	bl	8004594 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800a43c:	f248 1333 	movw	r3, #33075	@ 0x8133
 800a440:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800a442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a446:	4619      	mov	r1, r3
 800a448:	482c      	ldr	r0, [pc, #176]	@ (800a4fc <BSP_SDRAM_MspInit+0x1e0>)
 800a44a:	f7fa f8a3 	bl	8004594 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800a44e:	2328      	movs	r3, #40	@ 0x28
 800a450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800a452:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a456:	4619      	mov	r1, r3
 800a458:	4829      	ldr	r0, [pc, #164]	@ (800a500 <BSP_SDRAM_MspInit+0x1e4>)
 800a45a:	f7fa f89b 	bl	8004594 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800a45e:	4b29      	ldr	r3, [pc, #164]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a460:	2200      	movs	r2, #0
 800a462:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800a464:	4b27      	ldr	r3, [pc, #156]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a466:	2280      	movs	r2, #128	@ 0x80
 800a468:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800a46a:	4b26      	ldr	r3, [pc, #152]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a46c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a470:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800a472:	4b24      	ldr	r3, [pc, #144]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a474:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a478:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a47a:	4b22      	ldr	r3, [pc, #136]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a47c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a480:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800a482:	4b20      	ldr	r3, [pc, #128]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a484:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a488:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800a48a:	4b1e      	ldr	r3, [pc, #120]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 800a490:	4b1c      	ldr	r3, [pc, #112]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a492:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a496:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800a498:	4b1a      	ldr	r3, [pc, #104]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a49a:	2200      	movs	r2, #0
 800a49c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800a49e:	4b19      	ldr	r3, [pc, #100]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4a0:	2203      	movs	r2, #3
 800a4a2:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800a4a4:	4b17      	ldr	r3, [pc, #92]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800a4aa:	4b16      	ldr	r3, [pc, #88]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800a4b0:	4b14      	ldr	r3, [pc, #80]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4b2:	4a15      	ldr	r2, [pc, #84]	@ (800a508 <BSP_SDRAM_MspInit+0x1ec>)
 800a4b4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a12      	ldr	r2, [pc, #72]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4ba:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4bc:	4a11      	ldr	r2, [pc, #68]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800a4c2:	4810      	ldr	r0, [pc, #64]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4c4:	f7f9 fb40 	bl	8003b48 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800a4c8:	480e      	ldr	r0, [pc, #56]	@ (800a504 <BSP_SDRAM_MspInit+0x1e8>)
 800a4ca:	f7f9 fa8f 	bl	80039ec <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	210f      	movs	r1, #15
 800a4d2:	2038      	movs	r0, #56	@ 0x38
 800a4d4:	f7f9 f961 	bl	800379a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800a4d8:	2038      	movs	r0, #56	@ 0x38
 800a4da:	f7f9 f97a 	bl	80037d2 <HAL_NVIC_EnableIRQ>
}
 800a4de:	bf00      	nop
 800a4e0:	3740      	adds	r7, #64	@ 0x40
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	40020800 	.word	0x40020800
 800a4f0:	40020c00 	.word	0x40020c00
 800a4f4:	40021000 	.word	0x40021000
 800a4f8:	40021400 	.word	0x40021400
 800a4fc:	40021800 	.word	0x40021800
 800a500:	40021c00 	.word	0x40021c00
 800a504:	20000af8 	.word	0x20000af8
 800a508:	40026410 	.word	0x40026410

0800a50c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	4603      	mov	r3, r0
 800a514:	460a      	mov	r2, r1
 800a516:	80fb      	strh	r3, [r7, #6]
 800a518:	4613      	mov	r3, r2
 800a51a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800a520:	4a14      	ldr	r2, [pc, #80]	@ (800a574 <BSP_TS_Init+0x68>)
 800a522:	88fb      	ldrh	r3, [r7, #6]
 800a524:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800a526:	4a14      	ldr	r2, [pc, #80]	@ (800a578 <BSP_TS_Init+0x6c>)
 800a528:	88bb      	ldrh	r3, [r7, #4]
 800a52a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800a52c:	4b13      	ldr	r3, [pc, #76]	@ (800a57c <BSP_TS_Init+0x70>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2070      	movs	r0, #112	@ 0x70
 800a532:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800a534:	4b11      	ldr	r3, [pc, #68]	@ (800a57c <BSP_TS_Init+0x70>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2070      	movs	r0, #112	@ 0x70
 800a53a:	4798      	blx	r3
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b51      	cmp	r3, #81	@ 0x51
 800a540:	d110      	bne.n	800a564 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800a542:	4b0f      	ldr	r3, [pc, #60]	@ (800a580 <BSP_TS_Init+0x74>)
 800a544:	4a0d      	ldr	r2, [pc, #52]	@ (800a57c <BSP_TS_Init+0x70>)
 800a546:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800a548:	4b0e      	ldr	r3, [pc, #56]	@ (800a584 <BSP_TS_Init+0x78>)
 800a54a:	2270      	movs	r2, #112	@ 0x70
 800a54c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800a54e:	4b0e      	ldr	r3, [pc, #56]	@ (800a588 <BSP_TS_Init+0x7c>)
 800a550:	2208      	movs	r2, #8
 800a552:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800a554:	4b0a      	ldr	r3, [pc, #40]	@ (800a580 <BSP_TS_Init+0x74>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	4a0a      	ldr	r2, [pc, #40]	@ (800a584 <BSP_TS_Init+0x78>)
 800a55c:	7812      	ldrb	r2, [r2, #0]
 800a55e:	4610      	mov	r0, r2
 800a560:	4798      	blx	r3
 800a562:	e001      	b.n	800a568 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800a564:	2303      	movs	r3, #3
 800a566:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a568:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}
 800a572:	bf00      	nop
 800a574:	20000b5c 	.word	0x20000b5c
 800a578:	20000b5e 	.word	0x20000b5e
 800a57c:	20000024 	.word	0x20000024
 800a580:	20000b58 	.word	0x20000b58
 800a584:	20000b61 	.word	0x20000b61
 800a588:	20000b60 	.word	0x20000b60

0800a58c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800a58c:	b590      	push	{r4, r7, lr}
 800a58e:	b097      	sub	sp, #92	@ 0x5c
 800a590:	af02      	add	r7, sp, #8
 800a592:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800a59a:	2300      	movs	r3, #0
 800a59c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800a5a6:	4bb8      	ldr	r3, [pc, #736]	@ (800a888 <BSP_TS_GetState+0x2fc>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	4ab7      	ldr	r2, [pc, #732]	@ (800a88c <BSP_TS_GetState+0x300>)
 800a5ae:	7812      	ldrb	r2, [r2, #0]
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	4798      	blx	r3
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 8198 	beq.w	800a8f6 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a5ca:	e187      	b.n	800a8dc <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800a5cc:	4bae      	ldr	r3, [pc, #696]	@ (800a888 <BSP_TS_GetState+0x2fc>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695b      	ldr	r3, [r3, #20]
 800a5d2:	4aae      	ldr	r2, [pc, #696]	@ (800a88c <BSP_TS_GetState+0x300>)
 800a5d4:	7812      	ldrb	r2, [r2, #0]
 800a5d6:	4614      	mov	r4, r2
 800a5d8:	f107 0120 	add.w	r1, r7, #32
 800a5dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5de:	0052      	lsls	r2, r2, #1
 800a5e0:	1888      	adds	r0, r1, r2
 800a5e2:	f107 0114 	add.w	r1, r7, #20
 800a5e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a5e8:	0052      	lsls	r2, r2, #1
 800a5ea:	440a      	add	r2, r1
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800a5f2:	4ba7      	ldr	r3, [pc, #668]	@ (800a890 <BSP_TS_GetState+0x304>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d117      	bne.n	800a62a <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800a5fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	3350      	adds	r3, #80	@ 0x50
 800a600:	443b      	add	r3, r7
 800a602:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800a606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a608:	005b      	lsls	r3, r3, #1
 800a60a:	3350      	adds	r3, #80	@ 0x50
 800a60c:	443b      	add	r3, r7
 800a60e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800a612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a614:	005b      	lsls	r3, r3, #1
 800a616:	3350      	adds	r3, #80	@ 0x50
 800a618:	443b      	add	r3, r7
 800a61a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800a61e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a620:	005b      	lsls	r3, r3, #1
 800a622:	3350      	adds	r3, #80	@ 0x50
 800a624:	443b      	add	r3, r7
 800a626:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800a62a:	4b99      	ldr	r3, [pc, #612]	@ (800a890 <BSP_TS_GetState+0x304>)
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00e      	beq.n	800a654 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800a636:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	3350      	adds	r3, #80	@ 0x50
 800a63c:	443b      	add	r3, r7
 800a63e:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800a642:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800a646:	b29a      	uxth	r2, r3
 800a648:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	3350      	adds	r3, #80	@ 0x50
 800a64e:	443b      	add	r3, r7
 800a650:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800a654:	4b8e      	ldr	r3, [pc, #568]	@ (800a890 <BSP_TS_GetState+0x304>)
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00e      	beq.n	800a67e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800a660:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a662:	005b      	lsls	r3, r3, #1
 800a664:	3350      	adds	r3, #80	@ 0x50
 800a666:	443b      	add	r3, r7
 800a668:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800a66c:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800a670:	b29a      	uxth	r2, r3
 800a672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a674:	005b      	lsls	r3, r3, #1
 800a676:	3350      	adds	r3, #80	@ 0x50
 800a678:	443b      	add	r3, r7
 800a67a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800a67e:	4b84      	ldr	r3, [pc, #528]	@ (800a890 <BSP_TS_GetState+0x304>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	f003 0308 	and.w	r3, r3, #8
 800a686:	2b00      	cmp	r3, #0
 800a688:	d017      	beq.n	800a6ba <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800a68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a68c:	005b      	lsls	r3, r3, #1
 800a68e:	3350      	adds	r3, #80	@ 0x50
 800a690:	443b      	add	r3, r7
 800a692:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800a696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a698:	005b      	lsls	r3, r3, #1
 800a69a:	3350      	adds	r3, #80	@ 0x50
 800a69c:	443b      	add	r3, r7
 800a69e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 800a6a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6a4:	005b      	lsls	r3, r3, #1
 800a6a6:	3350      	adds	r3, #80	@ 0x50
 800a6a8:	443b      	add	r3, r7
 800a6aa:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800a6ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b0:	005b      	lsls	r3, r3, #1
 800a6b2:	3350      	adds	r3, #80	@ 0x50
 800a6b4:	443b      	add	r3, r7
 800a6b6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800a6ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6bc:	005b      	lsls	r3, r3, #1
 800a6be:	3350      	adds	r3, #80	@ 0x50
 800a6c0:	443b      	add	r3, r7
 800a6c2:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4a72      	ldr	r2, [pc, #456]	@ (800a894 <BSP_TS_GetState+0x308>)
 800a6ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	d90d      	bls.n	800a6f0 <BSP_TS_GetState+0x164>
 800a6d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	3350      	adds	r3, #80	@ 0x50
 800a6da:	443b      	add	r3, r7
 800a6dc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800a6e0:	496c      	ldr	r1, [pc, #432]	@ (800a894 <BSP_TS_GetState+0x308>)
 800a6e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	e00c      	b.n	800a70a <BSP_TS_GetState+0x17e>
 800a6f0:	4a68      	ldr	r2, [pc, #416]	@ (800a894 <BSP_TS_GetState+0x308>)
 800a6f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6fc:	005b      	lsls	r3, r3, #1
 800a6fe:	3350      	adds	r3, #80	@ 0x50
 800a700:	443b      	add	r3, r7
 800a702:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800a70e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	3350      	adds	r3, #80	@ 0x50
 800a714:	443b      	add	r3, r7
 800a716:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800a71a:	4619      	mov	r1, r3
 800a71c:	4a5e      	ldr	r2, [pc, #376]	@ (800a898 <BSP_TS_GetState+0x30c>)
 800a71e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a724:	4299      	cmp	r1, r3
 800a726:	d90d      	bls.n	800a744 <BSP_TS_GetState+0x1b8>
 800a728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	3350      	adds	r3, #80	@ 0x50
 800a72e:	443b      	add	r3, r7
 800a730:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800a734:	4958      	ldr	r1, [pc, #352]	@ (800a898 <BSP_TS_GetState+0x30c>)
 800a736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	b29b      	uxth	r3, r3
 800a742:	e00c      	b.n	800a75e <BSP_TS_GetState+0x1d2>
 800a744:	4a54      	ldr	r2, [pc, #336]	@ (800a898 <BSP_TS_GetState+0x30c>)
 800a746:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a750:	005b      	lsls	r3, r3, #1
 800a752:	3350      	adds	r3, #80	@ 0x50
 800a754:	443b      	add	r3, r7
 800a756:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 800a762:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800a76a:	4413      	add	r3, r2
 800a76c:	2b05      	cmp	r3, #5
 800a76e:	dd15      	ble.n	800a79c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 800a770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a772:	005b      	lsls	r3, r3, #1
 800a774:	3350      	adds	r3, #80	@ 0x50
 800a776:	443b      	add	r3, r7
 800a778:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800a77c:	4619      	mov	r1, r3
 800a77e:	4a45      	ldr	r2, [pc, #276]	@ (800a894 <BSP_TS_GetState+0x308>)
 800a780:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a782:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800a786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a788:	005b      	lsls	r3, r3, #1
 800a78a:	3350      	adds	r3, #80	@ 0x50
 800a78c:	443b      	add	r3, r7
 800a78e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800a792:	4619      	mov	r1, r3
 800a794:	4a40      	ldr	r2, [pc, #256]	@ (800a898 <BSP_TS_GetState+0x30c>)
 800a796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a798:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800a79c:	4b3b      	ldr	r3, [pc, #236]	@ (800a88c <BSP_TS_GetState+0x300>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	2b70      	cmp	r3, #112	@ 0x70
 800a7a2:	d119      	bne.n	800a7d8 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 800a7a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7a6:	005b      	lsls	r3, r3, #1
 800a7a8:	3350      	adds	r3, #80	@ 0x50
 800a7aa:	443b      	add	r3, r7
 800a7ac:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7b4:	005b      	lsls	r3, r3, #1
 800a7b6:	4413      	add	r3, r2
 800a7b8:	460a      	mov	r2, r1
 800a7ba:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800a7bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7be:	005b      	lsls	r3, r3, #1
 800a7c0:	3350      	adds	r3, #80	@ 0x50
 800a7c2:	443b      	add	r3, r7
 800a7c4:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	005b      	lsls	r3, r3, #1
 800a7d0:	4413      	add	r3, r2
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	809a      	strh	r2, [r3, #4]
 800a7d6:	e022      	b.n	800a81e <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800a7d8:	4b30      	ldr	r3, [pc, #192]	@ (800a89c <BSP_TS_GetState+0x310>)
 800a7da:	881b      	ldrh	r3, [r3, #0]
 800a7dc:	4619      	mov	r1, r3
 800a7de:	4a2d      	ldr	r2, [pc, #180]	@ (800a894 <BSP_TS_GetState+0x308>)
 800a7e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7e6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ea:	0b1b      	lsrs	r3, r3, #12
 800a7ec:	b299      	uxth	r1, r3
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7f2:	005b      	lsls	r3, r3, #1
 800a7f4:	4413      	add	r3, r2
 800a7f6:	460a      	mov	r2, r1
 800a7f8:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800a7fa:	4b29      	ldr	r3, [pc, #164]	@ (800a8a0 <BSP_TS_GetState+0x314>)
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	4619      	mov	r1, r3
 800a800:	4a25      	ldr	r2, [pc, #148]	@ (800a898 <BSP_TS_GetState+0x30c>)
 800a802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a808:	fb01 f303 	mul.w	r3, r1, r3
 800a80c:	0b1b      	lsrs	r3, r3, #12
 800a80e:	b299      	uxth	r1, r3
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a814:	3304      	adds	r3, #4
 800a816:	005b      	lsls	r3, r3, #1
 800a818:	4413      	add	r3, r2
 800a81a:	460a      	mov	r2, r1
 800a81c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 800a81e:	4b1b      	ldr	r3, [pc, #108]	@ (800a88c <BSP_TS_GetState+0x300>)
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f107 010c 	add.w	r1, r7, #12
 800a828:	f107 0210 	add.w	r2, r7, #16
 800a82c:	f107 0308 	add.w	r3, r7, #8
 800a830:	9300      	str	r3, [sp, #0]
 800a832:	460b      	mov	r3, r1
 800a834:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a836:	f7fe fcf3 	bl	8009220 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	b2d9      	uxtb	r1, r3
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a842:	4413      	add	r3, r2
 800a844:	3316      	adds	r3, #22
 800a846:	460a      	mov	r2, r1
 800a848:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	b2d9      	uxtb	r1, r3
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a852:	4413      	add	r3, r2
 800a854:	3320      	adds	r3, #32
 800a856:	460a      	mov	r2, r1
 800a858:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b03      	cmp	r3, #3
 800a85e:	d836      	bhi.n	800a8ce <BSP_TS_GetState+0x342>
 800a860:	a201      	add	r2, pc, #4	@ (adr r2, 800a868 <BSP_TS_GetState+0x2dc>)
 800a862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a866:	bf00      	nop
 800a868:	0800a879 	.word	0x0800a879
 800a86c:	0800a8a5 	.word	0x0800a8a5
 800a870:	0800a8b3 	.word	0x0800a8b3
 800a874:	0800a8c1 	.word	0x0800a8c1
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a87c:	4413      	add	r3, r2
 800a87e:	331b      	adds	r3, #27
 800a880:	2201      	movs	r2, #1
 800a882:	701a      	strb	r2, [r3, #0]
          break;
 800a884:	e027      	b.n	800a8d6 <BSP_TS_GetState+0x34a>
 800a886:	bf00      	nop
 800a888:	20000b58 	.word	0x20000b58
 800a88c:	20000b61 	.word	0x20000b61
 800a890:	20000b60 	.word	0x20000b60
 800a894:	20000b64 	.word	0x20000b64
 800a898:	20000b78 	.word	0x20000b78
 800a89c:	20000b5c 	.word	0x20000b5c
 800a8a0:	20000b5e 	.word	0x20000b5e
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8a8:	4413      	add	r3, r2
 800a8aa:	331b      	adds	r3, #27
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	701a      	strb	r2, [r3, #0]
          break;
 800a8b0:	e011      	b.n	800a8d6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8b6:	4413      	add	r3, r2
 800a8b8:	331b      	adds	r3, #27
 800a8ba:	2203      	movs	r2, #3
 800a8bc:	701a      	strb	r2, [r3, #0]
          break;
 800a8be:	e00a      	b.n	800a8d6 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8c4:	4413      	add	r3, r2
 800a8c6:	331b      	adds	r3, #27
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	701a      	strb	r2, [r3, #0]
          break;
 800a8cc:	e003      	b.n	800a8d6 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 800a8d4:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800a8d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8d8:	3301      	adds	r3, #1
 800a8da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	781b      	ldrb	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	f4ff ae71 	bcc.w	800a5cc <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 f80a 	bl	800a904 <BSP_TS_Get_GestureId>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800a8f6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3754      	adds	r7, #84	@ 0x54
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd90      	pop	{r4, r7, pc}
 800a902:	bf00      	nop

0800a904 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800a910:	2300      	movs	r3, #0
 800a912:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800a914:	4b3b      	ldr	r3, [pc, #236]	@ (800aa04 <BSP_TS_Get_GestureId+0x100>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	461a      	mov	r2, r3
 800a91a:	f107 0308 	add.w	r3, r7, #8
 800a91e:	4619      	mov	r1, r3
 800a920:	4610      	mov	r0, r2
 800a922:	f7fe fc64 	bl	80091ee <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	2b49      	cmp	r3, #73	@ 0x49
 800a92a:	d05e      	beq.n	800a9ea <BSP_TS_Get_GestureId+0xe6>
 800a92c:	2b49      	cmp	r3, #73	@ 0x49
 800a92e:	d860      	bhi.n	800a9f2 <BSP_TS_Get_GestureId+0xee>
 800a930:	2b1c      	cmp	r3, #28
 800a932:	d83f      	bhi.n	800a9b4 <BSP_TS_Get_GestureId+0xb0>
 800a934:	2b1c      	cmp	r3, #28
 800a936:	d85c      	bhi.n	800a9f2 <BSP_TS_Get_GestureId+0xee>
 800a938:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <BSP_TS_Get_GestureId+0x3c>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a9bb 	.word	0x0800a9bb
 800a944:	0800a9f3 	.word	0x0800a9f3
 800a948:	0800a9f3 	.word	0x0800a9f3
 800a94c:	0800a9f3 	.word	0x0800a9f3
 800a950:	0800a9f3 	.word	0x0800a9f3
 800a954:	0800a9f3 	.word	0x0800a9f3
 800a958:	0800a9f3 	.word	0x0800a9f3
 800a95c:	0800a9f3 	.word	0x0800a9f3
 800a960:	0800a9f3 	.word	0x0800a9f3
 800a964:	0800a9f3 	.word	0x0800a9f3
 800a968:	0800a9f3 	.word	0x0800a9f3
 800a96c:	0800a9f3 	.word	0x0800a9f3
 800a970:	0800a9f3 	.word	0x0800a9f3
 800a974:	0800a9f3 	.word	0x0800a9f3
 800a978:	0800a9f3 	.word	0x0800a9f3
 800a97c:	0800a9f3 	.word	0x0800a9f3
 800a980:	0800a9c3 	.word	0x0800a9c3
 800a984:	0800a9f3 	.word	0x0800a9f3
 800a988:	0800a9f3 	.word	0x0800a9f3
 800a98c:	0800a9f3 	.word	0x0800a9f3
 800a990:	0800a9cb 	.word	0x0800a9cb
 800a994:	0800a9f3 	.word	0x0800a9f3
 800a998:	0800a9f3 	.word	0x0800a9f3
 800a99c:	0800a9f3 	.word	0x0800a9f3
 800a9a0:	0800a9d3 	.word	0x0800a9d3
 800a9a4:	0800a9f3 	.word	0x0800a9f3
 800a9a8:	0800a9f3 	.word	0x0800a9f3
 800a9ac:	0800a9f3 	.word	0x0800a9f3
 800a9b0:	0800a9db 	.word	0x0800a9db
 800a9b4:	2b40      	cmp	r3, #64	@ 0x40
 800a9b6:	d014      	beq.n	800a9e2 <BSP_TS_Get_GestureId+0xde>
 800a9b8:	e01b      	b.n	800a9f2 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9c0:	e01a      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9c8:	e016      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2202      	movs	r2, #2
 800a9ce:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9d0:	e012      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2203      	movs	r2, #3
 800a9d6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9d8:	e00e      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2204      	movs	r2, #4
 800a9de:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9e0:	e00a      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2205      	movs	r2, #5
 800a9e6:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9e8:	e006      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2206      	movs	r2, #6
 800a9ee:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800a9f0:	e002      	b.n	800a9f8 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a9f6:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20000b61 	.word	0x20000b61

0800aa08 <__cvt>:
 800aa08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	ec57 6b10 	vmov	r6, r7, d0
 800aa10:	2f00      	cmp	r7, #0
 800aa12:	460c      	mov	r4, r1
 800aa14:	4619      	mov	r1, r3
 800aa16:	463b      	mov	r3, r7
 800aa18:	bfbb      	ittet	lt
 800aa1a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aa1e:	461f      	movlt	r7, r3
 800aa20:	2300      	movge	r3, #0
 800aa22:	232d      	movlt	r3, #45	@ 0x2d
 800aa24:	700b      	strb	r3, [r1, #0]
 800aa26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa28:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aa2c:	4691      	mov	r9, r2
 800aa2e:	f023 0820 	bic.w	r8, r3, #32
 800aa32:	bfbc      	itt	lt
 800aa34:	4632      	movlt	r2, r6
 800aa36:	4616      	movlt	r6, r2
 800aa38:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aa3c:	d005      	beq.n	800aa4a <__cvt+0x42>
 800aa3e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800aa42:	d100      	bne.n	800aa46 <__cvt+0x3e>
 800aa44:	3401      	adds	r4, #1
 800aa46:	2102      	movs	r1, #2
 800aa48:	e000      	b.n	800aa4c <__cvt+0x44>
 800aa4a:	2103      	movs	r1, #3
 800aa4c:	ab03      	add	r3, sp, #12
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	ab02      	add	r3, sp, #8
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	ec47 6b10 	vmov	d0, r6, r7
 800aa58:	4653      	mov	r3, sl
 800aa5a:	4622      	mov	r2, r4
 800aa5c:	f000 fe5c 	bl	800b718 <_dtoa_r>
 800aa60:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800aa64:	4605      	mov	r5, r0
 800aa66:	d119      	bne.n	800aa9c <__cvt+0x94>
 800aa68:	f019 0f01 	tst.w	r9, #1
 800aa6c:	d00e      	beq.n	800aa8c <__cvt+0x84>
 800aa6e:	eb00 0904 	add.w	r9, r0, r4
 800aa72:	2200      	movs	r2, #0
 800aa74:	2300      	movs	r3, #0
 800aa76:	4630      	mov	r0, r6
 800aa78:	4639      	mov	r1, r7
 800aa7a:	f7f6 f845 	bl	8000b08 <__aeabi_dcmpeq>
 800aa7e:	b108      	cbz	r0, 800aa84 <__cvt+0x7c>
 800aa80:	f8cd 900c 	str.w	r9, [sp, #12]
 800aa84:	2230      	movs	r2, #48	@ 0x30
 800aa86:	9b03      	ldr	r3, [sp, #12]
 800aa88:	454b      	cmp	r3, r9
 800aa8a:	d31e      	bcc.n	800aaca <__cvt+0xc2>
 800aa8c:	9b03      	ldr	r3, [sp, #12]
 800aa8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa90:	1b5b      	subs	r3, r3, r5
 800aa92:	4628      	mov	r0, r5
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	b004      	add	sp, #16
 800aa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800aaa0:	eb00 0904 	add.w	r9, r0, r4
 800aaa4:	d1e5      	bne.n	800aa72 <__cvt+0x6a>
 800aaa6:	7803      	ldrb	r3, [r0, #0]
 800aaa8:	2b30      	cmp	r3, #48	@ 0x30
 800aaaa:	d10a      	bne.n	800aac2 <__cvt+0xba>
 800aaac:	2200      	movs	r2, #0
 800aaae:	2300      	movs	r3, #0
 800aab0:	4630      	mov	r0, r6
 800aab2:	4639      	mov	r1, r7
 800aab4:	f7f6 f828 	bl	8000b08 <__aeabi_dcmpeq>
 800aab8:	b918      	cbnz	r0, 800aac2 <__cvt+0xba>
 800aaba:	f1c4 0401 	rsb	r4, r4, #1
 800aabe:	f8ca 4000 	str.w	r4, [sl]
 800aac2:	f8da 3000 	ldr.w	r3, [sl]
 800aac6:	4499      	add	r9, r3
 800aac8:	e7d3      	b.n	800aa72 <__cvt+0x6a>
 800aaca:	1c59      	adds	r1, r3, #1
 800aacc:	9103      	str	r1, [sp, #12]
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	e7d9      	b.n	800aa86 <__cvt+0x7e>

0800aad2 <__exponent>:
 800aad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aad4:	2900      	cmp	r1, #0
 800aad6:	bfba      	itte	lt
 800aad8:	4249      	neglt	r1, r1
 800aada:	232d      	movlt	r3, #45	@ 0x2d
 800aadc:	232b      	movge	r3, #43	@ 0x2b
 800aade:	2909      	cmp	r1, #9
 800aae0:	7002      	strb	r2, [r0, #0]
 800aae2:	7043      	strb	r3, [r0, #1]
 800aae4:	dd29      	ble.n	800ab3a <__exponent+0x68>
 800aae6:	f10d 0307 	add.w	r3, sp, #7
 800aaea:	461d      	mov	r5, r3
 800aaec:	270a      	movs	r7, #10
 800aaee:	461a      	mov	r2, r3
 800aaf0:	fbb1 f6f7 	udiv	r6, r1, r7
 800aaf4:	fb07 1416 	mls	r4, r7, r6, r1
 800aaf8:	3430      	adds	r4, #48	@ 0x30
 800aafa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aafe:	460c      	mov	r4, r1
 800ab00:	2c63      	cmp	r4, #99	@ 0x63
 800ab02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab06:	4631      	mov	r1, r6
 800ab08:	dcf1      	bgt.n	800aaee <__exponent+0x1c>
 800ab0a:	3130      	adds	r1, #48	@ 0x30
 800ab0c:	1e94      	subs	r4, r2, #2
 800ab0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ab12:	1c41      	adds	r1, r0, #1
 800ab14:	4623      	mov	r3, r4
 800ab16:	42ab      	cmp	r3, r5
 800ab18:	d30a      	bcc.n	800ab30 <__exponent+0x5e>
 800ab1a:	f10d 0309 	add.w	r3, sp, #9
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	42ac      	cmp	r4, r5
 800ab22:	bf88      	it	hi
 800ab24:	2300      	movhi	r3, #0
 800ab26:	3302      	adds	r3, #2
 800ab28:	4403      	add	r3, r0
 800ab2a:	1a18      	subs	r0, r3, r0
 800ab2c:	b003      	add	sp, #12
 800ab2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab30:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ab34:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ab38:	e7ed      	b.n	800ab16 <__exponent+0x44>
 800ab3a:	2330      	movs	r3, #48	@ 0x30
 800ab3c:	3130      	adds	r1, #48	@ 0x30
 800ab3e:	7083      	strb	r3, [r0, #2]
 800ab40:	70c1      	strb	r1, [r0, #3]
 800ab42:	1d03      	adds	r3, r0, #4
 800ab44:	e7f1      	b.n	800ab2a <__exponent+0x58>
	...

0800ab48 <_printf_float>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	b08d      	sub	sp, #52	@ 0x34
 800ab4e:	460c      	mov	r4, r1
 800ab50:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab54:	4616      	mov	r6, r2
 800ab56:	461f      	mov	r7, r3
 800ab58:	4605      	mov	r5, r0
 800ab5a:	f000 fcdb 	bl	800b514 <_localeconv_r>
 800ab5e:	6803      	ldr	r3, [r0, #0]
 800ab60:	9304      	str	r3, [sp, #16]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f5 fba4 	bl	80002b0 <strlen>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab6c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab70:	9005      	str	r0, [sp, #20]
 800ab72:	3307      	adds	r3, #7
 800ab74:	f023 0307 	bic.w	r3, r3, #7
 800ab78:	f103 0208 	add.w	r2, r3, #8
 800ab7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ab80:	f8d4 b000 	ldr.w	fp, [r4]
 800ab84:	f8c8 2000 	str.w	r2, [r8]
 800ab88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab8c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	f8cd 8018 	str.w	r8, [sp, #24]
 800ab96:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ab9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab9e:	4b9c      	ldr	r3, [pc, #624]	@ (800ae10 <_printf_float+0x2c8>)
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	f7f5 ffe2 	bl	8000b6c <__aeabi_dcmpun>
 800aba8:	bb70      	cbnz	r0, 800ac08 <_printf_float+0xc0>
 800abaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800abae:	4b98      	ldr	r3, [pc, #608]	@ (800ae10 <_printf_float+0x2c8>)
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295
 800abb4:	f7f5 ffbc 	bl	8000b30 <__aeabi_dcmple>
 800abb8:	bb30      	cbnz	r0, 800ac08 <_printf_float+0xc0>
 800abba:	2200      	movs	r2, #0
 800abbc:	2300      	movs	r3, #0
 800abbe:	4640      	mov	r0, r8
 800abc0:	4649      	mov	r1, r9
 800abc2:	f7f5 ffab 	bl	8000b1c <__aeabi_dcmplt>
 800abc6:	b110      	cbz	r0, 800abce <_printf_float+0x86>
 800abc8:	232d      	movs	r3, #45	@ 0x2d
 800abca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abce:	4a91      	ldr	r2, [pc, #580]	@ (800ae14 <_printf_float+0x2cc>)
 800abd0:	4b91      	ldr	r3, [pc, #580]	@ (800ae18 <_printf_float+0x2d0>)
 800abd2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abd6:	bf94      	ite	ls
 800abd8:	4690      	movls	r8, r2
 800abda:	4698      	movhi	r8, r3
 800abdc:	2303      	movs	r3, #3
 800abde:	6123      	str	r3, [r4, #16]
 800abe0:	f02b 0304 	bic.w	r3, fp, #4
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	f04f 0900 	mov.w	r9, #0
 800abea:	9700      	str	r7, [sp, #0]
 800abec:	4633      	mov	r3, r6
 800abee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800abf0:	4621      	mov	r1, r4
 800abf2:	4628      	mov	r0, r5
 800abf4:	f000 f9d2 	bl	800af9c <_printf_common>
 800abf8:	3001      	adds	r0, #1
 800abfa:	f040 808d 	bne.w	800ad18 <_printf_float+0x1d0>
 800abfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ac02:	b00d      	add	sp, #52	@ 0x34
 800ac04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac08:	4642      	mov	r2, r8
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 ffac 	bl	8000b6c <__aeabi_dcmpun>
 800ac14:	b140      	cbz	r0, 800ac28 <_printf_float+0xe0>
 800ac16:	464b      	mov	r3, r9
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	bfbc      	itt	lt
 800ac1c:	232d      	movlt	r3, #45	@ 0x2d
 800ac1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ac22:	4a7e      	ldr	r2, [pc, #504]	@ (800ae1c <_printf_float+0x2d4>)
 800ac24:	4b7e      	ldr	r3, [pc, #504]	@ (800ae20 <_printf_float+0x2d8>)
 800ac26:	e7d4      	b.n	800abd2 <_printf_float+0x8a>
 800ac28:	6863      	ldr	r3, [r4, #4]
 800ac2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ac2e:	9206      	str	r2, [sp, #24]
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	d13b      	bne.n	800acac <_printf_float+0x164>
 800ac34:	2306      	movs	r3, #6
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6022      	str	r2, [r4, #0]
 800ac40:	9303      	str	r3, [sp, #12]
 800ac42:	ab0a      	add	r3, sp, #40	@ 0x28
 800ac44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ac48:	ab09      	add	r3, sp, #36	@ 0x24
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	ec49 8b10 	vmov	d0, r8, r9
 800ac52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7ff fed6 	bl	800aa08 <__cvt>
 800ac5c:	9b06      	ldr	r3, [sp, #24]
 800ac5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ac60:	2b47      	cmp	r3, #71	@ 0x47
 800ac62:	4680      	mov	r8, r0
 800ac64:	d129      	bne.n	800acba <_printf_float+0x172>
 800ac66:	1cc8      	adds	r0, r1, #3
 800ac68:	db02      	blt.n	800ac70 <_printf_float+0x128>
 800ac6a:	6863      	ldr	r3, [r4, #4]
 800ac6c:	4299      	cmp	r1, r3
 800ac6e:	dd41      	ble.n	800acf4 <_printf_float+0x1ac>
 800ac70:	f1aa 0a02 	sub.w	sl, sl, #2
 800ac74:	fa5f fa8a 	uxtb.w	sl, sl
 800ac78:	3901      	subs	r1, #1
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac80:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac82:	f7ff ff26 	bl	800aad2 <__exponent>
 800ac86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac88:	1813      	adds	r3, r2, r0
 800ac8a:	2a01      	cmp	r2, #1
 800ac8c:	4681      	mov	r9, r0
 800ac8e:	6123      	str	r3, [r4, #16]
 800ac90:	dc02      	bgt.n	800ac98 <_printf_float+0x150>
 800ac92:	6822      	ldr	r2, [r4, #0]
 800ac94:	07d2      	lsls	r2, r2, #31
 800ac96:	d501      	bpl.n	800ac9c <_printf_float+0x154>
 800ac98:	3301      	adds	r3, #1
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d0a2      	beq.n	800abea <_printf_float+0xa2>
 800aca4:	232d      	movs	r3, #45	@ 0x2d
 800aca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acaa:	e79e      	b.n	800abea <_printf_float+0xa2>
 800acac:	9a06      	ldr	r2, [sp, #24]
 800acae:	2a47      	cmp	r2, #71	@ 0x47
 800acb0:	d1c2      	bne.n	800ac38 <_printf_float+0xf0>
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1c0      	bne.n	800ac38 <_printf_float+0xf0>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e7bd      	b.n	800ac36 <_printf_float+0xee>
 800acba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800acbe:	d9db      	bls.n	800ac78 <_printf_float+0x130>
 800acc0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800acc4:	d118      	bne.n	800acf8 <_printf_float+0x1b0>
 800acc6:	2900      	cmp	r1, #0
 800acc8:	6863      	ldr	r3, [r4, #4]
 800acca:	dd0b      	ble.n	800ace4 <_printf_float+0x19c>
 800accc:	6121      	str	r1, [r4, #16]
 800acce:	b913      	cbnz	r3, 800acd6 <_printf_float+0x18e>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	07d0      	lsls	r0, r2, #31
 800acd4:	d502      	bpl.n	800acdc <_printf_float+0x194>
 800acd6:	3301      	adds	r3, #1
 800acd8:	440b      	add	r3, r1
 800acda:	6123      	str	r3, [r4, #16]
 800acdc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800acde:	f04f 0900 	mov.w	r9, #0
 800ace2:	e7db      	b.n	800ac9c <_printf_float+0x154>
 800ace4:	b913      	cbnz	r3, 800acec <_printf_float+0x1a4>
 800ace6:	6822      	ldr	r2, [r4, #0]
 800ace8:	07d2      	lsls	r2, r2, #31
 800acea:	d501      	bpl.n	800acf0 <_printf_float+0x1a8>
 800acec:	3302      	adds	r3, #2
 800acee:	e7f4      	b.n	800acda <_printf_float+0x192>
 800acf0:	2301      	movs	r3, #1
 800acf2:	e7f2      	b.n	800acda <_printf_float+0x192>
 800acf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800acf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acfa:	4299      	cmp	r1, r3
 800acfc:	db05      	blt.n	800ad0a <_printf_float+0x1c2>
 800acfe:	6823      	ldr	r3, [r4, #0]
 800ad00:	6121      	str	r1, [r4, #16]
 800ad02:	07d8      	lsls	r0, r3, #31
 800ad04:	d5ea      	bpl.n	800acdc <_printf_float+0x194>
 800ad06:	1c4b      	adds	r3, r1, #1
 800ad08:	e7e7      	b.n	800acda <_printf_float+0x192>
 800ad0a:	2900      	cmp	r1, #0
 800ad0c:	bfd4      	ite	le
 800ad0e:	f1c1 0202 	rsble	r2, r1, #2
 800ad12:	2201      	movgt	r2, #1
 800ad14:	4413      	add	r3, r2
 800ad16:	e7e0      	b.n	800acda <_printf_float+0x192>
 800ad18:	6823      	ldr	r3, [r4, #0]
 800ad1a:	055a      	lsls	r2, r3, #21
 800ad1c:	d407      	bmi.n	800ad2e <_printf_float+0x1e6>
 800ad1e:	6923      	ldr	r3, [r4, #16]
 800ad20:	4642      	mov	r2, r8
 800ad22:	4631      	mov	r1, r6
 800ad24:	4628      	mov	r0, r5
 800ad26:	47b8      	blx	r7
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d12b      	bne.n	800ad84 <_printf_float+0x23c>
 800ad2c:	e767      	b.n	800abfe <_printf_float+0xb6>
 800ad2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ad32:	f240 80dd 	bls.w	800aef0 <_printf_float+0x3a8>
 800ad36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f7f5 fee3 	bl	8000b08 <__aeabi_dcmpeq>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d033      	beq.n	800adae <_printf_float+0x266>
 800ad46:	4a37      	ldr	r2, [pc, #220]	@ (800ae24 <_printf_float+0x2dc>)
 800ad48:	2301      	movs	r3, #1
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	47b8      	blx	r7
 800ad50:	3001      	adds	r0, #1
 800ad52:	f43f af54 	beq.w	800abfe <_printf_float+0xb6>
 800ad56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ad5a:	4543      	cmp	r3, r8
 800ad5c:	db02      	blt.n	800ad64 <_printf_float+0x21c>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	07d8      	lsls	r0, r3, #31
 800ad62:	d50f      	bpl.n	800ad84 <_printf_float+0x23c>
 800ad64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad68:	4631      	mov	r1, r6
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	47b8      	blx	r7
 800ad6e:	3001      	adds	r0, #1
 800ad70:	f43f af45 	beq.w	800abfe <_printf_float+0xb6>
 800ad74:	f04f 0900 	mov.w	r9, #0
 800ad78:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad7c:	f104 0a1a 	add.w	sl, r4, #26
 800ad80:	45c8      	cmp	r8, r9
 800ad82:	dc09      	bgt.n	800ad98 <_printf_float+0x250>
 800ad84:	6823      	ldr	r3, [r4, #0]
 800ad86:	079b      	lsls	r3, r3, #30
 800ad88:	f100 8103 	bmi.w	800af92 <_printf_float+0x44a>
 800ad8c:	68e0      	ldr	r0, [r4, #12]
 800ad8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad90:	4298      	cmp	r0, r3
 800ad92:	bfb8      	it	lt
 800ad94:	4618      	movlt	r0, r3
 800ad96:	e734      	b.n	800ac02 <_printf_float+0xba>
 800ad98:	2301      	movs	r3, #1
 800ad9a:	4652      	mov	r2, sl
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4628      	mov	r0, r5
 800ada0:	47b8      	blx	r7
 800ada2:	3001      	adds	r0, #1
 800ada4:	f43f af2b 	beq.w	800abfe <_printf_float+0xb6>
 800ada8:	f109 0901 	add.w	r9, r9, #1
 800adac:	e7e8      	b.n	800ad80 <_printf_float+0x238>
 800adae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dc39      	bgt.n	800ae28 <_printf_float+0x2e0>
 800adb4:	4a1b      	ldr	r2, [pc, #108]	@ (800ae24 <_printf_float+0x2dc>)
 800adb6:	2301      	movs	r3, #1
 800adb8:	4631      	mov	r1, r6
 800adba:	4628      	mov	r0, r5
 800adbc:	47b8      	blx	r7
 800adbe:	3001      	adds	r0, #1
 800adc0:	f43f af1d 	beq.w	800abfe <_printf_float+0xb6>
 800adc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800adc8:	ea59 0303 	orrs.w	r3, r9, r3
 800adcc:	d102      	bne.n	800add4 <_printf_float+0x28c>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	07d9      	lsls	r1, r3, #31
 800add2:	d5d7      	bpl.n	800ad84 <_printf_float+0x23c>
 800add4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add8:	4631      	mov	r1, r6
 800adda:	4628      	mov	r0, r5
 800addc:	47b8      	blx	r7
 800adde:	3001      	adds	r0, #1
 800ade0:	f43f af0d 	beq.w	800abfe <_printf_float+0xb6>
 800ade4:	f04f 0a00 	mov.w	sl, #0
 800ade8:	f104 0b1a 	add.w	fp, r4, #26
 800adec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adee:	425b      	negs	r3, r3
 800adf0:	4553      	cmp	r3, sl
 800adf2:	dc01      	bgt.n	800adf8 <_printf_float+0x2b0>
 800adf4:	464b      	mov	r3, r9
 800adf6:	e793      	b.n	800ad20 <_printf_float+0x1d8>
 800adf8:	2301      	movs	r3, #1
 800adfa:	465a      	mov	r2, fp
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	f43f aefb 	beq.w	800abfe <_printf_float+0xb6>
 800ae08:	f10a 0a01 	add.w	sl, sl, #1
 800ae0c:	e7ee      	b.n	800adec <_printf_float+0x2a4>
 800ae0e:	bf00      	nop
 800ae10:	7fefffff 	.word	0x7fefffff
 800ae14:	08010ce0 	.word	0x08010ce0
 800ae18:	08010ce4 	.word	0x08010ce4
 800ae1c:	08010ce8 	.word	0x08010ce8
 800ae20:	08010cec 	.word	0x08010cec
 800ae24:	08010cf0 	.word	0x08010cf0
 800ae28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ae2e:	4553      	cmp	r3, sl
 800ae30:	bfa8      	it	ge
 800ae32:	4653      	movge	r3, sl
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	4699      	mov	r9, r3
 800ae38:	dc36      	bgt.n	800aea8 <_printf_float+0x360>
 800ae3a:	f04f 0b00 	mov.w	fp, #0
 800ae3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae42:	f104 021a 	add.w	r2, r4, #26
 800ae46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ae48:	9306      	str	r3, [sp, #24]
 800ae4a:	eba3 0309 	sub.w	r3, r3, r9
 800ae4e:	455b      	cmp	r3, fp
 800ae50:	dc31      	bgt.n	800aeb6 <_printf_float+0x36e>
 800ae52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae54:	459a      	cmp	sl, r3
 800ae56:	dc3a      	bgt.n	800aece <_printf_float+0x386>
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	07da      	lsls	r2, r3, #31
 800ae5c:	d437      	bmi.n	800aece <_printf_float+0x386>
 800ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae60:	ebaa 0903 	sub.w	r9, sl, r3
 800ae64:	9b06      	ldr	r3, [sp, #24]
 800ae66:	ebaa 0303 	sub.w	r3, sl, r3
 800ae6a:	4599      	cmp	r9, r3
 800ae6c:	bfa8      	it	ge
 800ae6e:	4699      	movge	r9, r3
 800ae70:	f1b9 0f00 	cmp.w	r9, #0
 800ae74:	dc33      	bgt.n	800aede <_printf_float+0x396>
 800ae76:	f04f 0800 	mov.w	r8, #0
 800ae7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae7e:	f104 0b1a 	add.w	fp, r4, #26
 800ae82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae84:	ebaa 0303 	sub.w	r3, sl, r3
 800ae88:	eba3 0309 	sub.w	r3, r3, r9
 800ae8c:	4543      	cmp	r3, r8
 800ae8e:	f77f af79 	ble.w	800ad84 <_printf_float+0x23c>
 800ae92:	2301      	movs	r3, #1
 800ae94:	465a      	mov	r2, fp
 800ae96:	4631      	mov	r1, r6
 800ae98:	4628      	mov	r0, r5
 800ae9a:	47b8      	blx	r7
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	f43f aeae 	beq.w	800abfe <_printf_float+0xb6>
 800aea2:	f108 0801 	add.w	r8, r8, #1
 800aea6:	e7ec      	b.n	800ae82 <_printf_float+0x33a>
 800aea8:	4642      	mov	r2, r8
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4628      	mov	r0, r5
 800aeae:	47b8      	blx	r7
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d1c2      	bne.n	800ae3a <_printf_float+0x2f2>
 800aeb4:	e6a3      	b.n	800abfe <_printf_float+0xb6>
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	4631      	mov	r1, r6
 800aeba:	4628      	mov	r0, r5
 800aebc:	9206      	str	r2, [sp, #24]
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	f43f ae9c 	beq.w	800abfe <_printf_float+0xb6>
 800aec6:	9a06      	ldr	r2, [sp, #24]
 800aec8:	f10b 0b01 	add.w	fp, fp, #1
 800aecc:	e7bb      	b.n	800ae46 <_printf_float+0x2fe>
 800aece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aed2:	4631      	mov	r1, r6
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b8      	blx	r7
 800aed8:	3001      	adds	r0, #1
 800aeda:	d1c0      	bne.n	800ae5e <_printf_float+0x316>
 800aedc:	e68f      	b.n	800abfe <_printf_float+0xb6>
 800aede:	9a06      	ldr	r2, [sp, #24]
 800aee0:	464b      	mov	r3, r9
 800aee2:	4442      	add	r2, r8
 800aee4:	4631      	mov	r1, r6
 800aee6:	4628      	mov	r0, r5
 800aee8:	47b8      	blx	r7
 800aeea:	3001      	adds	r0, #1
 800aeec:	d1c3      	bne.n	800ae76 <_printf_float+0x32e>
 800aeee:	e686      	b.n	800abfe <_printf_float+0xb6>
 800aef0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800aef4:	f1ba 0f01 	cmp.w	sl, #1
 800aef8:	dc01      	bgt.n	800aefe <_printf_float+0x3b6>
 800aefa:	07db      	lsls	r3, r3, #31
 800aefc:	d536      	bpl.n	800af6c <_printf_float+0x424>
 800aefe:	2301      	movs	r3, #1
 800af00:	4642      	mov	r2, r8
 800af02:	4631      	mov	r1, r6
 800af04:	4628      	mov	r0, r5
 800af06:	47b8      	blx	r7
 800af08:	3001      	adds	r0, #1
 800af0a:	f43f ae78 	beq.w	800abfe <_printf_float+0xb6>
 800af0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af12:	4631      	mov	r1, r6
 800af14:	4628      	mov	r0, r5
 800af16:	47b8      	blx	r7
 800af18:	3001      	adds	r0, #1
 800af1a:	f43f ae70 	beq.w	800abfe <_printf_float+0xb6>
 800af1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800af22:	2200      	movs	r2, #0
 800af24:	2300      	movs	r3, #0
 800af26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af2a:	f7f5 fded 	bl	8000b08 <__aeabi_dcmpeq>
 800af2e:	b9c0      	cbnz	r0, 800af62 <_printf_float+0x41a>
 800af30:	4653      	mov	r3, sl
 800af32:	f108 0201 	add.w	r2, r8, #1
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	47b8      	blx	r7
 800af3c:	3001      	adds	r0, #1
 800af3e:	d10c      	bne.n	800af5a <_printf_float+0x412>
 800af40:	e65d      	b.n	800abfe <_printf_float+0xb6>
 800af42:	2301      	movs	r3, #1
 800af44:	465a      	mov	r2, fp
 800af46:	4631      	mov	r1, r6
 800af48:	4628      	mov	r0, r5
 800af4a:	47b8      	blx	r7
 800af4c:	3001      	adds	r0, #1
 800af4e:	f43f ae56 	beq.w	800abfe <_printf_float+0xb6>
 800af52:	f108 0801 	add.w	r8, r8, #1
 800af56:	45d0      	cmp	r8, sl
 800af58:	dbf3      	blt.n	800af42 <_printf_float+0x3fa>
 800af5a:	464b      	mov	r3, r9
 800af5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800af60:	e6df      	b.n	800ad22 <_printf_float+0x1da>
 800af62:	f04f 0800 	mov.w	r8, #0
 800af66:	f104 0b1a 	add.w	fp, r4, #26
 800af6a:	e7f4      	b.n	800af56 <_printf_float+0x40e>
 800af6c:	2301      	movs	r3, #1
 800af6e:	4642      	mov	r2, r8
 800af70:	e7e1      	b.n	800af36 <_printf_float+0x3ee>
 800af72:	2301      	movs	r3, #1
 800af74:	464a      	mov	r2, r9
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	f43f ae3e 	beq.w	800abfe <_printf_float+0xb6>
 800af82:	f108 0801 	add.w	r8, r8, #1
 800af86:	68e3      	ldr	r3, [r4, #12]
 800af88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af8a:	1a5b      	subs	r3, r3, r1
 800af8c:	4543      	cmp	r3, r8
 800af8e:	dcf0      	bgt.n	800af72 <_printf_float+0x42a>
 800af90:	e6fc      	b.n	800ad8c <_printf_float+0x244>
 800af92:	f04f 0800 	mov.w	r8, #0
 800af96:	f104 0919 	add.w	r9, r4, #25
 800af9a:	e7f4      	b.n	800af86 <_printf_float+0x43e>

0800af9c <_printf_common>:
 800af9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa0:	4616      	mov	r6, r2
 800afa2:	4698      	mov	r8, r3
 800afa4:	688a      	ldr	r2, [r1, #8]
 800afa6:	690b      	ldr	r3, [r1, #16]
 800afa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800afac:	4293      	cmp	r3, r2
 800afae:	bfb8      	it	lt
 800afb0:	4613      	movlt	r3, r2
 800afb2:	6033      	str	r3, [r6, #0]
 800afb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800afb8:	4607      	mov	r7, r0
 800afba:	460c      	mov	r4, r1
 800afbc:	b10a      	cbz	r2, 800afc2 <_printf_common+0x26>
 800afbe:	3301      	adds	r3, #1
 800afc0:	6033      	str	r3, [r6, #0]
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	0699      	lsls	r1, r3, #26
 800afc6:	bf42      	ittt	mi
 800afc8:	6833      	ldrmi	r3, [r6, #0]
 800afca:	3302      	addmi	r3, #2
 800afcc:	6033      	strmi	r3, [r6, #0]
 800afce:	6825      	ldr	r5, [r4, #0]
 800afd0:	f015 0506 	ands.w	r5, r5, #6
 800afd4:	d106      	bne.n	800afe4 <_printf_common+0x48>
 800afd6:	f104 0a19 	add.w	sl, r4, #25
 800afda:	68e3      	ldr	r3, [r4, #12]
 800afdc:	6832      	ldr	r2, [r6, #0]
 800afde:	1a9b      	subs	r3, r3, r2
 800afe0:	42ab      	cmp	r3, r5
 800afe2:	dc26      	bgt.n	800b032 <_printf_common+0x96>
 800afe4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	3b00      	subs	r3, #0
 800afec:	bf18      	it	ne
 800afee:	2301      	movne	r3, #1
 800aff0:	0692      	lsls	r2, r2, #26
 800aff2:	d42b      	bmi.n	800b04c <_printf_common+0xb0>
 800aff4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aff8:	4641      	mov	r1, r8
 800affa:	4638      	mov	r0, r7
 800affc:	47c8      	blx	r9
 800affe:	3001      	adds	r0, #1
 800b000:	d01e      	beq.n	800b040 <_printf_common+0xa4>
 800b002:	6823      	ldr	r3, [r4, #0]
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	f003 0306 	and.w	r3, r3, #6
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	bf02      	ittt	eq
 800b00e:	68e5      	ldreq	r5, [r4, #12]
 800b010:	6833      	ldreq	r3, [r6, #0]
 800b012:	1aed      	subeq	r5, r5, r3
 800b014:	68a3      	ldr	r3, [r4, #8]
 800b016:	bf0c      	ite	eq
 800b018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b01c:	2500      	movne	r5, #0
 800b01e:	4293      	cmp	r3, r2
 800b020:	bfc4      	itt	gt
 800b022:	1a9b      	subgt	r3, r3, r2
 800b024:	18ed      	addgt	r5, r5, r3
 800b026:	2600      	movs	r6, #0
 800b028:	341a      	adds	r4, #26
 800b02a:	42b5      	cmp	r5, r6
 800b02c:	d11a      	bne.n	800b064 <_printf_common+0xc8>
 800b02e:	2000      	movs	r0, #0
 800b030:	e008      	b.n	800b044 <_printf_common+0xa8>
 800b032:	2301      	movs	r3, #1
 800b034:	4652      	mov	r2, sl
 800b036:	4641      	mov	r1, r8
 800b038:	4638      	mov	r0, r7
 800b03a:	47c8      	blx	r9
 800b03c:	3001      	adds	r0, #1
 800b03e:	d103      	bne.n	800b048 <_printf_common+0xac>
 800b040:	f04f 30ff 	mov.w	r0, #4294967295
 800b044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b048:	3501      	adds	r5, #1
 800b04a:	e7c6      	b.n	800afda <_printf_common+0x3e>
 800b04c:	18e1      	adds	r1, r4, r3
 800b04e:	1c5a      	adds	r2, r3, #1
 800b050:	2030      	movs	r0, #48	@ 0x30
 800b052:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b056:	4422      	add	r2, r4
 800b058:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b05c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b060:	3302      	adds	r3, #2
 800b062:	e7c7      	b.n	800aff4 <_printf_common+0x58>
 800b064:	2301      	movs	r3, #1
 800b066:	4622      	mov	r2, r4
 800b068:	4641      	mov	r1, r8
 800b06a:	4638      	mov	r0, r7
 800b06c:	47c8      	blx	r9
 800b06e:	3001      	adds	r0, #1
 800b070:	d0e6      	beq.n	800b040 <_printf_common+0xa4>
 800b072:	3601      	adds	r6, #1
 800b074:	e7d9      	b.n	800b02a <_printf_common+0x8e>
	...

0800b078 <_printf_i>:
 800b078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b07c:	7e0f      	ldrb	r7, [r1, #24]
 800b07e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b080:	2f78      	cmp	r7, #120	@ 0x78
 800b082:	4691      	mov	r9, r2
 800b084:	4680      	mov	r8, r0
 800b086:	460c      	mov	r4, r1
 800b088:	469a      	mov	sl, r3
 800b08a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b08e:	d807      	bhi.n	800b0a0 <_printf_i+0x28>
 800b090:	2f62      	cmp	r7, #98	@ 0x62
 800b092:	d80a      	bhi.n	800b0aa <_printf_i+0x32>
 800b094:	2f00      	cmp	r7, #0
 800b096:	f000 80d2 	beq.w	800b23e <_printf_i+0x1c6>
 800b09a:	2f58      	cmp	r7, #88	@ 0x58
 800b09c:	f000 80b9 	beq.w	800b212 <_printf_i+0x19a>
 800b0a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b0a8:	e03a      	b.n	800b120 <_printf_i+0xa8>
 800b0aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b0ae:	2b15      	cmp	r3, #21
 800b0b0:	d8f6      	bhi.n	800b0a0 <_printf_i+0x28>
 800b0b2:	a101      	add	r1, pc, #4	@ (adr r1, 800b0b8 <_printf_i+0x40>)
 800b0b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b0b8:	0800b111 	.word	0x0800b111
 800b0bc:	0800b125 	.word	0x0800b125
 800b0c0:	0800b0a1 	.word	0x0800b0a1
 800b0c4:	0800b0a1 	.word	0x0800b0a1
 800b0c8:	0800b0a1 	.word	0x0800b0a1
 800b0cc:	0800b0a1 	.word	0x0800b0a1
 800b0d0:	0800b125 	.word	0x0800b125
 800b0d4:	0800b0a1 	.word	0x0800b0a1
 800b0d8:	0800b0a1 	.word	0x0800b0a1
 800b0dc:	0800b0a1 	.word	0x0800b0a1
 800b0e0:	0800b0a1 	.word	0x0800b0a1
 800b0e4:	0800b225 	.word	0x0800b225
 800b0e8:	0800b14f 	.word	0x0800b14f
 800b0ec:	0800b1df 	.word	0x0800b1df
 800b0f0:	0800b0a1 	.word	0x0800b0a1
 800b0f4:	0800b0a1 	.word	0x0800b0a1
 800b0f8:	0800b247 	.word	0x0800b247
 800b0fc:	0800b0a1 	.word	0x0800b0a1
 800b100:	0800b14f 	.word	0x0800b14f
 800b104:	0800b0a1 	.word	0x0800b0a1
 800b108:	0800b0a1 	.word	0x0800b0a1
 800b10c:	0800b1e7 	.word	0x0800b1e7
 800b110:	6833      	ldr	r3, [r6, #0]
 800b112:	1d1a      	adds	r2, r3, #4
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6032      	str	r2, [r6, #0]
 800b118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b11c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b120:	2301      	movs	r3, #1
 800b122:	e09d      	b.n	800b260 <_printf_i+0x1e8>
 800b124:	6833      	ldr	r3, [r6, #0]
 800b126:	6820      	ldr	r0, [r4, #0]
 800b128:	1d19      	adds	r1, r3, #4
 800b12a:	6031      	str	r1, [r6, #0]
 800b12c:	0606      	lsls	r6, r0, #24
 800b12e:	d501      	bpl.n	800b134 <_printf_i+0xbc>
 800b130:	681d      	ldr	r5, [r3, #0]
 800b132:	e003      	b.n	800b13c <_printf_i+0xc4>
 800b134:	0645      	lsls	r5, r0, #25
 800b136:	d5fb      	bpl.n	800b130 <_printf_i+0xb8>
 800b138:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b13c:	2d00      	cmp	r5, #0
 800b13e:	da03      	bge.n	800b148 <_printf_i+0xd0>
 800b140:	232d      	movs	r3, #45	@ 0x2d
 800b142:	426d      	negs	r5, r5
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b148:	4859      	ldr	r0, [pc, #356]	@ (800b2b0 <_printf_i+0x238>)
 800b14a:	230a      	movs	r3, #10
 800b14c:	e011      	b.n	800b172 <_printf_i+0xfa>
 800b14e:	6821      	ldr	r1, [r4, #0]
 800b150:	6833      	ldr	r3, [r6, #0]
 800b152:	0608      	lsls	r0, r1, #24
 800b154:	f853 5b04 	ldr.w	r5, [r3], #4
 800b158:	d402      	bmi.n	800b160 <_printf_i+0xe8>
 800b15a:	0649      	lsls	r1, r1, #25
 800b15c:	bf48      	it	mi
 800b15e:	b2ad      	uxthmi	r5, r5
 800b160:	2f6f      	cmp	r7, #111	@ 0x6f
 800b162:	4853      	ldr	r0, [pc, #332]	@ (800b2b0 <_printf_i+0x238>)
 800b164:	6033      	str	r3, [r6, #0]
 800b166:	bf14      	ite	ne
 800b168:	230a      	movne	r3, #10
 800b16a:	2308      	moveq	r3, #8
 800b16c:	2100      	movs	r1, #0
 800b16e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b172:	6866      	ldr	r6, [r4, #4]
 800b174:	60a6      	str	r6, [r4, #8]
 800b176:	2e00      	cmp	r6, #0
 800b178:	bfa2      	ittt	ge
 800b17a:	6821      	ldrge	r1, [r4, #0]
 800b17c:	f021 0104 	bicge.w	r1, r1, #4
 800b180:	6021      	strge	r1, [r4, #0]
 800b182:	b90d      	cbnz	r5, 800b188 <_printf_i+0x110>
 800b184:	2e00      	cmp	r6, #0
 800b186:	d04b      	beq.n	800b220 <_printf_i+0x1a8>
 800b188:	4616      	mov	r6, r2
 800b18a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b18e:	fb03 5711 	mls	r7, r3, r1, r5
 800b192:	5dc7      	ldrb	r7, [r0, r7]
 800b194:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b198:	462f      	mov	r7, r5
 800b19a:	42bb      	cmp	r3, r7
 800b19c:	460d      	mov	r5, r1
 800b19e:	d9f4      	bls.n	800b18a <_printf_i+0x112>
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d10b      	bne.n	800b1bc <_printf_i+0x144>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	07df      	lsls	r7, r3, #31
 800b1a8:	d508      	bpl.n	800b1bc <_printf_i+0x144>
 800b1aa:	6923      	ldr	r3, [r4, #16]
 800b1ac:	6861      	ldr	r1, [r4, #4]
 800b1ae:	4299      	cmp	r1, r3
 800b1b0:	bfde      	ittt	le
 800b1b2:	2330      	movle	r3, #48	@ 0x30
 800b1b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b1b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b1bc:	1b92      	subs	r2, r2, r6
 800b1be:	6122      	str	r2, [r4, #16]
 800b1c0:	f8cd a000 	str.w	sl, [sp]
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	aa03      	add	r2, sp, #12
 800b1c8:	4621      	mov	r1, r4
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	f7ff fee6 	bl	800af9c <_printf_common>
 800b1d0:	3001      	adds	r0, #1
 800b1d2:	d14a      	bne.n	800b26a <_printf_i+0x1f2>
 800b1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d8:	b004      	add	sp, #16
 800b1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1de:	6823      	ldr	r3, [r4, #0]
 800b1e0:	f043 0320 	orr.w	r3, r3, #32
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	4833      	ldr	r0, [pc, #204]	@ (800b2b4 <_printf_i+0x23c>)
 800b1e8:	2778      	movs	r7, #120	@ 0x78
 800b1ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b1ee:	6823      	ldr	r3, [r4, #0]
 800b1f0:	6831      	ldr	r1, [r6, #0]
 800b1f2:	061f      	lsls	r7, r3, #24
 800b1f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800b1f8:	d402      	bmi.n	800b200 <_printf_i+0x188>
 800b1fa:	065f      	lsls	r7, r3, #25
 800b1fc:	bf48      	it	mi
 800b1fe:	b2ad      	uxthmi	r5, r5
 800b200:	6031      	str	r1, [r6, #0]
 800b202:	07d9      	lsls	r1, r3, #31
 800b204:	bf44      	itt	mi
 800b206:	f043 0320 	orrmi.w	r3, r3, #32
 800b20a:	6023      	strmi	r3, [r4, #0]
 800b20c:	b11d      	cbz	r5, 800b216 <_printf_i+0x19e>
 800b20e:	2310      	movs	r3, #16
 800b210:	e7ac      	b.n	800b16c <_printf_i+0xf4>
 800b212:	4827      	ldr	r0, [pc, #156]	@ (800b2b0 <_printf_i+0x238>)
 800b214:	e7e9      	b.n	800b1ea <_printf_i+0x172>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	f023 0320 	bic.w	r3, r3, #32
 800b21c:	6023      	str	r3, [r4, #0]
 800b21e:	e7f6      	b.n	800b20e <_printf_i+0x196>
 800b220:	4616      	mov	r6, r2
 800b222:	e7bd      	b.n	800b1a0 <_printf_i+0x128>
 800b224:	6833      	ldr	r3, [r6, #0]
 800b226:	6825      	ldr	r5, [r4, #0]
 800b228:	6961      	ldr	r1, [r4, #20]
 800b22a:	1d18      	adds	r0, r3, #4
 800b22c:	6030      	str	r0, [r6, #0]
 800b22e:	062e      	lsls	r6, r5, #24
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	d501      	bpl.n	800b238 <_printf_i+0x1c0>
 800b234:	6019      	str	r1, [r3, #0]
 800b236:	e002      	b.n	800b23e <_printf_i+0x1c6>
 800b238:	0668      	lsls	r0, r5, #25
 800b23a:	d5fb      	bpl.n	800b234 <_printf_i+0x1bc>
 800b23c:	8019      	strh	r1, [r3, #0]
 800b23e:	2300      	movs	r3, #0
 800b240:	6123      	str	r3, [r4, #16]
 800b242:	4616      	mov	r6, r2
 800b244:	e7bc      	b.n	800b1c0 <_printf_i+0x148>
 800b246:	6833      	ldr	r3, [r6, #0]
 800b248:	1d1a      	adds	r2, r3, #4
 800b24a:	6032      	str	r2, [r6, #0]
 800b24c:	681e      	ldr	r6, [r3, #0]
 800b24e:	6862      	ldr	r2, [r4, #4]
 800b250:	2100      	movs	r1, #0
 800b252:	4630      	mov	r0, r6
 800b254:	f7f4 ffdc 	bl	8000210 <memchr>
 800b258:	b108      	cbz	r0, 800b25e <_printf_i+0x1e6>
 800b25a:	1b80      	subs	r0, r0, r6
 800b25c:	6060      	str	r0, [r4, #4]
 800b25e:	6863      	ldr	r3, [r4, #4]
 800b260:	6123      	str	r3, [r4, #16]
 800b262:	2300      	movs	r3, #0
 800b264:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b268:	e7aa      	b.n	800b1c0 <_printf_i+0x148>
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	4632      	mov	r2, r6
 800b26e:	4649      	mov	r1, r9
 800b270:	4640      	mov	r0, r8
 800b272:	47d0      	blx	sl
 800b274:	3001      	adds	r0, #1
 800b276:	d0ad      	beq.n	800b1d4 <_printf_i+0x15c>
 800b278:	6823      	ldr	r3, [r4, #0]
 800b27a:	079b      	lsls	r3, r3, #30
 800b27c:	d413      	bmi.n	800b2a6 <_printf_i+0x22e>
 800b27e:	68e0      	ldr	r0, [r4, #12]
 800b280:	9b03      	ldr	r3, [sp, #12]
 800b282:	4298      	cmp	r0, r3
 800b284:	bfb8      	it	lt
 800b286:	4618      	movlt	r0, r3
 800b288:	e7a6      	b.n	800b1d8 <_printf_i+0x160>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4632      	mov	r2, r6
 800b28e:	4649      	mov	r1, r9
 800b290:	4640      	mov	r0, r8
 800b292:	47d0      	blx	sl
 800b294:	3001      	adds	r0, #1
 800b296:	d09d      	beq.n	800b1d4 <_printf_i+0x15c>
 800b298:	3501      	adds	r5, #1
 800b29a:	68e3      	ldr	r3, [r4, #12]
 800b29c:	9903      	ldr	r1, [sp, #12]
 800b29e:	1a5b      	subs	r3, r3, r1
 800b2a0:	42ab      	cmp	r3, r5
 800b2a2:	dcf2      	bgt.n	800b28a <_printf_i+0x212>
 800b2a4:	e7eb      	b.n	800b27e <_printf_i+0x206>
 800b2a6:	2500      	movs	r5, #0
 800b2a8:	f104 0619 	add.w	r6, r4, #25
 800b2ac:	e7f5      	b.n	800b29a <_printf_i+0x222>
 800b2ae:	bf00      	nop
 800b2b0:	08010cf2 	.word	0x08010cf2
 800b2b4:	08010d03 	.word	0x08010d03

0800b2b8 <std>:
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	4604      	mov	r4, r0
 800b2be:	e9c0 3300 	strd	r3, r3, [r0]
 800b2c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b2c6:	6083      	str	r3, [r0, #8]
 800b2c8:	8181      	strh	r1, [r0, #12]
 800b2ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800b2cc:	81c2      	strh	r2, [r0, #14]
 800b2ce:	6183      	str	r3, [r0, #24]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	2208      	movs	r2, #8
 800b2d4:	305c      	adds	r0, #92	@ 0x5c
 800b2d6:	f000 f914 	bl	800b502 <memset>
 800b2da:	4b0d      	ldr	r3, [pc, #52]	@ (800b310 <std+0x58>)
 800b2dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800b2de:	4b0d      	ldr	r3, [pc, #52]	@ (800b314 <std+0x5c>)
 800b2e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b318 <std+0x60>)
 800b2e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b31c <std+0x64>)
 800b2e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b2ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b320 <std+0x68>)
 800b2ec:	6224      	str	r4, [r4, #32]
 800b2ee:	429c      	cmp	r4, r3
 800b2f0:	d006      	beq.n	800b300 <std+0x48>
 800b2f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b2f6:	4294      	cmp	r4, r2
 800b2f8:	d002      	beq.n	800b300 <std+0x48>
 800b2fa:	33d0      	adds	r3, #208	@ 0xd0
 800b2fc:	429c      	cmp	r4, r3
 800b2fe:	d105      	bne.n	800b30c <std+0x54>
 800b300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b308:	f000 b978 	b.w	800b5fc <__retarget_lock_init_recursive>
 800b30c:	bd10      	pop	{r4, pc}
 800b30e:	bf00      	nop
 800b310:	0800b47d 	.word	0x0800b47d
 800b314:	0800b49f 	.word	0x0800b49f
 800b318:	0800b4d7 	.word	0x0800b4d7
 800b31c:	0800b4fb 	.word	0x0800b4fb
 800b320:	20000b8c 	.word	0x20000b8c

0800b324 <stdio_exit_handler>:
 800b324:	4a02      	ldr	r2, [pc, #8]	@ (800b330 <stdio_exit_handler+0xc>)
 800b326:	4903      	ldr	r1, [pc, #12]	@ (800b334 <stdio_exit_handler+0x10>)
 800b328:	4803      	ldr	r0, [pc, #12]	@ (800b338 <stdio_exit_handler+0x14>)
 800b32a:	f000 b869 	b.w	800b400 <_fwalk_sglue>
 800b32e:	bf00      	nop
 800b330:	20000050 	.word	0x20000050
 800b334:	0800cf5d 	.word	0x0800cf5d
 800b338:	20000060 	.word	0x20000060

0800b33c <cleanup_stdio>:
 800b33c:	6841      	ldr	r1, [r0, #4]
 800b33e:	4b0c      	ldr	r3, [pc, #48]	@ (800b370 <cleanup_stdio+0x34>)
 800b340:	4299      	cmp	r1, r3
 800b342:	b510      	push	{r4, lr}
 800b344:	4604      	mov	r4, r0
 800b346:	d001      	beq.n	800b34c <cleanup_stdio+0x10>
 800b348:	f001 fe08 	bl	800cf5c <_fflush_r>
 800b34c:	68a1      	ldr	r1, [r4, #8]
 800b34e:	4b09      	ldr	r3, [pc, #36]	@ (800b374 <cleanup_stdio+0x38>)
 800b350:	4299      	cmp	r1, r3
 800b352:	d002      	beq.n	800b35a <cleanup_stdio+0x1e>
 800b354:	4620      	mov	r0, r4
 800b356:	f001 fe01 	bl	800cf5c <_fflush_r>
 800b35a:	68e1      	ldr	r1, [r4, #12]
 800b35c:	4b06      	ldr	r3, [pc, #24]	@ (800b378 <cleanup_stdio+0x3c>)
 800b35e:	4299      	cmp	r1, r3
 800b360:	d004      	beq.n	800b36c <cleanup_stdio+0x30>
 800b362:	4620      	mov	r0, r4
 800b364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b368:	f001 bdf8 	b.w	800cf5c <_fflush_r>
 800b36c:	bd10      	pop	{r4, pc}
 800b36e:	bf00      	nop
 800b370:	20000b8c 	.word	0x20000b8c
 800b374:	20000bf4 	.word	0x20000bf4
 800b378:	20000c5c 	.word	0x20000c5c

0800b37c <global_stdio_init.part.0>:
 800b37c:	b510      	push	{r4, lr}
 800b37e:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ac <global_stdio_init.part.0+0x30>)
 800b380:	4c0b      	ldr	r4, [pc, #44]	@ (800b3b0 <global_stdio_init.part.0+0x34>)
 800b382:	4a0c      	ldr	r2, [pc, #48]	@ (800b3b4 <global_stdio_init.part.0+0x38>)
 800b384:	601a      	str	r2, [r3, #0]
 800b386:	4620      	mov	r0, r4
 800b388:	2200      	movs	r2, #0
 800b38a:	2104      	movs	r1, #4
 800b38c:	f7ff ff94 	bl	800b2b8 <std>
 800b390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b394:	2201      	movs	r2, #1
 800b396:	2109      	movs	r1, #9
 800b398:	f7ff ff8e 	bl	800b2b8 <std>
 800b39c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3a6:	2112      	movs	r1, #18
 800b3a8:	f7ff bf86 	b.w	800b2b8 <std>
 800b3ac:	20000cc4 	.word	0x20000cc4
 800b3b0:	20000b8c 	.word	0x20000b8c
 800b3b4:	0800b325 	.word	0x0800b325

0800b3b8 <__sfp_lock_acquire>:
 800b3b8:	4801      	ldr	r0, [pc, #4]	@ (800b3c0 <__sfp_lock_acquire+0x8>)
 800b3ba:	f000 b920 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800b3be:	bf00      	nop
 800b3c0:	20000ccd 	.word	0x20000ccd

0800b3c4 <__sfp_lock_release>:
 800b3c4:	4801      	ldr	r0, [pc, #4]	@ (800b3cc <__sfp_lock_release+0x8>)
 800b3c6:	f000 b91b 	b.w	800b600 <__retarget_lock_release_recursive>
 800b3ca:	bf00      	nop
 800b3cc:	20000ccd 	.word	0x20000ccd

0800b3d0 <__sinit>:
 800b3d0:	b510      	push	{r4, lr}
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	f7ff fff0 	bl	800b3b8 <__sfp_lock_acquire>
 800b3d8:	6a23      	ldr	r3, [r4, #32]
 800b3da:	b11b      	cbz	r3, 800b3e4 <__sinit+0x14>
 800b3dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3e0:	f7ff bff0 	b.w	800b3c4 <__sfp_lock_release>
 800b3e4:	4b04      	ldr	r3, [pc, #16]	@ (800b3f8 <__sinit+0x28>)
 800b3e6:	6223      	str	r3, [r4, #32]
 800b3e8:	4b04      	ldr	r3, [pc, #16]	@ (800b3fc <__sinit+0x2c>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1f5      	bne.n	800b3dc <__sinit+0xc>
 800b3f0:	f7ff ffc4 	bl	800b37c <global_stdio_init.part.0>
 800b3f4:	e7f2      	b.n	800b3dc <__sinit+0xc>
 800b3f6:	bf00      	nop
 800b3f8:	0800b33d 	.word	0x0800b33d
 800b3fc:	20000cc4 	.word	0x20000cc4

0800b400 <_fwalk_sglue>:
 800b400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b404:	4607      	mov	r7, r0
 800b406:	4688      	mov	r8, r1
 800b408:	4614      	mov	r4, r2
 800b40a:	2600      	movs	r6, #0
 800b40c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b410:	f1b9 0901 	subs.w	r9, r9, #1
 800b414:	d505      	bpl.n	800b422 <_fwalk_sglue+0x22>
 800b416:	6824      	ldr	r4, [r4, #0]
 800b418:	2c00      	cmp	r4, #0
 800b41a:	d1f7      	bne.n	800b40c <_fwalk_sglue+0xc>
 800b41c:	4630      	mov	r0, r6
 800b41e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b422:	89ab      	ldrh	r3, [r5, #12]
 800b424:	2b01      	cmp	r3, #1
 800b426:	d907      	bls.n	800b438 <_fwalk_sglue+0x38>
 800b428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b42c:	3301      	adds	r3, #1
 800b42e:	d003      	beq.n	800b438 <_fwalk_sglue+0x38>
 800b430:	4629      	mov	r1, r5
 800b432:	4638      	mov	r0, r7
 800b434:	47c0      	blx	r8
 800b436:	4306      	orrs	r6, r0
 800b438:	3568      	adds	r5, #104	@ 0x68
 800b43a:	e7e9      	b.n	800b410 <_fwalk_sglue+0x10>

0800b43c <siprintf>:
 800b43c:	b40e      	push	{r1, r2, r3}
 800b43e:	b500      	push	{lr}
 800b440:	b09c      	sub	sp, #112	@ 0x70
 800b442:	ab1d      	add	r3, sp, #116	@ 0x74
 800b444:	9002      	str	r0, [sp, #8]
 800b446:	9006      	str	r0, [sp, #24]
 800b448:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b44c:	4809      	ldr	r0, [pc, #36]	@ (800b474 <siprintf+0x38>)
 800b44e:	9107      	str	r1, [sp, #28]
 800b450:	9104      	str	r1, [sp, #16]
 800b452:	4909      	ldr	r1, [pc, #36]	@ (800b478 <siprintf+0x3c>)
 800b454:	f853 2b04 	ldr.w	r2, [r3], #4
 800b458:	9105      	str	r1, [sp, #20]
 800b45a:	6800      	ldr	r0, [r0, #0]
 800b45c:	9301      	str	r3, [sp, #4]
 800b45e:	a902      	add	r1, sp, #8
 800b460:	f001 fbfc 	bl	800cc5c <_svfiprintf_r>
 800b464:	9b02      	ldr	r3, [sp, #8]
 800b466:	2200      	movs	r2, #0
 800b468:	701a      	strb	r2, [r3, #0]
 800b46a:	b01c      	add	sp, #112	@ 0x70
 800b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b470:	b003      	add	sp, #12
 800b472:	4770      	bx	lr
 800b474:	2000005c 	.word	0x2000005c
 800b478:	ffff0208 	.word	0xffff0208

0800b47c <__sread>:
 800b47c:	b510      	push	{r4, lr}
 800b47e:	460c      	mov	r4, r1
 800b480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b484:	f000 f86c 	bl	800b560 <_read_r>
 800b488:	2800      	cmp	r0, #0
 800b48a:	bfab      	itete	ge
 800b48c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b48e:	89a3      	ldrhlt	r3, [r4, #12]
 800b490:	181b      	addge	r3, r3, r0
 800b492:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b496:	bfac      	ite	ge
 800b498:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b49a:	81a3      	strhlt	r3, [r4, #12]
 800b49c:	bd10      	pop	{r4, pc}

0800b49e <__swrite>:
 800b49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a2:	461f      	mov	r7, r3
 800b4a4:	898b      	ldrh	r3, [r1, #12]
 800b4a6:	05db      	lsls	r3, r3, #23
 800b4a8:	4605      	mov	r5, r0
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	4616      	mov	r6, r2
 800b4ae:	d505      	bpl.n	800b4bc <__swrite+0x1e>
 800b4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b4:	2302      	movs	r3, #2
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f000 f840 	bl	800b53c <_lseek_r>
 800b4bc:	89a3      	ldrh	r3, [r4, #12]
 800b4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	4632      	mov	r2, r6
 800b4ca:	463b      	mov	r3, r7
 800b4cc:	4628      	mov	r0, r5
 800b4ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d2:	f000 b857 	b.w	800b584 <_write_r>

0800b4d6 <__sseek>:
 800b4d6:	b510      	push	{r4, lr}
 800b4d8:	460c      	mov	r4, r1
 800b4da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4de:	f000 f82d 	bl	800b53c <_lseek_r>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	bf15      	itete	ne
 800b4e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b4ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b4ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b4f2:	81a3      	strheq	r3, [r4, #12]
 800b4f4:	bf18      	it	ne
 800b4f6:	81a3      	strhne	r3, [r4, #12]
 800b4f8:	bd10      	pop	{r4, pc}

0800b4fa <__sclose>:
 800b4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4fe:	f000 b80d 	b.w	800b51c <_close_r>

0800b502 <memset>:
 800b502:	4402      	add	r2, r0
 800b504:	4603      	mov	r3, r0
 800b506:	4293      	cmp	r3, r2
 800b508:	d100      	bne.n	800b50c <memset+0xa>
 800b50a:	4770      	bx	lr
 800b50c:	f803 1b01 	strb.w	r1, [r3], #1
 800b510:	e7f9      	b.n	800b506 <memset+0x4>
	...

0800b514 <_localeconv_r>:
 800b514:	4800      	ldr	r0, [pc, #0]	@ (800b518 <_localeconv_r+0x4>)
 800b516:	4770      	bx	lr
 800b518:	2000019c 	.word	0x2000019c

0800b51c <_close_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	@ (800b538 <_close_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f7 fa92 	bl	8002a50 <_close>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_close_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_close_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	20000cc8 	.word	0x20000cc8

0800b53c <_lseek_r>:
 800b53c:	b538      	push	{r3, r4, r5, lr}
 800b53e:	4d07      	ldr	r5, [pc, #28]	@ (800b55c <_lseek_r+0x20>)
 800b540:	4604      	mov	r4, r0
 800b542:	4608      	mov	r0, r1
 800b544:	4611      	mov	r1, r2
 800b546:	2200      	movs	r2, #0
 800b548:	602a      	str	r2, [r5, #0]
 800b54a:	461a      	mov	r2, r3
 800b54c:	f7f7 faa7 	bl	8002a9e <_lseek>
 800b550:	1c43      	adds	r3, r0, #1
 800b552:	d102      	bne.n	800b55a <_lseek_r+0x1e>
 800b554:	682b      	ldr	r3, [r5, #0]
 800b556:	b103      	cbz	r3, 800b55a <_lseek_r+0x1e>
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	bd38      	pop	{r3, r4, r5, pc}
 800b55c:	20000cc8 	.word	0x20000cc8

0800b560 <_read_r>:
 800b560:	b538      	push	{r3, r4, r5, lr}
 800b562:	4d07      	ldr	r5, [pc, #28]	@ (800b580 <_read_r+0x20>)
 800b564:	4604      	mov	r4, r0
 800b566:	4608      	mov	r0, r1
 800b568:	4611      	mov	r1, r2
 800b56a:	2200      	movs	r2, #0
 800b56c:	602a      	str	r2, [r5, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	f7f7 fa35 	bl	80029de <_read>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_read_r+0x1e>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_read_r+0x1e>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	20000cc8 	.word	0x20000cc8

0800b584 <_write_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	@ (800b5a4 <_write_r+0x20>)
 800b588:	4604      	mov	r4, r0
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f7 fa40 	bl	8002a18 <_write>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_write_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_write_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20000cc8 	.word	0x20000cc8

0800b5a8 <__errno>:
 800b5a8:	4b01      	ldr	r3, [pc, #4]	@ (800b5b0 <__errno+0x8>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	2000005c 	.word	0x2000005c

0800b5b4 <__libc_init_array>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4d0d      	ldr	r5, [pc, #52]	@ (800b5ec <__libc_init_array+0x38>)
 800b5b8:	4c0d      	ldr	r4, [pc, #52]	@ (800b5f0 <__libc_init_array+0x3c>)
 800b5ba:	1b64      	subs	r4, r4, r5
 800b5bc:	10a4      	asrs	r4, r4, #2
 800b5be:	2600      	movs	r6, #0
 800b5c0:	42a6      	cmp	r6, r4
 800b5c2:	d109      	bne.n	800b5d8 <__libc_init_array+0x24>
 800b5c4:	4d0b      	ldr	r5, [pc, #44]	@ (800b5f4 <__libc_init_array+0x40>)
 800b5c6:	4c0c      	ldr	r4, [pc, #48]	@ (800b5f8 <__libc_init_array+0x44>)
 800b5c8:	f003 fdd2 	bl	800f170 <_init>
 800b5cc:	1b64      	subs	r4, r4, r5
 800b5ce:	10a4      	asrs	r4, r4, #2
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	42a6      	cmp	r6, r4
 800b5d4:	d105      	bne.n	800b5e2 <__libc_init_array+0x2e>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5dc:	4798      	blx	r3
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__libc_init_array+0xc>
 800b5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e6:	4798      	blx	r3
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	e7f2      	b.n	800b5d2 <__libc_init_array+0x1e>
 800b5ec:	08011600 	.word	0x08011600
 800b5f0:	08011600 	.word	0x08011600
 800b5f4:	08011600 	.word	0x08011600
 800b5f8:	08011604 	.word	0x08011604

0800b5fc <__retarget_lock_init_recursive>:
 800b5fc:	4770      	bx	lr

0800b5fe <__retarget_lock_acquire_recursive>:
 800b5fe:	4770      	bx	lr

0800b600 <__retarget_lock_release_recursive>:
 800b600:	4770      	bx	lr

0800b602 <quorem>:
 800b602:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b606:	6903      	ldr	r3, [r0, #16]
 800b608:	690c      	ldr	r4, [r1, #16]
 800b60a:	42a3      	cmp	r3, r4
 800b60c:	4607      	mov	r7, r0
 800b60e:	db7e      	blt.n	800b70e <quorem+0x10c>
 800b610:	3c01      	subs	r4, #1
 800b612:	f101 0814 	add.w	r8, r1, #20
 800b616:	00a3      	lsls	r3, r4, #2
 800b618:	f100 0514 	add.w	r5, r0, #20
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b628:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b62c:	3301      	adds	r3, #1
 800b62e:	429a      	cmp	r2, r3
 800b630:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b634:	fbb2 f6f3 	udiv	r6, r2, r3
 800b638:	d32e      	bcc.n	800b698 <quorem+0x96>
 800b63a:	f04f 0a00 	mov.w	sl, #0
 800b63e:	46c4      	mov	ip, r8
 800b640:	46ae      	mov	lr, r5
 800b642:	46d3      	mov	fp, sl
 800b644:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b648:	b298      	uxth	r0, r3
 800b64a:	fb06 a000 	mla	r0, r6, r0, sl
 800b64e:	0c02      	lsrs	r2, r0, #16
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	fb06 2303 	mla	r3, r6, r3, r2
 800b656:	f8de 2000 	ldr.w	r2, [lr]
 800b65a:	b280      	uxth	r0, r0
 800b65c:	b292      	uxth	r2, r2
 800b65e:	1a12      	subs	r2, r2, r0
 800b660:	445a      	add	r2, fp
 800b662:	f8de 0000 	ldr.w	r0, [lr]
 800b666:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b670:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b674:	b292      	uxth	r2, r2
 800b676:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b67a:	45e1      	cmp	r9, ip
 800b67c:	f84e 2b04 	str.w	r2, [lr], #4
 800b680:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b684:	d2de      	bcs.n	800b644 <quorem+0x42>
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	58eb      	ldr	r3, [r5, r3]
 800b68a:	b92b      	cbnz	r3, 800b698 <quorem+0x96>
 800b68c:	9b01      	ldr	r3, [sp, #4]
 800b68e:	3b04      	subs	r3, #4
 800b690:	429d      	cmp	r5, r3
 800b692:	461a      	mov	r2, r3
 800b694:	d32f      	bcc.n	800b6f6 <quorem+0xf4>
 800b696:	613c      	str	r4, [r7, #16]
 800b698:	4638      	mov	r0, r7
 800b69a:	f001 f97b 	bl	800c994 <__mcmp>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	db25      	blt.n	800b6ee <quorem+0xec>
 800b6a2:	4629      	mov	r1, r5
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6aa:	f8d1 c000 	ldr.w	ip, [r1]
 800b6ae:	fa1f fe82 	uxth.w	lr, r2
 800b6b2:	fa1f f38c 	uxth.w	r3, ip
 800b6b6:	eba3 030e 	sub.w	r3, r3, lr
 800b6ba:	4403      	add	r3, r0
 800b6bc:	0c12      	lsrs	r2, r2, #16
 800b6be:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b6c2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b6c6:	b29b      	uxth	r3, r3
 800b6c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6cc:	45c1      	cmp	r9, r8
 800b6ce:	f841 3b04 	str.w	r3, [r1], #4
 800b6d2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6d6:	d2e6      	bcs.n	800b6a6 <quorem+0xa4>
 800b6d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6e0:	b922      	cbnz	r2, 800b6ec <quorem+0xea>
 800b6e2:	3b04      	subs	r3, #4
 800b6e4:	429d      	cmp	r5, r3
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	d30b      	bcc.n	800b702 <quorem+0x100>
 800b6ea:	613c      	str	r4, [r7, #16]
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	b003      	add	sp, #12
 800b6f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	3b04      	subs	r3, #4
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d1cb      	bne.n	800b696 <quorem+0x94>
 800b6fe:	3c01      	subs	r4, #1
 800b700:	e7c6      	b.n	800b690 <quorem+0x8e>
 800b702:	6812      	ldr	r2, [r2, #0]
 800b704:	3b04      	subs	r3, #4
 800b706:	2a00      	cmp	r2, #0
 800b708:	d1ef      	bne.n	800b6ea <quorem+0xe8>
 800b70a:	3c01      	subs	r4, #1
 800b70c:	e7ea      	b.n	800b6e4 <quorem+0xe2>
 800b70e:	2000      	movs	r0, #0
 800b710:	e7ee      	b.n	800b6f0 <quorem+0xee>
 800b712:	0000      	movs	r0, r0
 800b714:	0000      	movs	r0, r0
	...

0800b718 <_dtoa_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	69c7      	ldr	r7, [r0, #28]
 800b71e:	b099      	sub	sp, #100	@ 0x64
 800b720:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b724:	ec55 4b10 	vmov	r4, r5, d0
 800b728:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b72a:	9109      	str	r1, [sp, #36]	@ 0x24
 800b72c:	4683      	mov	fp, r0
 800b72e:	920e      	str	r2, [sp, #56]	@ 0x38
 800b730:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b732:	b97f      	cbnz	r7, 800b754 <_dtoa_r+0x3c>
 800b734:	2010      	movs	r0, #16
 800b736:	f000 fdfd 	bl	800c334 <malloc>
 800b73a:	4602      	mov	r2, r0
 800b73c:	f8cb 001c 	str.w	r0, [fp, #28]
 800b740:	b920      	cbnz	r0, 800b74c <_dtoa_r+0x34>
 800b742:	4ba7      	ldr	r3, [pc, #668]	@ (800b9e0 <_dtoa_r+0x2c8>)
 800b744:	21ef      	movs	r1, #239	@ 0xef
 800b746:	48a7      	ldr	r0, [pc, #668]	@ (800b9e4 <_dtoa_r+0x2cc>)
 800b748:	f001 fc68 	bl	800d01c <__assert_func>
 800b74c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b750:	6007      	str	r7, [r0, #0]
 800b752:	60c7      	str	r7, [r0, #12]
 800b754:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b758:	6819      	ldr	r1, [r3, #0]
 800b75a:	b159      	cbz	r1, 800b774 <_dtoa_r+0x5c>
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	604a      	str	r2, [r1, #4]
 800b760:	2301      	movs	r3, #1
 800b762:	4093      	lsls	r3, r2
 800b764:	608b      	str	r3, [r1, #8]
 800b766:	4658      	mov	r0, fp
 800b768:	f000 feda 	bl	800c520 <_Bfree>
 800b76c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b770:	2200      	movs	r2, #0
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	1e2b      	subs	r3, r5, #0
 800b776:	bfb9      	ittee	lt
 800b778:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b77c:	9303      	strlt	r3, [sp, #12]
 800b77e:	2300      	movge	r3, #0
 800b780:	6033      	strge	r3, [r6, #0]
 800b782:	9f03      	ldr	r7, [sp, #12]
 800b784:	4b98      	ldr	r3, [pc, #608]	@ (800b9e8 <_dtoa_r+0x2d0>)
 800b786:	bfbc      	itt	lt
 800b788:	2201      	movlt	r2, #1
 800b78a:	6032      	strlt	r2, [r6, #0]
 800b78c:	43bb      	bics	r3, r7
 800b78e:	d112      	bne.n	800b7b6 <_dtoa_r+0x9e>
 800b790:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b792:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b796:	6013      	str	r3, [r2, #0]
 800b798:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b79c:	4323      	orrs	r3, r4
 800b79e:	f000 854d 	beq.w	800c23c <_dtoa_r+0xb24>
 800b7a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b9fc <_dtoa_r+0x2e4>
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 854f 	beq.w	800c24c <_dtoa_r+0xb34>
 800b7ae:	f10a 0303 	add.w	r3, sl, #3
 800b7b2:	f000 bd49 	b.w	800c248 <_dtoa_r+0xb30>
 800b7b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	ec51 0b17 	vmov	r0, r1, d7
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b7c6:	f7f5 f99f 	bl	8000b08 <__aeabi_dcmpeq>
 800b7ca:	4680      	mov	r8, r0
 800b7cc:	b158      	cbz	r0, 800b7e6 <_dtoa_r+0xce>
 800b7ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	6013      	str	r3, [r2, #0]
 800b7d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b7d6:	b113      	cbz	r3, 800b7de <_dtoa_r+0xc6>
 800b7d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b7da:	4b84      	ldr	r3, [pc, #528]	@ (800b9ec <_dtoa_r+0x2d4>)
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ba00 <_dtoa_r+0x2e8>
 800b7e2:	f000 bd33 	b.w	800c24c <_dtoa_r+0xb34>
 800b7e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b7ea:	aa16      	add	r2, sp, #88	@ 0x58
 800b7ec:	a917      	add	r1, sp, #92	@ 0x5c
 800b7ee:	4658      	mov	r0, fp
 800b7f0:	f001 f980 	bl	800caf4 <__d2b>
 800b7f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b7f8:	4681      	mov	r9, r0
 800b7fa:	2e00      	cmp	r6, #0
 800b7fc:	d077      	beq.n	800b8ee <_dtoa_r+0x1d6>
 800b7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b800:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b808:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b80c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b810:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b814:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b818:	4619      	mov	r1, r3
 800b81a:	2200      	movs	r2, #0
 800b81c:	4b74      	ldr	r3, [pc, #464]	@ (800b9f0 <_dtoa_r+0x2d8>)
 800b81e:	f7f4 fd53 	bl	80002c8 <__aeabi_dsub>
 800b822:	a369      	add	r3, pc, #420	@ (adr r3, 800b9c8 <_dtoa_r+0x2b0>)
 800b824:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b828:	f7f4 ff06 	bl	8000638 <__aeabi_dmul>
 800b82c:	a368      	add	r3, pc, #416	@ (adr r3, 800b9d0 <_dtoa_r+0x2b8>)
 800b82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b832:	f7f4 fd4b 	bl	80002cc <__adddf3>
 800b836:	4604      	mov	r4, r0
 800b838:	4630      	mov	r0, r6
 800b83a:	460d      	mov	r5, r1
 800b83c:	f7f4 fe92 	bl	8000564 <__aeabi_i2d>
 800b840:	a365      	add	r3, pc, #404	@ (adr r3, 800b9d8 <_dtoa_r+0x2c0>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fef7 	bl	8000638 <__aeabi_dmul>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4620      	mov	r0, r4
 800b850:	4629      	mov	r1, r5
 800b852:	f7f4 fd3b 	bl	80002cc <__adddf3>
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f5 f99d 	bl	8000b98 <__aeabi_d2iz>
 800b85e:	2200      	movs	r2, #0
 800b860:	4607      	mov	r7, r0
 800b862:	2300      	movs	r3, #0
 800b864:	4620      	mov	r0, r4
 800b866:	4629      	mov	r1, r5
 800b868:	f7f5 f958 	bl	8000b1c <__aeabi_dcmplt>
 800b86c:	b140      	cbz	r0, 800b880 <_dtoa_r+0x168>
 800b86e:	4638      	mov	r0, r7
 800b870:	f7f4 fe78 	bl	8000564 <__aeabi_i2d>
 800b874:	4622      	mov	r2, r4
 800b876:	462b      	mov	r3, r5
 800b878:	f7f5 f946 	bl	8000b08 <__aeabi_dcmpeq>
 800b87c:	b900      	cbnz	r0, 800b880 <_dtoa_r+0x168>
 800b87e:	3f01      	subs	r7, #1
 800b880:	2f16      	cmp	r7, #22
 800b882:	d851      	bhi.n	800b928 <_dtoa_r+0x210>
 800b884:	4b5b      	ldr	r3, [pc, #364]	@ (800b9f4 <_dtoa_r+0x2dc>)
 800b886:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b892:	f7f5 f943 	bl	8000b1c <__aeabi_dcmplt>
 800b896:	2800      	cmp	r0, #0
 800b898:	d048      	beq.n	800b92c <_dtoa_r+0x214>
 800b89a:	3f01      	subs	r7, #1
 800b89c:	2300      	movs	r3, #0
 800b89e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b8a2:	1b9b      	subs	r3, r3, r6
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	bf44      	itt	mi
 800b8a8:	f1c3 0801 	rsbmi	r8, r3, #1
 800b8ac:	2300      	movmi	r3, #0
 800b8ae:	9208      	str	r2, [sp, #32]
 800b8b0:	bf54      	ite	pl
 800b8b2:	f04f 0800 	movpl.w	r8, #0
 800b8b6:	9308      	strmi	r3, [sp, #32]
 800b8b8:	2f00      	cmp	r7, #0
 800b8ba:	db39      	blt.n	800b930 <_dtoa_r+0x218>
 800b8bc:	9b08      	ldr	r3, [sp, #32]
 800b8be:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b8c0:	443b      	add	r3, r7
 800b8c2:	9308      	str	r3, [sp, #32]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8ca:	2b09      	cmp	r3, #9
 800b8cc:	d864      	bhi.n	800b998 <_dtoa_r+0x280>
 800b8ce:	2b05      	cmp	r3, #5
 800b8d0:	bfc4      	itt	gt
 800b8d2:	3b04      	subgt	r3, #4
 800b8d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b8d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d8:	f1a3 0302 	sub.w	r3, r3, #2
 800b8dc:	bfcc      	ite	gt
 800b8de:	2400      	movgt	r4, #0
 800b8e0:	2401      	movle	r4, #1
 800b8e2:	2b03      	cmp	r3, #3
 800b8e4:	d863      	bhi.n	800b9ae <_dtoa_r+0x296>
 800b8e6:	e8df f003 	tbb	[pc, r3]
 800b8ea:	372a      	.short	0x372a
 800b8ec:	5535      	.short	0x5535
 800b8ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b8f2:	441e      	add	r6, r3
 800b8f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8f8:	2b20      	cmp	r3, #32
 800b8fa:	bfc1      	itttt	gt
 800b8fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b900:	409f      	lslgt	r7, r3
 800b902:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b906:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b90a:	bfd6      	itet	le
 800b90c:	f1c3 0320 	rsble	r3, r3, #32
 800b910:	ea47 0003 	orrgt.w	r0, r7, r3
 800b914:	fa04 f003 	lslle.w	r0, r4, r3
 800b918:	f7f4 fe14 	bl	8000544 <__aeabi_ui2d>
 800b91c:	2201      	movs	r2, #1
 800b91e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b922:	3e01      	subs	r6, #1
 800b924:	9214      	str	r2, [sp, #80]	@ 0x50
 800b926:	e777      	b.n	800b818 <_dtoa_r+0x100>
 800b928:	2301      	movs	r3, #1
 800b92a:	e7b8      	b.n	800b89e <_dtoa_r+0x186>
 800b92c:	9012      	str	r0, [sp, #72]	@ 0x48
 800b92e:	e7b7      	b.n	800b8a0 <_dtoa_r+0x188>
 800b930:	427b      	negs	r3, r7
 800b932:	930a      	str	r3, [sp, #40]	@ 0x28
 800b934:	2300      	movs	r3, #0
 800b936:	eba8 0807 	sub.w	r8, r8, r7
 800b93a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b93c:	e7c4      	b.n	800b8c8 <_dtoa_r+0x1b0>
 800b93e:	2300      	movs	r3, #0
 800b940:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b942:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc35      	bgt.n	800b9b4 <_dtoa_r+0x29c>
 800b948:	2301      	movs	r3, #1
 800b94a:	9300      	str	r3, [sp, #0]
 800b94c:	9307      	str	r3, [sp, #28]
 800b94e:	461a      	mov	r2, r3
 800b950:	920e      	str	r2, [sp, #56]	@ 0x38
 800b952:	e00b      	b.n	800b96c <_dtoa_r+0x254>
 800b954:	2301      	movs	r3, #1
 800b956:	e7f3      	b.n	800b940 <_dtoa_r+0x228>
 800b958:	2300      	movs	r3, #0
 800b95a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b95e:	18fb      	adds	r3, r7, r3
 800b960:	9300      	str	r3, [sp, #0]
 800b962:	3301      	adds	r3, #1
 800b964:	2b01      	cmp	r3, #1
 800b966:	9307      	str	r3, [sp, #28]
 800b968:	bfb8      	it	lt
 800b96a:	2301      	movlt	r3, #1
 800b96c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b970:	2100      	movs	r1, #0
 800b972:	2204      	movs	r2, #4
 800b974:	f102 0514 	add.w	r5, r2, #20
 800b978:	429d      	cmp	r5, r3
 800b97a:	d91f      	bls.n	800b9bc <_dtoa_r+0x2a4>
 800b97c:	6041      	str	r1, [r0, #4]
 800b97e:	4658      	mov	r0, fp
 800b980:	f000 fd8e 	bl	800c4a0 <_Balloc>
 800b984:	4682      	mov	sl, r0
 800b986:	2800      	cmp	r0, #0
 800b988:	d13c      	bne.n	800ba04 <_dtoa_r+0x2ec>
 800b98a:	4b1b      	ldr	r3, [pc, #108]	@ (800b9f8 <_dtoa_r+0x2e0>)
 800b98c:	4602      	mov	r2, r0
 800b98e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b992:	e6d8      	b.n	800b746 <_dtoa_r+0x2e>
 800b994:	2301      	movs	r3, #1
 800b996:	e7e0      	b.n	800b95a <_dtoa_r+0x242>
 800b998:	2401      	movs	r4, #1
 800b99a:	2300      	movs	r3, #0
 800b99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b99e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9a4:	9300      	str	r3, [sp, #0]
 800b9a6:	9307      	str	r3, [sp, #28]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	2312      	movs	r3, #18
 800b9ac:	e7d0      	b.n	800b950 <_dtoa_r+0x238>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9b2:	e7f5      	b.n	800b9a0 <_dtoa_r+0x288>
 800b9b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9b6:	9300      	str	r3, [sp, #0]
 800b9b8:	9307      	str	r3, [sp, #28]
 800b9ba:	e7d7      	b.n	800b96c <_dtoa_r+0x254>
 800b9bc:	3101      	adds	r1, #1
 800b9be:	0052      	lsls	r2, r2, #1
 800b9c0:	e7d8      	b.n	800b974 <_dtoa_r+0x25c>
 800b9c2:	bf00      	nop
 800b9c4:	f3af 8000 	nop.w
 800b9c8:	636f4361 	.word	0x636f4361
 800b9cc:	3fd287a7 	.word	0x3fd287a7
 800b9d0:	8b60c8b3 	.word	0x8b60c8b3
 800b9d4:	3fc68a28 	.word	0x3fc68a28
 800b9d8:	509f79fb 	.word	0x509f79fb
 800b9dc:	3fd34413 	.word	0x3fd34413
 800b9e0:	08010d21 	.word	0x08010d21
 800b9e4:	08010d38 	.word	0x08010d38
 800b9e8:	7ff00000 	.word	0x7ff00000
 800b9ec:	08010cf1 	.word	0x08010cf1
 800b9f0:	3ff80000 	.word	0x3ff80000
 800b9f4:	08010e30 	.word	0x08010e30
 800b9f8:	08010d90 	.word	0x08010d90
 800b9fc:	08010d1d 	.word	0x08010d1d
 800ba00:	08010cf0 	.word	0x08010cf0
 800ba04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ba08:	6018      	str	r0, [r3, #0]
 800ba0a:	9b07      	ldr	r3, [sp, #28]
 800ba0c:	2b0e      	cmp	r3, #14
 800ba0e:	f200 80a4 	bhi.w	800bb5a <_dtoa_r+0x442>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	f000 80a1 	beq.w	800bb5a <_dtoa_r+0x442>
 800ba18:	2f00      	cmp	r7, #0
 800ba1a:	dd33      	ble.n	800ba84 <_dtoa_r+0x36c>
 800ba1c:	4bad      	ldr	r3, [pc, #692]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800ba1e:	f007 020f 	and.w	r2, r7, #15
 800ba22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba26:	ed93 7b00 	vldr	d7, [r3]
 800ba2a:	05f8      	lsls	r0, r7, #23
 800ba2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ba30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ba34:	d516      	bpl.n	800ba64 <_dtoa_r+0x34c>
 800ba36:	4ba8      	ldr	r3, [pc, #672]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba40:	f7f4 ff24 	bl	800088c <__aeabi_ddiv>
 800ba44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba48:	f004 040f 	and.w	r4, r4, #15
 800ba4c:	2603      	movs	r6, #3
 800ba4e:	4da2      	ldr	r5, [pc, #648]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba50:	b954      	cbnz	r4, 800ba68 <_dtoa_r+0x350>
 800ba52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5a:	f7f4 ff17 	bl	800088c <__aeabi_ddiv>
 800ba5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba62:	e028      	b.n	800bab6 <_dtoa_r+0x39e>
 800ba64:	2602      	movs	r6, #2
 800ba66:	e7f2      	b.n	800ba4e <_dtoa_r+0x336>
 800ba68:	07e1      	lsls	r1, r4, #31
 800ba6a:	d508      	bpl.n	800ba7e <_dtoa_r+0x366>
 800ba6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba74:	f7f4 fde0 	bl	8000638 <__aeabi_dmul>
 800ba78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	1064      	asrs	r4, r4, #1
 800ba80:	3508      	adds	r5, #8
 800ba82:	e7e5      	b.n	800ba50 <_dtoa_r+0x338>
 800ba84:	f000 80d2 	beq.w	800bc2c <_dtoa_r+0x514>
 800ba88:	427c      	negs	r4, r7
 800ba8a:	4b92      	ldr	r3, [pc, #584]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800ba8c:	4d92      	ldr	r5, [pc, #584]	@ (800bcd8 <_dtoa_r+0x5c0>)
 800ba8e:	f004 020f 	and.w	r2, r4, #15
 800ba92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba9e:	f7f4 fdcb 	bl	8000638 <__aeabi_dmul>
 800baa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa6:	1124      	asrs	r4, r4, #4
 800baa8:	2300      	movs	r3, #0
 800baaa:	2602      	movs	r6, #2
 800baac:	2c00      	cmp	r4, #0
 800baae:	f040 80b2 	bne.w	800bc16 <_dtoa_r+0x4fe>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1d3      	bne.n	800ba5e <_dtoa_r+0x346>
 800bab6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bab8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 80b7 	beq.w	800bc30 <_dtoa_r+0x518>
 800bac2:	4b86      	ldr	r3, [pc, #536]	@ (800bcdc <_dtoa_r+0x5c4>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f5 f827 	bl	8000b1c <__aeabi_dcmplt>
 800bace:	2800      	cmp	r0, #0
 800bad0:	f000 80ae 	beq.w	800bc30 <_dtoa_r+0x518>
 800bad4:	9b07      	ldr	r3, [sp, #28]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	f000 80aa 	beq.w	800bc30 <_dtoa_r+0x518>
 800badc:	9b00      	ldr	r3, [sp, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	dd37      	ble.n	800bb52 <_dtoa_r+0x43a>
 800bae2:	1e7b      	subs	r3, r7, #1
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	4620      	mov	r0, r4
 800bae8:	4b7d      	ldr	r3, [pc, #500]	@ (800bce0 <_dtoa_r+0x5c8>)
 800baea:	2200      	movs	r2, #0
 800baec:	4629      	mov	r1, r5
 800baee:	f7f4 fda3 	bl	8000638 <__aeabi_dmul>
 800baf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf6:	9c00      	ldr	r4, [sp, #0]
 800baf8:	3601      	adds	r6, #1
 800bafa:	4630      	mov	r0, r6
 800bafc:	f7f4 fd32 	bl	8000564 <__aeabi_i2d>
 800bb00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb04:	f7f4 fd98 	bl	8000638 <__aeabi_dmul>
 800bb08:	4b76      	ldr	r3, [pc, #472]	@ (800bce4 <_dtoa_r+0x5cc>)
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f7f4 fbde 	bl	80002cc <__adddf3>
 800bb10:	4605      	mov	r5, r0
 800bb12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bb16:	2c00      	cmp	r4, #0
 800bb18:	f040 808d 	bne.w	800bc36 <_dtoa_r+0x51e>
 800bb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb20:	4b71      	ldr	r3, [pc, #452]	@ (800bce8 <_dtoa_r+0x5d0>)
 800bb22:	2200      	movs	r2, #0
 800bb24:	f7f4 fbd0 	bl	80002c8 <__aeabi_dsub>
 800bb28:	4602      	mov	r2, r0
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bb30:	462a      	mov	r2, r5
 800bb32:	4633      	mov	r3, r6
 800bb34:	f7f5 f810 	bl	8000b58 <__aeabi_dcmpgt>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f040 828b 	bne.w	800c054 <_dtoa_r+0x93c>
 800bb3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb42:	462a      	mov	r2, r5
 800bb44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bb48:	f7f4 ffe8 	bl	8000b1c <__aeabi_dcmplt>
 800bb4c:	2800      	cmp	r0, #0
 800bb4e:	f040 8128 	bne.w	800bda2 <_dtoa_r+0x68a>
 800bb52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f2c0 815a 	blt.w	800be16 <_dtoa_r+0x6fe>
 800bb62:	2f0e      	cmp	r7, #14
 800bb64:	f300 8157 	bgt.w	800be16 <_dtoa_r+0x6fe>
 800bb68:	4b5a      	ldr	r3, [pc, #360]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800bb6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb6e:	ed93 7b00 	vldr	d7, [r3]
 800bb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	ed8d 7b00 	vstr	d7, [sp]
 800bb7a:	da03      	bge.n	800bb84 <_dtoa_r+0x46c>
 800bb7c:	9b07      	ldr	r3, [sp, #28]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f340 8101 	ble.w	800bd86 <_dtoa_r+0x66e>
 800bb84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb88:	4656      	mov	r6, sl
 800bb8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 fe7b 	bl	800088c <__aeabi_ddiv>
 800bb96:	f7f4 ffff 	bl	8000b98 <__aeabi_d2iz>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	f7f4 fce2 	bl	8000564 <__aeabi_i2d>
 800bba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bba4:	f7f4 fd48 	bl	8000638 <__aeabi_dmul>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	460b      	mov	r3, r1
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bbb4:	f7f4 fb88 	bl	80002c8 <__aeabi_dsub>
 800bbb8:	f806 4b01 	strb.w	r4, [r6], #1
 800bbbc:	9d07      	ldr	r5, [sp, #28]
 800bbbe:	eba6 040a 	sub.w	r4, r6, sl
 800bbc2:	42a5      	cmp	r5, r4
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	f040 8117 	bne.w	800bdfa <_dtoa_r+0x6e2>
 800bbcc:	f7f4 fb7e 	bl	80002cc <__adddf3>
 800bbd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	460d      	mov	r5, r1
 800bbd8:	f7f4 ffbe 	bl	8000b58 <__aeabi_dcmpgt>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	f040 80f9 	bne.w	800bdd4 <_dtoa_r+0x6bc>
 800bbe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	4629      	mov	r1, r5
 800bbea:	f7f4 ff8d 	bl	8000b08 <__aeabi_dcmpeq>
 800bbee:	b118      	cbz	r0, 800bbf8 <_dtoa_r+0x4e0>
 800bbf0:	f018 0f01 	tst.w	r8, #1
 800bbf4:	f040 80ee 	bne.w	800bdd4 <_dtoa_r+0x6bc>
 800bbf8:	4649      	mov	r1, r9
 800bbfa:	4658      	mov	r0, fp
 800bbfc:	f000 fc90 	bl	800c520 <_Bfree>
 800bc00:	2300      	movs	r3, #0
 800bc02:	7033      	strb	r3, [r6, #0]
 800bc04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bc06:	3701      	adds	r7, #1
 800bc08:	601f      	str	r7, [r3, #0]
 800bc0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 831d 	beq.w	800c24c <_dtoa_r+0xb34>
 800bc12:	601e      	str	r6, [r3, #0]
 800bc14:	e31a      	b.n	800c24c <_dtoa_r+0xb34>
 800bc16:	07e2      	lsls	r2, r4, #31
 800bc18:	d505      	bpl.n	800bc26 <_dtoa_r+0x50e>
 800bc1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc1e:	f7f4 fd0b 	bl	8000638 <__aeabi_dmul>
 800bc22:	3601      	adds	r6, #1
 800bc24:	2301      	movs	r3, #1
 800bc26:	1064      	asrs	r4, r4, #1
 800bc28:	3508      	adds	r5, #8
 800bc2a:	e73f      	b.n	800baac <_dtoa_r+0x394>
 800bc2c:	2602      	movs	r6, #2
 800bc2e:	e742      	b.n	800bab6 <_dtoa_r+0x39e>
 800bc30:	9c07      	ldr	r4, [sp, #28]
 800bc32:	9704      	str	r7, [sp, #16]
 800bc34:	e761      	b.n	800bafa <_dtoa_r+0x3e2>
 800bc36:	4b27      	ldr	r3, [pc, #156]	@ (800bcd4 <_dtoa_r+0x5bc>)
 800bc38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc42:	4454      	add	r4, sl
 800bc44:	2900      	cmp	r1, #0
 800bc46:	d053      	beq.n	800bcf0 <_dtoa_r+0x5d8>
 800bc48:	4928      	ldr	r1, [pc, #160]	@ (800bcec <_dtoa_r+0x5d4>)
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	f7f4 fe1e 	bl	800088c <__aeabi_ddiv>
 800bc50:	4633      	mov	r3, r6
 800bc52:	462a      	mov	r2, r5
 800bc54:	f7f4 fb38 	bl	80002c8 <__aeabi_dsub>
 800bc58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc5c:	4656      	mov	r6, sl
 800bc5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc62:	f7f4 ff99 	bl	8000b98 <__aeabi_d2iz>
 800bc66:	4605      	mov	r5, r0
 800bc68:	f7f4 fc7c 	bl	8000564 <__aeabi_i2d>
 800bc6c:	4602      	mov	r2, r0
 800bc6e:	460b      	mov	r3, r1
 800bc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc74:	f7f4 fb28 	bl	80002c8 <__aeabi_dsub>
 800bc78:	3530      	adds	r5, #48	@ 0x30
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc82:	f806 5b01 	strb.w	r5, [r6], #1
 800bc86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc8a:	f7f4 ff47 	bl	8000b1c <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d171      	bne.n	800bd76 <_dtoa_r+0x65e>
 800bc92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc96:	4911      	ldr	r1, [pc, #68]	@ (800bcdc <_dtoa_r+0x5c4>)
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f7f4 fb15 	bl	80002c8 <__aeabi_dsub>
 800bc9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bca2:	f7f4 ff3b 	bl	8000b1c <__aeabi_dcmplt>
 800bca6:	2800      	cmp	r0, #0
 800bca8:	f040 8095 	bne.w	800bdd6 <_dtoa_r+0x6be>
 800bcac:	42a6      	cmp	r6, r4
 800bcae:	f43f af50 	beq.w	800bb52 <_dtoa_r+0x43a>
 800bcb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bcb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <_dtoa_r+0x5c8>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f7f4 fcbd 	bl	8000638 <__aeabi_dmul>
 800bcbe:	4b08      	ldr	r3, [pc, #32]	@ (800bce0 <_dtoa_r+0x5c8>)
 800bcc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcca:	f7f4 fcb5 	bl	8000638 <__aeabi_dmul>
 800bcce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bcd2:	e7c4      	b.n	800bc5e <_dtoa_r+0x546>
 800bcd4:	08010e30 	.word	0x08010e30
 800bcd8:	08010e08 	.word	0x08010e08
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	40240000 	.word	0x40240000
 800bce4:	401c0000 	.word	0x401c0000
 800bce8:	40140000 	.word	0x40140000
 800bcec:	3fe00000 	.word	0x3fe00000
 800bcf0:	4631      	mov	r1, r6
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f7f4 fca0 	bl	8000638 <__aeabi_dmul>
 800bcf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcfc:	9415      	str	r4, [sp, #84]	@ 0x54
 800bcfe:	4656      	mov	r6, sl
 800bd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd04:	f7f4 ff48 	bl	8000b98 <__aeabi_d2iz>
 800bd08:	4605      	mov	r5, r0
 800bd0a:	f7f4 fc2b 	bl	8000564 <__aeabi_i2d>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	460b      	mov	r3, r1
 800bd12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd16:	f7f4 fad7 	bl	80002c8 <__aeabi_dsub>
 800bd1a:	3530      	adds	r5, #48	@ 0x30
 800bd1c:	f806 5b01 	strb.w	r5, [r6], #1
 800bd20:	4602      	mov	r2, r0
 800bd22:	460b      	mov	r3, r1
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bd2a:	f04f 0200 	mov.w	r2, #0
 800bd2e:	d124      	bne.n	800bd7a <_dtoa_r+0x662>
 800bd30:	4bac      	ldr	r3, [pc, #688]	@ (800bfe4 <_dtoa_r+0x8cc>)
 800bd32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bd36:	f7f4 fac9 	bl	80002cc <__adddf3>
 800bd3a:	4602      	mov	r2, r0
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd42:	f7f4 ff09 	bl	8000b58 <__aeabi_dcmpgt>
 800bd46:	2800      	cmp	r0, #0
 800bd48:	d145      	bne.n	800bdd6 <_dtoa_r+0x6be>
 800bd4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bd4e:	49a5      	ldr	r1, [pc, #660]	@ (800bfe4 <_dtoa_r+0x8cc>)
 800bd50:	2000      	movs	r0, #0
 800bd52:	f7f4 fab9 	bl	80002c8 <__aeabi_dsub>
 800bd56:	4602      	mov	r2, r0
 800bd58:	460b      	mov	r3, r1
 800bd5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd5e:	f7f4 fedd 	bl	8000b1c <__aeabi_dcmplt>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	f43f aef5 	beq.w	800bb52 <_dtoa_r+0x43a>
 800bd68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800bd6a:	1e73      	subs	r3, r6, #1
 800bd6c:	9315      	str	r3, [sp, #84]	@ 0x54
 800bd6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd72:	2b30      	cmp	r3, #48	@ 0x30
 800bd74:	d0f8      	beq.n	800bd68 <_dtoa_r+0x650>
 800bd76:	9f04      	ldr	r7, [sp, #16]
 800bd78:	e73e      	b.n	800bbf8 <_dtoa_r+0x4e0>
 800bd7a:	4b9b      	ldr	r3, [pc, #620]	@ (800bfe8 <_dtoa_r+0x8d0>)
 800bd7c:	f7f4 fc5c 	bl	8000638 <__aeabi_dmul>
 800bd80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd84:	e7bc      	b.n	800bd00 <_dtoa_r+0x5e8>
 800bd86:	d10c      	bne.n	800bda2 <_dtoa_r+0x68a>
 800bd88:	4b98      	ldr	r3, [pc, #608]	@ (800bfec <_dtoa_r+0x8d4>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd90:	f7f4 fc52 	bl	8000638 <__aeabi_dmul>
 800bd94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd98:	f7f4 fed4 	bl	8000b44 <__aeabi_dcmpge>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	f000 8157 	beq.w	800c050 <_dtoa_r+0x938>
 800bda2:	2400      	movs	r4, #0
 800bda4:	4625      	mov	r5, r4
 800bda6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	4656      	mov	r6, sl
 800bdae:	2700      	movs	r7, #0
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	4658      	mov	r0, fp
 800bdb4:	f000 fbb4 	bl	800c520 <_Bfree>
 800bdb8:	2d00      	cmp	r5, #0
 800bdba:	d0dc      	beq.n	800bd76 <_dtoa_r+0x65e>
 800bdbc:	b12f      	cbz	r7, 800bdca <_dtoa_r+0x6b2>
 800bdbe:	42af      	cmp	r7, r5
 800bdc0:	d003      	beq.n	800bdca <_dtoa_r+0x6b2>
 800bdc2:	4639      	mov	r1, r7
 800bdc4:	4658      	mov	r0, fp
 800bdc6:	f000 fbab 	bl	800c520 <_Bfree>
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4658      	mov	r0, fp
 800bdce:	f000 fba7 	bl	800c520 <_Bfree>
 800bdd2:	e7d0      	b.n	800bd76 <_dtoa_r+0x65e>
 800bdd4:	9704      	str	r7, [sp, #16]
 800bdd6:	4633      	mov	r3, r6
 800bdd8:	461e      	mov	r6, r3
 800bdda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bdde:	2a39      	cmp	r2, #57	@ 0x39
 800bde0:	d107      	bne.n	800bdf2 <_dtoa_r+0x6da>
 800bde2:	459a      	cmp	sl, r3
 800bde4:	d1f8      	bne.n	800bdd8 <_dtoa_r+0x6c0>
 800bde6:	9a04      	ldr	r2, [sp, #16]
 800bde8:	3201      	adds	r2, #1
 800bdea:	9204      	str	r2, [sp, #16]
 800bdec:	2230      	movs	r2, #48	@ 0x30
 800bdee:	f88a 2000 	strb.w	r2, [sl]
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	3201      	adds	r2, #1
 800bdf6:	701a      	strb	r2, [r3, #0]
 800bdf8:	e7bd      	b.n	800bd76 <_dtoa_r+0x65e>
 800bdfa:	4b7b      	ldr	r3, [pc, #492]	@ (800bfe8 <_dtoa_r+0x8d0>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f7f4 fc1b 	bl	8000638 <__aeabi_dmul>
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	4604      	mov	r4, r0
 800be08:	460d      	mov	r5, r1
 800be0a:	f7f4 fe7d 	bl	8000b08 <__aeabi_dcmpeq>
 800be0e:	2800      	cmp	r0, #0
 800be10:	f43f aebb 	beq.w	800bb8a <_dtoa_r+0x472>
 800be14:	e6f0      	b.n	800bbf8 <_dtoa_r+0x4e0>
 800be16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800be18:	2a00      	cmp	r2, #0
 800be1a:	f000 80db 	beq.w	800bfd4 <_dtoa_r+0x8bc>
 800be1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be20:	2a01      	cmp	r2, #1
 800be22:	f300 80bf 	bgt.w	800bfa4 <_dtoa_r+0x88c>
 800be26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800be28:	2a00      	cmp	r2, #0
 800be2a:	f000 80b7 	beq.w	800bf9c <_dtoa_r+0x884>
 800be2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800be32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800be34:	4646      	mov	r6, r8
 800be36:	9a08      	ldr	r2, [sp, #32]
 800be38:	2101      	movs	r1, #1
 800be3a:	441a      	add	r2, r3
 800be3c:	4658      	mov	r0, fp
 800be3e:	4498      	add	r8, r3
 800be40:	9208      	str	r2, [sp, #32]
 800be42:	f000 fc21 	bl	800c688 <__i2b>
 800be46:	4605      	mov	r5, r0
 800be48:	b15e      	cbz	r6, 800be62 <_dtoa_r+0x74a>
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	dd08      	ble.n	800be62 <_dtoa_r+0x74a>
 800be50:	42b3      	cmp	r3, r6
 800be52:	9a08      	ldr	r2, [sp, #32]
 800be54:	bfa8      	it	ge
 800be56:	4633      	movge	r3, r6
 800be58:	eba8 0803 	sub.w	r8, r8, r3
 800be5c:	1af6      	subs	r6, r6, r3
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	9308      	str	r3, [sp, #32]
 800be62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be64:	b1f3      	cbz	r3, 800bea4 <_dtoa_r+0x78c>
 800be66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 80b7 	beq.w	800bfdc <_dtoa_r+0x8c4>
 800be6e:	b18c      	cbz	r4, 800be94 <_dtoa_r+0x77c>
 800be70:	4629      	mov	r1, r5
 800be72:	4622      	mov	r2, r4
 800be74:	4658      	mov	r0, fp
 800be76:	f000 fcc7 	bl	800c808 <__pow5mult>
 800be7a:	464a      	mov	r2, r9
 800be7c:	4601      	mov	r1, r0
 800be7e:	4605      	mov	r5, r0
 800be80:	4658      	mov	r0, fp
 800be82:	f000 fc17 	bl	800c6b4 <__multiply>
 800be86:	4649      	mov	r1, r9
 800be88:	9004      	str	r0, [sp, #16]
 800be8a:	4658      	mov	r0, fp
 800be8c:	f000 fb48 	bl	800c520 <_Bfree>
 800be90:	9b04      	ldr	r3, [sp, #16]
 800be92:	4699      	mov	r9, r3
 800be94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be96:	1b1a      	subs	r2, r3, r4
 800be98:	d004      	beq.n	800bea4 <_dtoa_r+0x78c>
 800be9a:	4649      	mov	r1, r9
 800be9c:	4658      	mov	r0, fp
 800be9e:	f000 fcb3 	bl	800c808 <__pow5mult>
 800bea2:	4681      	mov	r9, r0
 800bea4:	2101      	movs	r1, #1
 800bea6:	4658      	mov	r0, fp
 800bea8:	f000 fbee 	bl	800c688 <__i2b>
 800beac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800beae:	4604      	mov	r4, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 81cf 	beq.w	800c254 <_dtoa_r+0xb3c>
 800beb6:	461a      	mov	r2, r3
 800beb8:	4601      	mov	r1, r0
 800beba:	4658      	mov	r0, fp
 800bebc:	f000 fca4 	bl	800c808 <__pow5mult>
 800bec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	4604      	mov	r4, r0
 800bec6:	f300 8095 	bgt.w	800bff4 <_dtoa_r+0x8dc>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f040 8087 	bne.w	800bfe0 <_dtoa_r+0x8c8>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f040 8089 	bne.w	800bff0 <_dtoa_r+0x8d8>
 800bede:	9b03      	ldr	r3, [sp, #12]
 800bee0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bee4:	0d1b      	lsrs	r3, r3, #20
 800bee6:	051b      	lsls	r3, r3, #20
 800bee8:	b12b      	cbz	r3, 800bef6 <_dtoa_r+0x7de>
 800beea:	9b08      	ldr	r3, [sp, #32]
 800beec:	3301      	adds	r3, #1
 800beee:	9308      	str	r3, [sp, #32]
 800bef0:	f108 0801 	add.w	r8, r8, #1
 800bef4:	2301      	movs	r3, #1
 800bef6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bef8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800befa:	2b00      	cmp	r3, #0
 800befc:	f000 81b0 	beq.w	800c260 <_dtoa_r+0xb48>
 800bf00:	6923      	ldr	r3, [r4, #16]
 800bf02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf06:	6918      	ldr	r0, [r3, #16]
 800bf08:	f000 fb72 	bl	800c5f0 <__hi0bits>
 800bf0c:	f1c0 0020 	rsb	r0, r0, #32
 800bf10:	9b08      	ldr	r3, [sp, #32]
 800bf12:	4418      	add	r0, r3
 800bf14:	f010 001f 	ands.w	r0, r0, #31
 800bf18:	d077      	beq.n	800c00a <_dtoa_r+0x8f2>
 800bf1a:	f1c0 0320 	rsb	r3, r0, #32
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	dd6b      	ble.n	800bffa <_dtoa_r+0x8e2>
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	f1c0 001c 	rsb	r0, r0, #28
 800bf28:	4403      	add	r3, r0
 800bf2a:	4480      	add	r8, r0
 800bf2c:	4406      	add	r6, r0
 800bf2e:	9308      	str	r3, [sp, #32]
 800bf30:	f1b8 0f00 	cmp.w	r8, #0
 800bf34:	dd05      	ble.n	800bf42 <_dtoa_r+0x82a>
 800bf36:	4649      	mov	r1, r9
 800bf38:	4642      	mov	r2, r8
 800bf3a:	4658      	mov	r0, fp
 800bf3c:	f000 fcbe 	bl	800c8bc <__lshift>
 800bf40:	4681      	mov	r9, r0
 800bf42:	9b08      	ldr	r3, [sp, #32]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd05      	ble.n	800bf54 <_dtoa_r+0x83c>
 800bf48:	4621      	mov	r1, r4
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4658      	mov	r0, fp
 800bf4e:	f000 fcb5 	bl	800c8bc <__lshift>
 800bf52:	4604      	mov	r4, r0
 800bf54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d059      	beq.n	800c00e <_dtoa_r+0x8f6>
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4648      	mov	r0, r9
 800bf5e:	f000 fd19 	bl	800c994 <__mcmp>
 800bf62:	2800      	cmp	r0, #0
 800bf64:	da53      	bge.n	800c00e <_dtoa_r+0x8f6>
 800bf66:	1e7b      	subs	r3, r7, #1
 800bf68:	9304      	str	r3, [sp, #16]
 800bf6a:	4649      	mov	r1, r9
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	220a      	movs	r2, #10
 800bf70:	4658      	mov	r0, fp
 800bf72:	f000 faf7 	bl	800c564 <__multadd>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf78:	4681      	mov	r9, r0
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	f000 8172 	beq.w	800c264 <_dtoa_r+0xb4c>
 800bf80:	2300      	movs	r3, #0
 800bf82:	4629      	mov	r1, r5
 800bf84:	220a      	movs	r2, #10
 800bf86:	4658      	mov	r0, fp
 800bf88:	f000 faec 	bl	800c564 <__multadd>
 800bf8c:	9b00      	ldr	r3, [sp, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	4605      	mov	r5, r0
 800bf92:	dc67      	bgt.n	800c064 <_dtoa_r+0x94c>
 800bf94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf96:	2b02      	cmp	r3, #2
 800bf98:	dc41      	bgt.n	800c01e <_dtoa_r+0x906>
 800bf9a:	e063      	b.n	800c064 <_dtoa_r+0x94c>
 800bf9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bfa2:	e746      	b.n	800be32 <_dtoa_r+0x71a>
 800bfa4:	9b07      	ldr	r3, [sp, #28]
 800bfa6:	1e5c      	subs	r4, r3, #1
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bfaa:	42a3      	cmp	r3, r4
 800bfac:	bfbf      	itttt	lt
 800bfae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bfb0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800bfb2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bfb4:	1ae3      	sublt	r3, r4, r3
 800bfb6:	bfb4      	ite	lt
 800bfb8:	18d2      	addlt	r2, r2, r3
 800bfba:	1b1c      	subge	r4, r3, r4
 800bfbc:	9b07      	ldr	r3, [sp, #28]
 800bfbe:	bfbc      	itt	lt
 800bfc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800bfc2:	2400      	movlt	r4, #0
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bfb5      	itete	lt
 800bfc8:	eba8 0603 	sublt.w	r6, r8, r3
 800bfcc:	9b07      	ldrge	r3, [sp, #28]
 800bfce:	2300      	movlt	r3, #0
 800bfd0:	4646      	movge	r6, r8
 800bfd2:	e730      	b.n	800be36 <_dtoa_r+0x71e>
 800bfd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bfd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bfd8:	4646      	mov	r6, r8
 800bfda:	e735      	b.n	800be48 <_dtoa_r+0x730>
 800bfdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfde:	e75c      	b.n	800be9a <_dtoa_r+0x782>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e788      	b.n	800bef6 <_dtoa_r+0x7de>
 800bfe4:	3fe00000 	.word	0x3fe00000
 800bfe8:	40240000 	.word	0x40240000
 800bfec:	40140000 	.word	0x40140000
 800bff0:	9b02      	ldr	r3, [sp, #8]
 800bff2:	e780      	b.n	800bef6 <_dtoa_r+0x7de>
 800bff4:	2300      	movs	r3, #0
 800bff6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bff8:	e782      	b.n	800bf00 <_dtoa_r+0x7e8>
 800bffa:	d099      	beq.n	800bf30 <_dtoa_r+0x818>
 800bffc:	9a08      	ldr	r2, [sp, #32]
 800bffe:	331c      	adds	r3, #28
 800c000:	441a      	add	r2, r3
 800c002:	4498      	add	r8, r3
 800c004:	441e      	add	r6, r3
 800c006:	9208      	str	r2, [sp, #32]
 800c008:	e792      	b.n	800bf30 <_dtoa_r+0x818>
 800c00a:	4603      	mov	r3, r0
 800c00c:	e7f6      	b.n	800bffc <_dtoa_r+0x8e4>
 800c00e:	9b07      	ldr	r3, [sp, #28]
 800c010:	9704      	str	r7, [sp, #16]
 800c012:	2b00      	cmp	r3, #0
 800c014:	dc20      	bgt.n	800c058 <_dtoa_r+0x940>
 800c016:	9300      	str	r3, [sp, #0]
 800c018:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	dd1e      	ble.n	800c05c <_dtoa_r+0x944>
 800c01e:	9b00      	ldr	r3, [sp, #0]
 800c020:	2b00      	cmp	r3, #0
 800c022:	f47f aec0 	bne.w	800bda6 <_dtoa_r+0x68e>
 800c026:	4621      	mov	r1, r4
 800c028:	2205      	movs	r2, #5
 800c02a:	4658      	mov	r0, fp
 800c02c:	f000 fa9a 	bl	800c564 <__multadd>
 800c030:	4601      	mov	r1, r0
 800c032:	4604      	mov	r4, r0
 800c034:	4648      	mov	r0, r9
 800c036:	f000 fcad 	bl	800c994 <__mcmp>
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f77f aeb3 	ble.w	800bda6 <_dtoa_r+0x68e>
 800c040:	4656      	mov	r6, sl
 800c042:	2331      	movs	r3, #49	@ 0x31
 800c044:	f806 3b01 	strb.w	r3, [r6], #1
 800c048:	9b04      	ldr	r3, [sp, #16]
 800c04a:	3301      	adds	r3, #1
 800c04c:	9304      	str	r3, [sp, #16]
 800c04e:	e6ae      	b.n	800bdae <_dtoa_r+0x696>
 800c050:	9c07      	ldr	r4, [sp, #28]
 800c052:	9704      	str	r7, [sp, #16]
 800c054:	4625      	mov	r5, r4
 800c056:	e7f3      	b.n	800c040 <_dtoa_r+0x928>
 800c058:	9b07      	ldr	r3, [sp, #28]
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	f000 8104 	beq.w	800c26c <_dtoa_r+0xb54>
 800c064:	2e00      	cmp	r6, #0
 800c066:	dd05      	ble.n	800c074 <_dtoa_r+0x95c>
 800c068:	4629      	mov	r1, r5
 800c06a:	4632      	mov	r2, r6
 800c06c:	4658      	mov	r0, fp
 800c06e:	f000 fc25 	bl	800c8bc <__lshift>
 800c072:	4605      	mov	r5, r0
 800c074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c076:	2b00      	cmp	r3, #0
 800c078:	d05a      	beq.n	800c130 <_dtoa_r+0xa18>
 800c07a:	6869      	ldr	r1, [r5, #4]
 800c07c:	4658      	mov	r0, fp
 800c07e:	f000 fa0f 	bl	800c4a0 <_Balloc>
 800c082:	4606      	mov	r6, r0
 800c084:	b928      	cbnz	r0, 800c092 <_dtoa_r+0x97a>
 800c086:	4b84      	ldr	r3, [pc, #528]	@ (800c298 <_dtoa_r+0xb80>)
 800c088:	4602      	mov	r2, r0
 800c08a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c08e:	f7ff bb5a 	b.w	800b746 <_dtoa_r+0x2e>
 800c092:	692a      	ldr	r2, [r5, #16]
 800c094:	3202      	adds	r2, #2
 800c096:	0092      	lsls	r2, r2, #2
 800c098:	f105 010c 	add.w	r1, r5, #12
 800c09c:	300c      	adds	r0, #12
 800c09e:	f000 ffaf 	bl	800d000 <memcpy>
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	4658      	mov	r0, fp
 800c0a8:	f000 fc08 	bl	800c8bc <__lshift>
 800c0ac:	f10a 0301 	add.w	r3, sl, #1
 800c0b0:	9307      	str	r3, [sp, #28]
 800c0b2:	9b00      	ldr	r3, [sp, #0]
 800c0b4:	4453      	add	r3, sl
 800c0b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0b8:	9b02      	ldr	r3, [sp, #8]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	462f      	mov	r7, r5
 800c0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	9b07      	ldr	r3, [sp, #28]
 800c0c6:	4621      	mov	r1, r4
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	4648      	mov	r0, r9
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	f7ff fa98 	bl	800b602 <quorem>
 800c0d2:	4639      	mov	r1, r7
 800c0d4:	9002      	str	r0, [sp, #8]
 800c0d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c0da:	4648      	mov	r0, r9
 800c0dc:	f000 fc5a 	bl	800c994 <__mcmp>
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	9008      	str	r0, [sp, #32]
 800c0e4:	4621      	mov	r1, r4
 800c0e6:	4658      	mov	r0, fp
 800c0e8:	f000 fc70 	bl	800c9cc <__mdiff>
 800c0ec:	68c2      	ldr	r2, [r0, #12]
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	bb02      	cbnz	r2, 800c134 <_dtoa_r+0xa1c>
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f000 fc4d 	bl	800c994 <__mcmp>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4658      	mov	r0, fp
 800c100:	920e      	str	r2, [sp, #56]	@ 0x38
 800c102:	f000 fa0d 	bl	800c520 <_Bfree>
 800c106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c10a:	9e07      	ldr	r6, [sp, #28]
 800c10c:	ea43 0102 	orr.w	r1, r3, r2
 800c110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c112:	4319      	orrs	r1, r3
 800c114:	d110      	bne.n	800c138 <_dtoa_r+0xa20>
 800c116:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c11a:	d029      	beq.n	800c170 <_dtoa_r+0xa58>
 800c11c:	9b08      	ldr	r3, [sp, #32]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd02      	ble.n	800c128 <_dtoa_r+0xa10>
 800c122:	9b02      	ldr	r3, [sp, #8]
 800c124:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	f883 8000 	strb.w	r8, [r3]
 800c12e:	e63f      	b.n	800bdb0 <_dtoa_r+0x698>
 800c130:	4628      	mov	r0, r5
 800c132:	e7bb      	b.n	800c0ac <_dtoa_r+0x994>
 800c134:	2201      	movs	r2, #1
 800c136:	e7e1      	b.n	800c0fc <_dtoa_r+0x9e4>
 800c138:	9b08      	ldr	r3, [sp, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	db04      	blt.n	800c148 <_dtoa_r+0xa30>
 800c13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c140:	430b      	orrs	r3, r1
 800c142:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c144:	430b      	orrs	r3, r1
 800c146:	d120      	bne.n	800c18a <_dtoa_r+0xa72>
 800c148:	2a00      	cmp	r2, #0
 800c14a:	dded      	ble.n	800c128 <_dtoa_r+0xa10>
 800c14c:	4649      	mov	r1, r9
 800c14e:	2201      	movs	r2, #1
 800c150:	4658      	mov	r0, fp
 800c152:	f000 fbb3 	bl	800c8bc <__lshift>
 800c156:	4621      	mov	r1, r4
 800c158:	4681      	mov	r9, r0
 800c15a:	f000 fc1b 	bl	800c994 <__mcmp>
 800c15e:	2800      	cmp	r0, #0
 800c160:	dc03      	bgt.n	800c16a <_dtoa_r+0xa52>
 800c162:	d1e1      	bne.n	800c128 <_dtoa_r+0xa10>
 800c164:	f018 0f01 	tst.w	r8, #1
 800c168:	d0de      	beq.n	800c128 <_dtoa_r+0xa10>
 800c16a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c16e:	d1d8      	bne.n	800c122 <_dtoa_r+0xa0a>
 800c170:	9a00      	ldr	r2, [sp, #0]
 800c172:	2339      	movs	r3, #57	@ 0x39
 800c174:	7013      	strb	r3, [r2, #0]
 800c176:	4633      	mov	r3, r6
 800c178:	461e      	mov	r6, r3
 800c17a:	3b01      	subs	r3, #1
 800c17c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c180:	2a39      	cmp	r2, #57	@ 0x39
 800c182:	d052      	beq.n	800c22a <_dtoa_r+0xb12>
 800c184:	3201      	adds	r2, #1
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e612      	b.n	800bdb0 <_dtoa_r+0x698>
 800c18a:	2a00      	cmp	r2, #0
 800c18c:	dd07      	ble.n	800c19e <_dtoa_r+0xa86>
 800c18e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c192:	d0ed      	beq.n	800c170 <_dtoa_r+0xa58>
 800c194:	9a00      	ldr	r2, [sp, #0]
 800c196:	f108 0301 	add.w	r3, r8, #1
 800c19a:	7013      	strb	r3, [r2, #0]
 800c19c:	e608      	b.n	800bdb0 <_dtoa_r+0x698>
 800c19e:	9b07      	ldr	r3, [sp, #28]
 800c1a0:	9a07      	ldr	r2, [sp, #28]
 800c1a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c1a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d028      	beq.n	800c1fe <_dtoa_r+0xae6>
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	4658      	mov	r0, fp
 800c1b4:	f000 f9d6 	bl	800c564 <__multadd>
 800c1b8:	42af      	cmp	r7, r5
 800c1ba:	4681      	mov	r9, r0
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	f04f 020a 	mov.w	r2, #10
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4658      	mov	r0, fp
 800c1c8:	d107      	bne.n	800c1da <_dtoa_r+0xac2>
 800c1ca:	f000 f9cb 	bl	800c564 <__multadd>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	9b07      	ldr	r3, [sp, #28]
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	9307      	str	r3, [sp, #28]
 800c1d8:	e774      	b.n	800c0c4 <_dtoa_r+0x9ac>
 800c1da:	f000 f9c3 	bl	800c564 <__multadd>
 800c1de:	4629      	mov	r1, r5
 800c1e0:	4607      	mov	r7, r0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4658      	mov	r0, fp
 800c1e8:	f000 f9bc 	bl	800c564 <__multadd>
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	e7f0      	b.n	800c1d2 <_dtoa_r+0xaba>
 800c1f0:	9b00      	ldr	r3, [sp, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bfcc      	ite	gt
 800c1f6:	461e      	movgt	r6, r3
 800c1f8:	2601      	movle	r6, #1
 800c1fa:	4456      	add	r6, sl
 800c1fc:	2700      	movs	r7, #0
 800c1fe:	4649      	mov	r1, r9
 800c200:	2201      	movs	r2, #1
 800c202:	4658      	mov	r0, fp
 800c204:	f000 fb5a 	bl	800c8bc <__lshift>
 800c208:	4621      	mov	r1, r4
 800c20a:	4681      	mov	r9, r0
 800c20c:	f000 fbc2 	bl	800c994 <__mcmp>
 800c210:	2800      	cmp	r0, #0
 800c212:	dcb0      	bgt.n	800c176 <_dtoa_r+0xa5e>
 800c214:	d102      	bne.n	800c21c <_dtoa_r+0xb04>
 800c216:	f018 0f01 	tst.w	r8, #1
 800c21a:	d1ac      	bne.n	800c176 <_dtoa_r+0xa5e>
 800c21c:	4633      	mov	r3, r6
 800c21e:	461e      	mov	r6, r3
 800c220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c224:	2a30      	cmp	r2, #48	@ 0x30
 800c226:	d0fa      	beq.n	800c21e <_dtoa_r+0xb06>
 800c228:	e5c2      	b.n	800bdb0 <_dtoa_r+0x698>
 800c22a:	459a      	cmp	sl, r3
 800c22c:	d1a4      	bne.n	800c178 <_dtoa_r+0xa60>
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	3301      	adds	r3, #1
 800c232:	9304      	str	r3, [sp, #16]
 800c234:	2331      	movs	r3, #49	@ 0x31
 800c236:	f88a 3000 	strb.w	r3, [sl]
 800c23a:	e5b9      	b.n	800bdb0 <_dtoa_r+0x698>
 800c23c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c23e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c29c <_dtoa_r+0xb84>
 800c242:	b11b      	cbz	r3, 800c24c <_dtoa_r+0xb34>
 800c244:	f10a 0308 	add.w	r3, sl, #8
 800c248:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c24a:	6013      	str	r3, [r2, #0]
 800c24c:	4650      	mov	r0, sl
 800c24e:	b019      	add	sp, #100	@ 0x64
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c256:	2b01      	cmp	r3, #1
 800c258:	f77f ae37 	ble.w	800beca <_dtoa_r+0x7b2>
 800c25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c25e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c260:	2001      	movs	r0, #1
 800c262:	e655      	b.n	800bf10 <_dtoa_r+0x7f8>
 800c264:	9b00      	ldr	r3, [sp, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	f77f aed6 	ble.w	800c018 <_dtoa_r+0x900>
 800c26c:	4656      	mov	r6, sl
 800c26e:	4621      	mov	r1, r4
 800c270:	4648      	mov	r0, r9
 800c272:	f7ff f9c6 	bl	800b602 <quorem>
 800c276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c27a:	f806 8b01 	strb.w	r8, [r6], #1
 800c27e:	9b00      	ldr	r3, [sp, #0]
 800c280:	eba6 020a 	sub.w	r2, r6, sl
 800c284:	4293      	cmp	r3, r2
 800c286:	ddb3      	ble.n	800c1f0 <_dtoa_r+0xad8>
 800c288:	4649      	mov	r1, r9
 800c28a:	2300      	movs	r3, #0
 800c28c:	220a      	movs	r2, #10
 800c28e:	4658      	mov	r0, fp
 800c290:	f000 f968 	bl	800c564 <__multadd>
 800c294:	4681      	mov	r9, r0
 800c296:	e7ea      	b.n	800c26e <_dtoa_r+0xb56>
 800c298:	08010d90 	.word	0x08010d90
 800c29c:	08010d14 	.word	0x08010d14

0800c2a0 <_free_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4605      	mov	r5, r0
 800c2a4:	2900      	cmp	r1, #0
 800c2a6:	d041      	beq.n	800c32c <_free_r+0x8c>
 800c2a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2ac:	1f0c      	subs	r4, r1, #4
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	bfb8      	it	lt
 800c2b2:	18e4      	addlt	r4, r4, r3
 800c2b4:	f000 f8e8 	bl	800c488 <__malloc_lock>
 800c2b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c330 <_free_r+0x90>)
 800c2ba:	6813      	ldr	r3, [r2, #0]
 800c2bc:	b933      	cbnz	r3, 800c2cc <_free_r+0x2c>
 800c2be:	6063      	str	r3, [r4, #4]
 800c2c0:	6014      	str	r4, [r2, #0]
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2c8:	f000 b8e4 	b.w	800c494 <__malloc_unlock>
 800c2cc:	42a3      	cmp	r3, r4
 800c2ce:	d908      	bls.n	800c2e2 <_free_r+0x42>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	1821      	adds	r1, r4, r0
 800c2d4:	428b      	cmp	r3, r1
 800c2d6:	bf01      	itttt	eq
 800c2d8:	6819      	ldreq	r1, [r3, #0]
 800c2da:	685b      	ldreq	r3, [r3, #4]
 800c2dc:	1809      	addeq	r1, r1, r0
 800c2de:	6021      	streq	r1, [r4, #0]
 800c2e0:	e7ed      	b.n	800c2be <_free_r+0x1e>
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	b10b      	cbz	r3, 800c2ec <_free_r+0x4c>
 800c2e8:	42a3      	cmp	r3, r4
 800c2ea:	d9fa      	bls.n	800c2e2 <_free_r+0x42>
 800c2ec:	6811      	ldr	r1, [r2, #0]
 800c2ee:	1850      	adds	r0, r2, r1
 800c2f0:	42a0      	cmp	r0, r4
 800c2f2:	d10b      	bne.n	800c30c <_free_r+0x6c>
 800c2f4:	6820      	ldr	r0, [r4, #0]
 800c2f6:	4401      	add	r1, r0
 800c2f8:	1850      	adds	r0, r2, r1
 800c2fa:	4283      	cmp	r3, r0
 800c2fc:	6011      	str	r1, [r2, #0]
 800c2fe:	d1e0      	bne.n	800c2c2 <_free_r+0x22>
 800c300:	6818      	ldr	r0, [r3, #0]
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	6053      	str	r3, [r2, #4]
 800c306:	4408      	add	r0, r1
 800c308:	6010      	str	r0, [r2, #0]
 800c30a:	e7da      	b.n	800c2c2 <_free_r+0x22>
 800c30c:	d902      	bls.n	800c314 <_free_r+0x74>
 800c30e:	230c      	movs	r3, #12
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	e7d6      	b.n	800c2c2 <_free_r+0x22>
 800c314:	6820      	ldr	r0, [r4, #0]
 800c316:	1821      	adds	r1, r4, r0
 800c318:	428b      	cmp	r3, r1
 800c31a:	bf04      	itt	eq
 800c31c:	6819      	ldreq	r1, [r3, #0]
 800c31e:	685b      	ldreq	r3, [r3, #4]
 800c320:	6063      	str	r3, [r4, #4]
 800c322:	bf04      	itt	eq
 800c324:	1809      	addeq	r1, r1, r0
 800c326:	6021      	streq	r1, [r4, #0]
 800c328:	6054      	str	r4, [r2, #4]
 800c32a:	e7ca      	b.n	800c2c2 <_free_r+0x22>
 800c32c:	bd38      	pop	{r3, r4, r5, pc}
 800c32e:	bf00      	nop
 800c330:	20000cd4 	.word	0x20000cd4

0800c334 <malloc>:
 800c334:	4b02      	ldr	r3, [pc, #8]	@ (800c340 <malloc+0xc>)
 800c336:	4601      	mov	r1, r0
 800c338:	6818      	ldr	r0, [r3, #0]
 800c33a:	f000 b825 	b.w	800c388 <_malloc_r>
 800c33e:	bf00      	nop
 800c340:	2000005c 	.word	0x2000005c

0800c344 <sbrk_aligned>:
 800c344:	b570      	push	{r4, r5, r6, lr}
 800c346:	4e0f      	ldr	r6, [pc, #60]	@ (800c384 <sbrk_aligned+0x40>)
 800c348:	460c      	mov	r4, r1
 800c34a:	6831      	ldr	r1, [r6, #0]
 800c34c:	4605      	mov	r5, r0
 800c34e:	b911      	cbnz	r1, 800c356 <sbrk_aligned+0x12>
 800c350:	f000 fe46 	bl	800cfe0 <_sbrk_r>
 800c354:	6030      	str	r0, [r6, #0]
 800c356:	4621      	mov	r1, r4
 800c358:	4628      	mov	r0, r5
 800c35a:	f000 fe41 	bl	800cfe0 <_sbrk_r>
 800c35e:	1c43      	adds	r3, r0, #1
 800c360:	d103      	bne.n	800c36a <sbrk_aligned+0x26>
 800c362:	f04f 34ff 	mov.w	r4, #4294967295
 800c366:	4620      	mov	r0, r4
 800c368:	bd70      	pop	{r4, r5, r6, pc}
 800c36a:	1cc4      	adds	r4, r0, #3
 800c36c:	f024 0403 	bic.w	r4, r4, #3
 800c370:	42a0      	cmp	r0, r4
 800c372:	d0f8      	beq.n	800c366 <sbrk_aligned+0x22>
 800c374:	1a21      	subs	r1, r4, r0
 800c376:	4628      	mov	r0, r5
 800c378:	f000 fe32 	bl	800cfe0 <_sbrk_r>
 800c37c:	3001      	adds	r0, #1
 800c37e:	d1f2      	bne.n	800c366 <sbrk_aligned+0x22>
 800c380:	e7ef      	b.n	800c362 <sbrk_aligned+0x1e>
 800c382:	bf00      	nop
 800c384:	20000cd0 	.word	0x20000cd0

0800c388 <_malloc_r>:
 800c388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c38c:	1ccd      	adds	r5, r1, #3
 800c38e:	f025 0503 	bic.w	r5, r5, #3
 800c392:	3508      	adds	r5, #8
 800c394:	2d0c      	cmp	r5, #12
 800c396:	bf38      	it	cc
 800c398:	250c      	movcc	r5, #12
 800c39a:	2d00      	cmp	r5, #0
 800c39c:	4606      	mov	r6, r0
 800c39e:	db01      	blt.n	800c3a4 <_malloc_r+0x1c>
 800c3a0:	42a9      	cmp	r1, r5
 800c3a2:	d904      	bls.n	800c3ae <_malloc_r+0x26>
 800c3a4:	230c      	movs	r3, #12
 800c3a6:	6033      	str	r3, [r6, #0]
 800c3a8:	2000      	movs	r0, #0
 800c3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c484 <_malloc_r+0xfc>
 800c3b2:	f000 f869 	bl	800c488 <__malloc_lock>
 800c3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ba:	461c      	mov	r4, r3
 800c3bc:	bb44      	cbnz	r4, 800c410 <_malloc_r+0x88>
 800c3be:	4629      	mov	r1, r5
 800c3c0:	4630      	mov	r0, r6
 800c3c2:	f7ff ffbf 	bl	800c344 <sbrk_aligned>
 800c3c6:	1c43      	adds	r3, r0, #1
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	d158      	bne.n	800c47e <_malloc_r+0xf6>
 800c3cc:	f8d8 4000 	ldr.w	r4, [r8]
 800c3d0:	4627      	mov	r7, r4
 800c3d2:	2f00      	cmp	r7, #0
 800c3d4:	d143      	bne.n	800c45e <_malloc_r+0xd6>
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	d04b      	beq.n	800c472 <_malloc_r+0xea>
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	4639      	mov	r1, r7
 800c3de:	4630      	mov	r0, r6
 800c3e0:	eb04 0903 	add.w	r9, r4, r3
 800c3e4:	f000 fdfc 	bl	800cfe0 <_sbrk_r>
 800c3e8:	4581      	cmp	r9, r0
 800c3ea:	d142      	bne.n	800c472 <_malloc_r+0xea>
 800c3ec:	6821      	ldr	r1, [r4, #0]
 800c3ee:	1a6d      	subs	r5, r5, r1
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7ff ffa6 	bl	800c344 <sbrk_aligned>
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d03a      	beq.n	800c472 <_malloc_r+0xea>
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	442b      	add	r3, r5
 800c400:	6023      	str	r3, [r4, #0]
 800c402:	f8d8 3000 	ldr.w	r3, [r8]
 800c406:	685a      	ldr	r2, [r3, #4]
 800c408:	bb62      	cbnz	r2, 800c464 <_malloc_r+0xdc>
 800c40a:	f8c8 7000 	str.w	r7, [r8]
 800c40e:	e00f      	b.n	800c430 <_malloc_r+0xa8>
 800c410:	6822      	ldr	r2, [r4, #0]
 800c412:	1b52      	subs	r2, r2, r5
 800c414:	d420      	bmi.n	800c458 <_malloc_r+0xd0>
 800c416:	2a0b      	cmp	r2, #11
 800c418:	d917      	bls.n	800c44a <_malloc_r+0xc2>
 800c41a:	1961      	adds	r1, r4, r5
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	6025      	str	r5, [r4, #0]
 800c420:	bf18      	it	ne
 800c422:	6059      	strne	r1, [r3, #4]
 800c424:	6863      	ldr	r3, [r4, #4]
 800c426:	bf08      	it	eq
 800c428:	f8c8 1000 	streq.w	r1, [r8]
 800c42c:	5162      	str	r2, [r4, r5]
 800c42e:	604b      	str	r3, [r1, #4]
 800c430:	4630      	mov	r0, r6
 800c432:	f000 f82f 	bl	800c494 <__malloc_unlock>
 800c436:	f104 000b 	add.w	r0, r4, #11
 800c43a:	1d23      	adds	r3, r4, #4
 800c43c:	f020 0007 	bic.w	r0, r0, #7
 800c440:	1ac2      	subs	r2, r0, r3
 800c442:	bf1c      	itt	ne
 800c444:	1a1b      	subne	r3, r3, r0
 800c446:	50a3      	strne	r3, [r4, r2]
 800c448:	e7af      	b.n	800c3aa <_malloc_r+0x22>
 800c44a:	6862      	ldr	r2, [r4, #4]
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	bf0c      	ite	eq
 800c450:	f8c8 2000 	streq.w	r2, [r8]
 800c454:	605a      	strne	r2, [r3, #4]
 800c456:	e7eb      	b.n	800c430 <_malloc_r+0xa8>
 800c458:	4623      	mov	r3, r4
 800c45a:	6864      	ldr	r4, [r4, #4]
 800c45c:	e7ae      	b.n	800c3bc <_malloc_r+0x34>
 800c45e:	463c      	mov	r4, r7
 800c460:	687f      	ldr	r7, [r7, #4]
 800c462:	e7b6      	b.n	800c3d2 <_malloc_r+0x4a>
 800c464:	461a      	mov	r2, r3
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	42a3      	cmp	r3, r4
 800c46a:	d1fb      	bne.n	800c464 <_malloc_r+0xdc>
 800c46c:	2300      	movs	r3, #0
 800c46e:	6053      	str	r3, [r2, #4]
 800c470:	e7de      	b.n	800c430 <_malloc_r+0xa8>
 800c472:	230c      	movs	r3, #12
 800c474:	6033      	str	r3, [r6, #0]
 800c476:	4630      	mov	r0, r6
 800c478:	f000 f80c 	bl	800c494 <__malloc_unlock>
 800c47c:	e794      	b.n	800c3a8 <_malloc_r+0x20>
 800c47e:	6005      	str	r5, [r0, #0]
 800c480:	e7d6      	b.n	800c430 <_malloc_r+0xa8>
 800c482:	bf00      	nop
 800c484:	20000cd4 	.word	0x20000cd4

0800c488 <__malloc_lock>:
 800c488:	4801      	ldr	r0, [pc, #4]	@ (800c490 <__malloc_lock+0x8>)
 800c48a:	f7ff b8b8 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800c48e:	bf00      	nop
 800c490:	20000ccc 	.word	0x20000ccc

0800c494 <__malloc_unlock>:
 800c494:	4801      	ldr	r0, [pc, #4]	@ (800c49c <__malloc_unlock+0x8>)
 800c496:	f7ff b8b3 	b.w	800b600 <__retarget_lock_release_recursive>
 800c49a:	bf00      	nop
 800c49c:	20000ccc 	.word	0x20000ccc

0800c4a0 <_Balloc>:
 800c4a0:	b570      	push	{r4, r5, r6, lr}
 800c4a2:	69c6      	ldr	r6, [r0, #28]
 800c4a4:	4604      	mov	r4, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	b976      	cbnz	r6, 800c4c8 <_Balloc+0x28>
 800c4aa:	2010      	movs	r0, #16
 800c4ac:	f7ff ff42 	bl	800c334 <malloc>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	61e0      	str	r0, [r4, #28]
 800c4b4:	b920      	cbnz	r0, 800c4c0 <_Balloc+0x20>
 800c4b6:	4b18      	ldr	r3, [pc, #96]	@ (800c518 <_Balloc+0x78>)
 800c4b8:	4818      	ldr	r0, [pc, #96]	@ (800c51c <_Balloc+0x7c>)
 800c4ba:	216b      	movs	r1, #107	@ 0x6b
 800c4bc:	f000 fdae 	bl	800d01c <__assert_func>
 800c4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4c4:	6006      	str	r6, [r0, #0]
 800c4c6:	60c6      	str	r6, [r0, #12]
 800c4c8:	69e6      	ldr	r6, [r4, #28]
 800c4ca:	68f3      	ldr	r3, [r6, #12]
 800c4cc:	b183      	cbz	r3, 800c4f0 <_Balloc+0x50>
 800c4ce:	69e3      	ldr	r3, [r4, #28]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c4d6:	b9b8      	cbnz	r0, 800c508 <_Balloc+0x68>
 800c4d8:	2101      	movs	r1, #1
 800c4da:	fa01 f605 	lsl.w	r6, r1, r5
 800c4de:	1d72      	adds	r2, r6, #5
 800c4e0:	0092      	lsls	r2, r2, #2
 800c4e2:	4620      	mov	r0, r4
 800c4e4:	f000 fdb8 	bl	800d058 <_calloc_r>
 800c4e8:	b160      	cbz	r0, 800c504 <_Balloc+0x64>
 800c4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4ee:	e00e      	b.n	800c50e <_Balloc+0x6e>
 800c4f0:	2221      	movs	r2, #33	@ 0x21
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fdaf 	bl	800d058 <_calloc_r>
 800c4fa:	69e3      	ldr	r3, [r4, #28]
 800c4fc:	60f0      	str	r0, [r6, #12]
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1e4      	bne.n	800c4ce <_Balloc+0x2e>
 800c504:	2000      	movs	r0, #0
 800c506:	bd70      	pop	{r4, r5, r6, pc}
 800c508:	6802      	ldr	r2, [r0, #0]
 800c50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c50e:	2300      	movs	r3, #0
 800c510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c514:	e7f7      	b.n	800c506 <_Balloc+0x66>
 800c516:	bf00      	nop
 800c518:	08010d21 	.word	0x08010d21
 800c51c:	08010da1 	.word	0x08010da1

0800c520 <_Bfree>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	69c6      	ldr	r6, [r0, #28]
 800c524:	4605      	mov	r5, r0
 800c526:	460c      	mov	r4, r1
 800c528:	b976      	cbnz	r6, 800c548 <_Bfree+0x28>
 800c52a:	2010      	movs	r0, #16
 800c52c:	f7ff ff02 	bl	800c334 <malloc>
 800c530:	4602      	mov	r2, r0
 800c532:	61e8      	str	r0, [r5, #28]
 800c534:	b920      	cbnz	r0, 800c540 <_Bfree+0x20>
 800c536:	4b09      	ldr	r3, [pc, #36]	@ (800c55c <_Bfree+0x3c>)
 800c538:	4809      	ldr	r0, [pc, #36]	@ (800c560 <_Bfree+0x40>)
 800c53a:	218f      	movs	r1, #143	@ 0x8f
 800c53c:	f000 fd6e 	bl	800d01c <__assert_func>
 800c540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c544:	6006      	str	r6, [r0, #0]
 800c546:	60c6      	str	r6, [r0, #12]
 800c548:	b13c      	cbz	r4, 800c55a <_Bfree+0x3a>
 800c54a:	69eb      	ldr	r3, [r5, #28]
 800c54c:	6862      	ldr	r2, [r4, #4]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c554:	6021      	str	r1, [r4, #0]
 800c556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c55a:	bd70      	pop	{r4, r5, r6, pc}
 800c55c:	08010d21 	.word	0x08010d21
 800c560:	08010da1 	.word	0x08010da1

0800c564 <__multadd>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	690d      	ldr	r5, [r1, #16]
 800c56a:	4607      	mov	r7, r0
 800c56c:	460c      	mov	r4, r1
 800c56e:	461e      	mov	r6, r3
 800c570:	f101 0c14 	add.w	ip, r1, #20
 800c574:	2000      	movs	r0, #0
 800c576:	f8dc 3000 	ldr.w	r3, [ip]
 800c57a:	b299      	uxth	r1, r3
 800c57c:	fb02 6101 	mla	r1, r2, r1, r6
 800c580:	0c1e      	lsrs	r6, r3, #16
 800c582:	0c0b      	lsrs	r3, r1, #16
 800c584:	fb02 3306 	mla	r3, r2, r6, r3
 800c588:	b289      	uxth	r1, r1
 800c58a:	3001      	adds	r0, #1
 800c58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c590:	4285      	cmp	r5, r0
 800c592:	f84c 1b04 	str.w	r1, [ip], #4
 800c596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c59a:	dcec      	bgt.n	800c576 <__multadd+0x12>
 800c59c:	b30e      	cbz	r6, 800c5e2 <__multadd+0x7e>
 800c59e:	68a3      	ldr	r3, [r4, #8]
 800c5a0:	42ab      	cmp	r3, r5
 800c5a2:	dc19      	bgt.n	800c5d8 <__multadd+0x74>
 800c5a4:	6861      	ldr	r1, [r4, #4]
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	3101      	adds	r1, #1
 800c5aa:	f7ff ff79 	bl	800c4a0 <_Balloc>
 800c5ae:	4680      	mov	r8, r0
 800c5b0:	b928      	cbnz	r0, 800c5be <__multadd+0x5a>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c5e8 <__multadd+0x84>)
 800c5b6:	480d      	ldr	r0, [pc, #52]	@ (800c5ec <__multadd+0x88>)
 800c5b8:	21ba      	movs	r1, #186	@ 0xba
 800c5ba:	f000 fd2f 	bl	800d01c <__assert_func>
 800c5be:	6922      	ldr	r2, [r4, #16]
 800c5c0:	3202      	adds	r2, #2
 800c5c2:	f104 010c 	add.w	r1, r4, #12
 800c5c6:	0092      	lsls	r2, r2, #2
 800c5c8:	300c      	adds	r0, #12
 800c5ca:	f000 fd19 	bl	800d000 <memcpy>
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4638      	mov	r0, r7
 800c5d2:	f7ff ffa5 	bl	800c520 <_Bfree>
 800c5d6:	4644      	mov	r4, r8
 800c5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c5dc:	3501      	adds	r5, #1
 800c5de:	615e      	str	r6, [r3, #20]
 800c5e0:	6125      	str	r5, [r4, #16]
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e8:	08010d90 	.word	0x08010d90
 800c5ec:	08010da1 	.word	0x08010da1

0800c5f0 <__hi0bits>:
 800c5f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	bf36      	itet	cc
 800c5f8:	0403      	lslcc	r3, r0, #16
 800c5fa:	2000      	movcs	r0, #0
 800c5fc:	2010      	movcc	r0, #16
 800c5fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c602:	bf3c      	itt	cc
 800c604:	021b      	lslcc	r3, r3, #8
 800c606:	3008      	addcc	r0, #8
 800c608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c60c:	bf3c      	itt	cc
 800c60e:	011b      	lslcc	r3, r3, #4
 800c610:	3004      	addcc	r0, #4
 800c612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c616:	bf3c      	itt	cc
 800c618:	009b      	lslcc	r3, r3, #2
 800c61a:	3002      	addcc	r0, #2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	db05      	blt.n	800c62c <__hi0bits+0x3c>
 800c620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c624:	f100 0001 	add.w	r0, r0, #1
 800c628:	bf08      	it	eq
 800c62a:	2020      	moveq	r0, #32
 800c62c:	4770      	bx	lr

0800c62e <__lo0bits>:
 800c62e:	6803      	ldr	r3, [r0, #0]
 800c630:	4602      	mov	r2, r0
 800c632:	f013 0007 	ands.w	r0, r3, #7
 800c636:	d00b      	beq.n	800c650 <__lo0bits+0x22>
 800c638:	07d9      	lsls	r1, r3, #31
 800c63a:	d421      	bmi.n	800c680 <__lo0bits+0x52>
 800c63c:	0798      	lsls	r0, r3, #30
 800c63e:	bf49      	itett	mi
 800c640:	085b      	lsrmi	r3, r3, #1
 800c642:	089b      	lsrpl	r3, r3, #2
 800c644:	2001      	movmi	r0, #1
 800c646:	6013      	strmi	r3, [r2, #0]
 800c648:	bf5c      	itt	pl
 800c64a:	6013      	strpl	r3, [r2, #0]
 800c64c:	2002      	movpl	r0, #2
 800c64e:	4770      	bx	lr
 800c650:	b299      	uxth	r1, r3
 800c652:	b909      	cbnz	r1, 800c658 <__lo0bits+0x2a>
 800c654:	0c1b      	lsrs	r3, r3, #16
 800c656:	2010      	movs	r0, #16
 800c658:	b2d9      	uxtb	r1, r3
 800c65a:	b909      	cbnz	r1, 800c660 <__lo0bits+0x32>
 800c65c:	3008      	adds	r0, #8
 800c65e:	0a1b      	lsrs	r3, r3, #8
 800c660:	0719      	lsls	r1, r3, #28
 800c662:	bf04      	itt	eq
 800c664:	091b      	lsreq	r3, r3, #4
 800c666:	3004      	addeq	r0, #4
 800c668:	0799      	lsls	r1, r3, #30
 800c66a:	bf04      	itt	eq
 800c66c:	089b      	lsreq	r3, r3, #2
 800c66e:	3002      	addeq	r0, #2
 800c670:	07d9      	lsls	r1, r3, #31
 800c672:	d403      	bmi.n	800c67c <__lo0bits+0x4e>
 800c674:	085b      	lsrs	r3, r3, #1
 800c676:	f100 0001 	add.w	r0, r0, #1
 800c67a:	d003      	beq.n	800c684 <__lo0bits+0x56>
 800c67c:	6013      	str	r3, [r2, #0]
 800c67e:	4770      	bx	lr
 800c680:	2000      	movs	r0, #0
 800c682:	4770      	bx	lr
 800c684:	2020      	movs	r0, #32
 800c686:	4770      	bx	lr

0800c688 <__i2b>:
 800c688:	b510      	push	{r4, lr}
 800c68a:	460c      	mov	r4, r1
 800c68c:	2101      	movs	r1, #1
 800c68e:	f7ff ff07 	bl	800c4a0 <_Balloc>
 800c692:	4602      	mov	r2, r0
 800c694:	b928      	cbnz	r0, 800c6a2 <__i2b+0x1a>
 800c696:	4b05      	ldr	r3, [pc, #20]	@ (800c6ac <__i2b+0x24>)
 800c698:	4805      	ldr	r0, [pc, #20]	@ (800c6b0 <__i2b+0x28>)
 800c69a:	f240 1145 	movw	r1, #325	@ 0x145
 800c69e:	f000 fcbd 	bl	800d01c <__assert_func>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	6144      	str	r4, [r0, #20]
 800c6a6:	6103      	str	r3, [r0, #16]
 800c6a8:	bd10      	pop	{r4, pc}
 800c6aa:	bf00      	nop
 800c6ac:	08010d90 	.word	0x08010d90
 800c6b0:	08010da1 	.word	0x08010da1

0800c6b4 <__multiply>:
 800c6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	690a      	ldr	r2, [r1, #16]
 800c6bc:	6923      	ldr	r3, [r4, #16]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	bfa8      	it	ge
 800c6c2:	4623      	movge	r3, r4
 800c6c4:	460f      	mov	r7, r1
 800c6c6:	bfa4      	itt	ge
 800c6c8:	460c      	movge	r4, r1
 800c6ca:	461f      	movge	r7, r3
 800c6cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c6d0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c6d4:	68a3      	ldr	r3, [r4, #8]
 800c6d6:	6861      	ldr	r1, [r4, #4]
 800c6d8:	eb0a 0609 	add.w	r6, sl, r9
 800c6dc:	42b3      	cmp	r3, r6
 800c6de:	b085      	sub	sp, #20
 800c6e0:	bfb8      	it	lt
 800c6e2:	3101      	addlt	r1, #1
 800c6e4:	f7ff fedc 	bl	800c4a0 <_Balloc>
 800c6e8:	b930      	cbnz	r0, 800c6f8 <__multiply+0x44>
 800c6ea:	4602      	mov	r2, r0
 800c6ec:	4b44      	ldr	r3, [pc, #272]	@ (800c800 <__multiply+0x14c>)
 800c6ee:	4845      	ldr	r0, [pc, #276]	@ (800c804 <__multiply+0x150>)
 800c6f0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6f4:	f000 fc92 	bl	800d01c <__assert_func>
 800c6f8:	f100 0514 	add.w	r5, r0, #20
 800c6fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c700:	462b      	mov	r3, r5
 800c702:	2200      	movs	r2, #0
 800c704:	4543      	cmp	r3, r8
 800c706:	d321      	bcc.n	800c74c <__multiply+0x98>
 800c708:	f107 0114 	add.w	r1, r7, #20
 800c70c:	f104 0214 	add.w	r2, r4, #20
 800c710:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c714:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c718:	9302      	str	r3, [sp, #8]
 800c71a:	1b13      	subs	r3, r2, r4
 800c71c:	3b15      	subs	r3, #21
 800c71e:	f023 0303 	bic.w	r3, r3, #3
 800c722:	3304      	adds	r3, #4
 800c724:	f104 0715 	add.w	r7, r4, #21
 800c728:	42ba      	cmp	r2, r7
 800c72a:	bf38      	it	cc
 800c72c:	2304      	movcc	r3, #4
 800c72e:	9301      	str	r3, [sp, #4]
 800c730:	9b02      	ldr	r3, [sp, #8]
 800c732:	9103      	str	r1, [sp, #12]
 800c734:	428b      	cmp	r3, r1
 800c736:	d80c      	bhi.n	800c752 <__multiply+0x9e>
 800c738:	2e00      	cmp	r6, #0
 800c73a:	dd03      	ble.n	800c744 <__multiply+0x90>
 800c73c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c740:	2b00      	cmp	r3, #0
 800c742:	d05b      	beq.n	800c7fc <__multiply+0x148>
 800c744:	6106      	str	r6, [r0, #16]
 800c746:	b005      	add	sp, #20
 800c748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74c:	f843 2b04 	str.w	r2, [r3], #4
 800c750:	e7d8      	b.n	800c704 <__multiply+0x50>
 800c752:	f8b1 a000 	ldrh.w	sl, [r1]
 800c756:	f1ba 0f00 	cmp.w	sl, #0
 800c75a:	d024      	beq.n	800c7a6 <__multiply+0xf2>
 800c75c:	f104 0e14 	add.w	lr, r4, #20
 800c760:	46a9      	mov	r9, r5
 800c762:	f04f 0c00 	mov.w	ip, #0
 800c766:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c76a:	f8d9 3000 	ldr.w	r3, [r9]
 800c76e:	fa1f fb87 	uxth.w	fp, r7
 800c772:	b29b      	uxth	r3, r3
 800c774:	fb0a 330b 	mla	r3, sl, fp, r3
 800c778:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c77c:	f8d9 7000 	ldr.w	r7, [r9]
 800c780:	4463      	add	r3, ip
 800c782:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c786:	fb0a c70b 	mla	r7, sl, fp, ip
 800c78a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c78e:	b29b      	uxth	r3, r3
 800c790:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c794:	4572      	cmp	r2, lr
 800c796:	f849 3b04 	str.w	r3, [r9], #4
 800c79a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c79e:	d8e2      	bhi.n	800c766 <__multiply+0xb2>
 800c7a0:	9b01      	ldr	r3, [sp, #4]
 800c7a2:	f845 c003 	str.w	ip, [r5, r3]
 800c7a6:	9b03      	ldr	r3, [sp, #12]
 800c7a8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c7ac:	3104      	adds	r1, #4
 800c7ae:	f1b9 0f00 	cmp.w	r9, #0
 800c7b2:	d021      	beq.n	800c7f8 <__multiply+0x144>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	f104 0c14 	add.w	ip, r4, #20
 800c7ba:	46ae      	mov	lr, r5
 800c7bc:	f04f 0a00 	mov.w	sl, #0
 800c7c0:	f8bc b000 	ldrh.w	fp, [ip]
 800c7c4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c7c8:	fb09 770b 	mla	r7, r9, fp, r7
 800c7cc:	4457      	add	r7, sl
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c7d4:	f84e 3b04 	str.w	r3, [lr], #4
 800c7d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c7dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7e0:	f8be 3000 	ldrh.w	r3, [lr]
 800c7e4:	fb09 330a 	mla	r3, r9, sl, r3
 800c7e8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c7ec:	4562      	cmp	r2, ip
 800c7ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7f2:	d8e5      	bhi.n	800c7c0 <__multiply+0x10c>
 800c7f4:	9f01      	ldr	r7, [sp, #4]
 800c7f6:	51eb      	str	r3, [r5, r7]
 800c7f8:	3504      	adds	r5, #4
 800c7fa:	e799      	b.n	800c730 <__multiply+0x7c>
 800c7fc:	3e01      	subs	r6, #1
 800c7fe:	e79b      	b.n	800c738 <__multiply+0x84>
 800c800:	08010d90 	.word	0x08010d90
 800c804:	08010da1 	.word	0x08010da1

0800c808 <__pow5mult>:
 800c808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c80c:	4615      	mov	r5, r2
 800c80e:	f012 0203 	ands.w	r2, r2, #3
 800c812:	4607      	mov	r7, r0
 800c814:	460e      	mov	r6, r1
 800c816:	d007      	beq.n	800c828 <__pow5mult+0x20>
 800c818:	4c25      	ldr	r4, [pc, #148]	@ (800c8b0 <__pow5mult+0xa8>)
 800c81a:	3a01      	subs	r2, #1
 800c81c:	2300      	movs	r3, #0
 800c81e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c822:	f7ff fe9f 	bl	800c564 <__multadd>
 800c826:	4606      	mov	r6, r0
 800c828:	10ad      	asrs	r5, r5, #2
 800c82a:	d03d      	beq.n	800c8a8 <__pow5mult+0xa0>
 800c82c:	69fc      	ldr	r4, [r7, #28]
 800c82e:	b97c      	cbnz	r4, 800c850 <__pow5mult+0x48>
 800c830:	2010      	movs	r0, #16
 800c832:	f7ff fd7f 	bl	800c334 <malloc>
 800c836:	4602      	mov	r2, r0
 800c838:	61f8      	str	r0, [r7, #28]
 800c83a:	b928      	cbnz	r0, 800c848 <__pow5mult+0x40>
 800c83c:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b4 <__pow5mult+0xac>)
 800c83e:	481e      	ldr	r0, [pc, #120]	@ (800c8b8 <__pow5mult+0xb0>)
 800c840:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c844:	f000 fbea 	bl	800d01c <__assert_func>
 800c848:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c84c:	6004      	str	r4, [r0, #0]
 800c84e:	60c4      	str	r4, [r0, #12]
 800c850:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c854:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c858:	b94c      	cbnz	r4, 800c86e <__pow5mult+0x66>
 800c85a:	f240 2171 	movw	r1, #625	@ 0x271
 800c85e:	4638      	mov	r0, r7
 800c860:	f7ff ff12 	bl	800c688 <__i2b>
 800c864:	2300      	movs	r3, #0
 800c866:	f8c8 0008 	str.w	r0, [r8, #8]
 800c86a:	4604      	mov	r4, r0
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	f04f 0900 	mov.w	r9, #0
 800c872:	07eb      	lsls	r3, r5, #31
 800c874:	d50a      	bpl.n	800c88c <__pow5mult+0x84>
 800c876:	4631      	mov	r1, r6
 800c878:	4622      	mov	r2, r4
 800c87a:	4638      	mov	r0, r7
 800c87c:	f7ff ff1a 	bl	800c6b4 <__multiply>
 800c880:	4631      	mov	r1, r6
 800c882:	4680      	mov	r8, r0
 800c884:	4638      	mov	r0, r7
 800c886:	f7ff fe4b 	bl	800c520 <_Bfree>
 800c88a:	4646      	mov	r6, r8
 800c88c:	106d      	asrs	r5, r5, #1
 800c88e:	d00b      	beq.n	800c8a8 <__pow5mult+0xa0>
 800c890:	6820      	ldr	r0, [r4, #0]
 800c892:	b938      	cbnz	r0, 800c8a4 <__pow5mult+0x9c>
 800c894:	4622      	mov	r2, r4
 800c896:	4621      	mov	r1, r4
 800c898:	4638      	mov	r0, r7
 800c89a:	f7ff ff0b 	bl	800c6b4 <__multiply>
 800c89e:	6020      	str	r0, [r4, #0]
 800c8a0:	f8c0 9000 	str.w	r9, [r0]
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	e7e4      	b.n	800c872 <__pow5mult+0x6a>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ae:	bf00      	nop
 800c8b0:	08010dfc 	.word	0x08010dfc
 800c8b4:	08010d21 	.word	0x08010d21
 800c8b8:	08010da1 	.word	0x08010da1

0800c8bc <__lshift>:
 800c8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c0:	460c      	mov	r4, r1
 800c8c2:	6849      	ldr	r1, [r1, #4]
 800c8c4:	6923      	ldr	r3, [r4, #16]
 800c8c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c8ca:	68a3      	ldr	r3, [r4, #8]
 800c8cc:	4607      	mov	r7, r0
 800c8ce:	4691      	mov	r9, r2
 800c8d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c8d4:	f108 0601 	add.w	r6, r8, #1
 800c8d8:	42b3      	cmp	r3, r6
 800c8da:	db0b      	blt.n	800c8f4 <__lshift+0x38>
 800c8dc:	4638      	mov	r0, r7
 800c8de:	f7ff fddf 	bl	800c4a0 <_Balloc>
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	b948      	cbnz	r0, 800c8fa <__lshift+0x3e>
 800c8e6:	4602      	mov	r2, r0
 800c8e8:	4b28      	ldr	r3, [pc, #160]	@ (800c98c <__lshift+0xd0>)
 800c8ea:	4829      	ldr	r0, [pc, #164]	@ (800c990 <__lshift+0xd4>)
 800c8ec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c8f0:	f000 fb94 	bl	800d01c <__assert_func>
 800c8f4:	3101      	adds	r1, #1
 800c8f6:	005b      	lsls	r3, r3, #1
 800c8f8:	e7ee      	b.n	800c8d8 <__lshift+0x1c>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f100 0114 	add.w	r1, r0, #20
 800c900:	f100 0210 	add.w	r2, r0, #16
 800c904:	4618      	mov	r0, r3
 800c906:	4553      	cmp	r3, sl
 800c908:	db33      	blt.n	800c972 <__lshift+0xb6>
 800c90a:	6920      	ldr	r0, [r4, #16]
 800c90c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c910:	f104 0314 	add.w	r3, r4, #20
 800c914:	f019 091f 	ands.w	r9, r9, #31
 800c918:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c91c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c920:	d02b      	beq.n	800c97a <__lshift+0xbe>
 800c922:	f1c9 0e20 	rsb	lr, r9, #32
 800c926:	468a      	mov	sl, r1
 800c928:	2200      	movs	r2, #0
 800c92a:	6818      	ldr	r0, [r3, #0]
 800c92c:	fa00 f009 	lsl.w	r0, r0, r9
 800c930:	4310      	orrs	r0, r2
 800c932:	f84a 0b04 	str.w	r0, [sl], #4
 800c936:	f853 2b04 	ldr.w	r2, [r3], #4
 800c93a:	459c      	cmp	ip, r3
 800c93c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c940:	d8f3      	bhi.n	800c92a <__lshift+0x6e>
 800c942:	ebac 0304 	sub.w	r3, ip, r4
 800c946:	3b15      	subs	r3, #21
 800c948:	f023 0303 	bic.w	r3, r3, #3
 800c94c:	3304      	adds	r3, #4
 800c94e:	f104 0015 	add.w	r0, r4, #21
 800c952:	4584      	cmp	ip, r0
 800c954:	bf38      	it	cc
 800c956:	2304      	movcc	r3, #4
 800c958:	50ca      	str	r2, [r1, r3]
 800c95a:	b10a      	cbz	r2, 800c960 <__lshift+0xa4>
 800c95c:	f108 0602 	add.w	r6, r8, #2
 800c960:	3e01      	subs	r6, #1
 800c962:	4638      	mov	r0, r7
 800c964:	612e      	str	r6, [r5, #16]
 800c966:	4621      	mov	r1, r4
 800c968:	f7ff fdda 	bl	800c520 <_Bfree>
 800c96c:	4628      	mov	r0, r5
 800c96e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c972:	f842 0f04 	str.w	r0, [r2, #4]!
 800c976:	3301      	adds	r3, #1
 800c978:	e7c5      	b.n	800c906 <__lshift+0x4a>
 800c97a:	3904      	subs	r1, #4
 800c97c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c980:	f841 2f04 	str.w	r2, [r1, #4]!
 800c984:	459c      	cmp	ip, r3
 800c986:	d8f9      	bhi.n	800c97c <__lshift+0xc0>
 800c988:	e7ea      	b.n	800c960 <__lshift+0xa4>
 800c98a:	bf00      	nop
 800c98c:	08010d90 	.word	0x08010d90
 800c990:	08010da1 	.word	0x08010da1

0800c994 <__mcmp>:
 800c994:	690a      	ldr	r2, [r1, #16]
 800c996:	4603      	mov	r3, r0
 800c998:	6900      	ldr	r0, [r0, #16]
 800c99a:	1a80      	subs	r0, r0, r2
 800c99c:	b530      	push	{r4, r5, lr}
 800c99e:	d10e      	bne.n	800c9be <__mcmp+0x2a>
 800c9a0:	3314      	adds	r3, #20
 800c9a2:	3114      	adds	r1, #20
 800c9a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c9a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c9ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9b4:	4295      	cmp	r5, r2
 800c9b6:	d003      	beq.n	800c9c0 <__mcmp+0x2c>
 800c9b8:	d205      	bcs.n	800c9c6 <__mcmp+0x32>
 800c9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c9be:	bd30      	pop	{r4, r5, pc}
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	d3f3      	bcc.n	800c9ac <__mcmp+0x18>
 800c9c4:	e7fb      	b.n	800c9be <__mcmp+0x2a>
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	e7f9      	b.n	800c9be <__mcmp+0x2a>
	...

0800c9cc <__mdiff>:
 800c9cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4689      	mov	r9, r1
 800c9d2:	4606      	mov	r6, r0
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4648      	mov	r0, r9
 800c9d8:	4614      	mov	r4, r2
 800c9da:	f7ff ffdb 	bl	800c994 <__mcmp>
 800c9de:	1e05      	subs	r5, r0, #0
 800c9e0:	d112      	bne.n	800ca08 <__mdiff+0x3c>
 800c9e2:	4629      	mov	r1, r5
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff fd5b 	bl	800c4a0 <_Balloc>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	b928      	cbnz	r0, 800c9fa <__mdiff+0x2e>
 800c9ee:	4b3f      	ldr	r3, [pc, #252]	@ (800caec <__mdiff+0x120>)
 800c9f0:	f240 2137 	movw	r1, #567	@ 0x237
 800c9f4:	483e      	ldr	r0, [pc, #248]	@ (800caf0 <__mdiff+0x124>)
 800c9f6:	f000 fb11 	bl	800d01c <__assert_func>
 800c9fa:	2301      	movs	r3, #1
 800c9fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ca00:	4610      	mov	r0, r2
 800ca02:	b003      	add	sp, #12
 800ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca08:	bfbc      	itt	lt
 800ca0a:	464b      	movlt	r3, r9
 800ca0c:	46a1      	movlt	r9, r4
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ca14:	bfba      	itte	lt
 800ca16:	461c      	movlt	r4, r3
 800ca18:	2501      	movlt	r5, #1
 800ca1a:	2500      	movge	r5, #0
 800ca1c:	f7ff fd40 	bl	800c4a0 <_Balloc>
 800ca20:	4602      	mov	r2, r0
 800ca22:	b918      	cbnz	r0, 800ca2c <__mdiff+0x60>
 800ca24:	4b31      	ldr	r3, [pc, #196]	@ (800caec <__mdiff+0x120>)
 800ca26:	f240 2145 	movw	r1, #581	@ 0x245
 800ca2a:	e7e3      	b.n	800c9f4 <__mdiff+0x28>
 800ca2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ca30:	6926      	ldr	r6, [r4, #16]
 800ca32:	60c5      	str	r5, [r0, #12]
 800ca34:	f109 0310 	add.w	r3, r9, #16
 800ca38:	f109 0514 	add.w	r5, r9, #20
 800ca3c:	f104 0e14 	add.w	lr, r4, #20
 800ca40:	f100 0b14 	add.w	fp, r0, #20
 800ca44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ca48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	46d9      	mov	r9, fp
 800ca50:	f04f 0c00 	mov.w	ip, #0
 800ca54:	9b01      	ldr	r3, [sp, #4]
 800ca56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	fa1f f38a 	uxth.w	r3, sl
 800ca64:	4619      	mov	r1, r3
 800ca66:	b283      	uxth	r3, r0
 800ca68:	1acb      	subs	r3, r1, r3
 800ca6a:	0c00      	lsrs	r0, r0, #16
 800ca6c:	4463      	add	r3, ip
 800ca6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca7c:	4576      	cmp	r6, lr
 800ca7e:	f849 3b04 	str.w	r3, [r9], #4
 800ca82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca86:	d8e5      	bhi.n	800ca54 <__mdiff+0x88>
 800ca88:	1b33      	subs	r3, r6, r4
 800ca8a:	3b15      	subs	r3, #21
 800ca8c:	f023 0303 	bic.w	r3, r3, #3
 800ca90:	3415      	adds	r4, #21
 800ca92:	3304      	adds	r3, #4
 800ca94:	42a6      	cmp	r6, r4
 800ca96:	bf38      	it	cc
 800ca98:	2304      	movcc	r3, #4
 800ca9a:	441d      	add	r5, r3
 800ca9c:	445b      	add	r3, fp
 800ca9e:	461e      	mov	r6, r3
 800caa0:	462c      	mov	r4, r5
 800caa2:	4544      	cmp	r4, r8
 800caa4:	d30e      	bcc.n	800cac4 <__mdiff+0xf8>
 800caa6:	f108 0103 	add.w	r1, r8, #3
 800caaa:	1b49      	subs	r1, r1, r5
 800caac:	f021 0103 	bic.w	r1, r1, #3
 800cab0:	3d03      	subs	r5, #3
 800cab2:	45a8      	cmp	r8, r5
 800cab4:	bf38      	it	cc
 800cab6:	2100      	movcc	r1, #0
 800cab8:	440b      	add	r3, r1
 800caba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cabe:	b191      	cbz	r1, 800cae6 <__mdiff+0x11a>
 800cac0:	6117      	str	r7, [r2, #16]
 800cac2:	e79d      	b.n	800ca00 <__mdiff+0x34>
 800cac4:	f854 1b04 	ldr.w	r1, [r4], #4
 800cac8:	46e6      	mov	lr, ip
 800caca:	0c08      	lsrs	r0, r1, #16
 800cacc:	fa1c fc81 	uxtah	ip, ip, r1
 800cad0:	4471      	add	r1, lr
 800cad2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cad6:	b289      	uxth	r1, r1
 800cad8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cadc:	f846 1b04 	str.w	r1, [r6], #4
 800cae0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cae4:	e7dd      	b.n	800caa2 <__mdiff+0xd6>
 800cae6:	3f01      	subs	r7, #1
 800cae8:	e7e7      	b.n	800caba <__mdiff+0xee>
 800caea:	bf00      	nop
 800caec:	08010d90 	.word	0x08010d90
 800caf0:	08010da1 	.word	0x08010da1

0800caf4 <__d2b>:
 800caf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800caf8:	460f      	mov	r7, r1
 800cafa:	2101      	movs	r1, #1
 800cafc:	ec59 8b10 	vmov	r8, r9, d0
 800cb00:	4616      	mov	r6, r2
 800cb02:	f7ff fccd 	bl	800c4a0 <_Balloc>
 800cb06:	4604      	mov	r4, r0
 800cb08:	b930      	cbnz	r0, 800cb18 <__d2b+0x24>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b23      	ldr	r3, [pc, #140]	@ (800cb9c <__d2b+0xa8>)
 800cb0e:	4824      	ldr	r0, [pc, #144]	@ (800cba0 <__d2b+0xac>)
 800cb10:	f240 310f 	movw	r1, #783	@ 0x30f
 800cb14:	f000 fa82 	bl	800d01c <__assert_func>
 800cb18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cb1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb20:	b10d      	cbz	r5, 800cb26 <__d2b+0x32>
 800cb22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cb26:	9301      	str	r3, [sp, #4]
 800cb28:	f1b8 0300 	subs.w	r3, r8, #0
 800cb2c:	d023      	beq.n	800cb76 <__d2b+0x82>
 800cb2e:	4668      	mov	r0, sp
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	f7ff fd7c 	bl	800c62e <__lo0bits>
 800cb36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cb3a:	b1d0      	cbz	r0, 800cb72 <__d2b+0x7e>
 800cb3c:	f1c0 0320 	rsb	r3, r0, #32
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	430b      	orrs	r3, r1
 800cb46:	40c2      	lsrs	r2, r0
 800cb48:	6163      	str	r3, [r4, #20]
 800cb4a:	9201      	str	r2, [sp, #4]
 800cb4c:	9b01      	ldr	r3, [sp, #4]
 800cb4e:	61a3      	str	r3, [r4, #24]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bf0c      	ite	eq
 800cb54:	2201      	moveq	r2, #1
 800cb56:	2202      	movne	r2, #2
 800cb58:	6122      	str	r2, [r4, #16]
 800cb5a:	b1a5      	cbz	r5, 800cb86 <__d2b+0x92>
 800cb5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb60:	4405      	add	r5, r0
 800cb62:	603d      	str	r5, [r7, #0]
 800cb64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb68:	6030      	str	r0, [r6, #0]
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	b003      	add	sp, #12
 800cb6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb72:	6161      	str	r1, [r4, #20]
 800cb74:	e7ea      	b.n	800cb4c <__d2b+0x58>
 800cb76:	a801      	add	r0, sp, #4
 800cb78:	f7ff fd59 	bl	800c62e <__lo0bits>
 800cb7c:	9b01      	ldr	r3, [sp, #4]
 800cb7e:	6163      	str	r3, [r4, #20]
 800cb80:	3020      	adds	r0, #32
 800cb82:	2201      	movs	r2, #1
 800cb84:	e7e8      	b.n	800cb58 <__d2b+0x64>
 800cb86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb8e:	6038      	str	r0, [r7, #0]
 800cb90:	6918      	ldr	r0, [r3, #16]
 800cb92:	f7ff fd2d 	bl	800c5f0 <__hi0bits>
 800cb96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb9a:	e7e5      	b.n	800cb68 <__d2b+0x74>
 800cb9c:	08010d90 	.word	0x08010d90
 800cba0:	08010da1 	.word	0x08010da1

0800cba4 <__ssputs_r>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	688e      	ldr	r6, [r1, #8]
 800cbaa:	461f      	mov	r7, r3
 800cbac:	42be      	cmp	r6, r7
 800cbae:	680b      	ldr	r3, [r1, #0]
 800cbb0:	4682      	mov	sl, r0
 800cbb2:	460c      	mov	r4, r1
 800cbb4:	4690      	mov	r8, r2
 800cbb6:	d82d      	bhi.n	800cc14 <__ssputs_r+0x70>
 800cbb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbbc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cbc0:	d026      	beq.n	800cc10 <__ssputs_r+0x6c>
 800cbc2:	6965      	ldr	r5, [r4, #20]
 800cbc4:	6909      	ldr	r1, [r1, #16]
 800cbc6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbca:	eba3 0901 	sub.w	r9, r3, r1
 800cbce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbd2:	1c7b      	adds	r3, r7, #1
 800cbd4:	444b      	add	r3, r9
 800cbd6:	106d      	asrs	r5, r5, #1
 800cbd8:	429d      	cmp	r5, r3
 800cbda:	bf38      	it	cc
 800cbdc:	461d      	movcc	r5, r3
 800cbde:	0553      	lsls	r3, r2, #21
 800cbe0:	d527      	bpl.n	800cc32 <__ssputs_r+0x8e>
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	f7ff fbd0 	bl	800c388 <_malloc_r>
 800cbe8:	4606      	mov	r6, r0
 800cbea:	b360      	cbz	r0, 800cc46 <__ssputs_r+0xa2>
 800cbec:	6921      	ldr	r1, [r4, #16]
 800cbee:	464a      	mov	r2, r9
 800cbf0:	f000 fa06 	bl	800d000 <memcpy>
 800cbf4:	89a3      	ldrh	r3, [r4, #12]
 800cbf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbfa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	6126      	str	r6, [r4, #16]
 800cc02:	6165      	str	r5, [r4, #20]
 800cc04:	444e      	add	r6, r9
 800cc06:	eba5 0509 	sub.w	r5, r5, r9
 800cc0a:	6026      	str	r6, [r4, #0]
 800cc0c:	60a5      	str	r5, [r4, #8]
 800cc0e:	463e      	mov	r6, r7
 800cc10:	42be      	cmp	r6, r7
 800cc12:	d900      	bls.n	800cc16 <__ssputs_r+0x72>
 800cc14:	463e      	mov	r6, r7
 800cc16:	6820      	ldr	r0, [r4, #0]
 800cc18:	4632      	mov	r2, r6
 800cc1a:	4641      	mov	r1, r8
 800cc1c:	f000 f9c6 	bl	800cfac <memmove>
 800cc20:	68a3      	ldr	r3, [r4, #8]
 800cc22:	1b9b      	subs	r3, r3, r6
 800cc24:	60a3      	str	r3, [r4, #8]
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	4433      	add	r3, r6
 800cc2a:	6023      	str	r3, [r4, #0]
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc32:	462a      	mov	r2, r5
 800cc34:	f000 fa36 	bl	800d0a4 <_realloc_r>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d1e0      	bne.n	800cc00 <__ssputs_r+0x5c>
 800cc3e:	6921      	ldr	r1, [r4, #16]
 800cc40:	4650      	mov	r0, sl
 800cc42:	f7ff fb2d 	bl	800c2a0 <_free_r>
 800cc46:	230c      	movs	r3, #12
 800cc48:	f8ca 3000 	str.w	r3, [sl]
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc52:	81a3      	strh	r3, [r4, #12]
 800cc54:	f04f 30ff 	mov.w	r0, #4294967295
 800cc58:	e7e9      	b.n	800cc2e <__ssputs_r+0x8a>
	...

0800cc5c <_svfiprintf_r>:
 800cc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc60:	4698      	mov	r8, r3
 800cc62:	898b      	ldrh	r3, [r1, #12]
 800cc64:	061b      	lsls	r3, r3, #24
 800cc66:	b09d      	sub	sp, #116	@ 0x74
 800cc68:	4607      	mov	r7, r0
 800cc6a:	460d      	mov	r5, r1
 800cc6c:	4614      	mov	r4, r2
 800cc6e:	d510      	bpl.n	800cc92 <_svfiprintf_r+0x36>
 800cc70:	690b      	ldr	r3, [r1, #16]
 800cc72:	b973      	cbnz	r3, 800cc92 <_svfiprintf_r+0x36>
 800cc74:	2140      	movs	r1, #64	@ 0x40
 800cc76:	f7ff fb87 	bl	800c388 <_malloc_r>
 800cc7a:	6028      	str	r0, [r5, #0]
 800cc7c:	6128      	str	r0, [r5, #16]
 800cc7e:	b930      	cbnz	r0, 800cc8e <_svfiprintf_r+0x32>
 800cc80:	230c      	movs	r3, #12
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	f04f 30ff 	mov.w	r0, #4294967295
 800cc88:	b01d      	add	sp, #116	@ 0x74
 800cc8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8e:	2340      	movs	r3, #64	@ 0x40
 800cc90:	616b      	str	r3, [r5, #20]
 800cc92:	2300      	movs	r3, #0
 800cc94:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc96:	2320      	movs	r3, #32
 800cc98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cca0:	2330      	movs	r3, #48	@ 0x30
 800cca2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ce40 <_svfiprintf_r+0x1e4>
 800cca6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccaa:	f04f 0901 	mov.w	r9, #1
 800ccae:	4623      	mov	r3, r4
 800ccb0:	469a      	mov	sl, r3
 800ccb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccb6:	b10a      	cbz	r2, 800ccbc <_svfiprintf_r+0x60>
 800ccb8:	2a25      	cmp	r2, #37	@ 0x25
 800ccba:	d1f9      	bne.n	800ccb0 <_svfiprintf_r+0x54>
 800ccbc:	ebba 0b04 	subs.w	fp, sl, r4
 800ccc0:	d00b      	beq.n	800ccda <_svfiprintf_r+0x7e>
 800ccc2:	465b      	mov	r3, fp
 800ccc4:	4622      	mov	r2, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	4638      	mov	r0, r7
 800ccca:	f7ff ff6b 	bl	800cba4 <__ssputs_r>
 800ccce:	3001      	adds	r0, #1
 800ccd0:	f000 80a7 	beq.w	800ce22 <_svfiprintf_r+0x1c6>
 800ccd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccd6:	445a      	add	r2, fp
 800ccd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ccda:	f89a 3000 	ldrb.w	r3, [sl]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 809f 	beq.w	800ce22 <_svfiprintf_r+0x1c6>
 800cce4:	2300      	movs	r3, #0
 800cce6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccee:	f10a 0a01 	add.w	sl, sl, #1
 800ccf2:	9304      	str	r3, [sp, #16]
 800ccf4:	9307      	str	r3, [sp, #28]
 800ccf6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccfa:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccfc:	4654      	mov	r4, sl
 800ccfe:	2205      	movs	r2, #5
 800cd00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd04:	484e      	ldr	r0, [pc, #312]	@ (800ce40 <_svfiprintf_r+0x1e4>)
 800cd06:	f7f3 fa83 	bl	8000210 <memchr>
 800cd0a:	9a04      	ldr	r2, [sp, #16]
 800cd0c:	b9d8      	cbnz	r0, 800cd46 <_svfiprintf_r+0xea>
 800cd0e:	06d0      	lsls	r0, r2, #27
 800cd10:	bf44      	itt	mi
 800cd12:	2320      	movmi	r3, #32
 800cd14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd18:	0711      	lsls	r1, r2, #28
 800cd1a:	bf44      	itt	mi
 800cd1c:	232b      	movmi	r3, #43	@ 0x2b
 800cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd22:	f89a 3000 	ldrb.w	r3, [sl]
 800cd26:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd28:	d015      	beq.n	800cd56 <_svfiprintf_r+0xfa>
 800cd2a:	9a07      	ldr	r2, [sp, #28]
 800cd2c:	4654      	mov	r4, sl
 800cd2e:	2000      	movs	r0, #0
 800cd30:	f04f 0c0a 	mov.w	ip, #10
 800cd34:	4621      	mov	r1, r4
 800cd36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd3a:	3b30      	subs	r3, #48	@ 0x30
 800cd3c:	2b09      	cmp	r3, #9
 800cd3e:	d94b      	bls.n	800cdd8 <_svfiprintf_r+0x17c>
 800cd40:	b1b0      	cbz	r0, 800cd70 <_svfiprintf_r+0x114>
 800cd42:	9207      	str	r2, [sp, #28]
 800cd44:	e014      	b.n	800cd70 <_svfiprintf_r+0x114>
 800cd46:	eba0 0308 	sub.w	r3, r0, r8
 800cd4a:	fa09 f303 	lsl.w	r3, r9, r3
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	9304      	str	r3, [sp, #16]
 800cd52:	46a2      	mov	sl, r4
 800cd54:	e7d2      	b.n	800ccfc <_svfiprintf_r+0xa0>
 800cd56:	9b03      	ldr	r3, [sp, #12]
 800cd58:	1d19      	adds	r1, r3, #4
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	9103      	str	r1, [sp, #12]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	bfbb      	ittet	lt
 800cd62:	425b      	neglt	r3, r3
 800cd64:	f042 0202 	orrlt.w	r2, r2, #2
 800cd68:	9307      	strge	r3, [sp, #28]
 800cd6a:	9307      	strlt	r3, [sp, #28]
 800cd6c:	bfb8      	it	lt
 800cd6e:	9204      	strlt	r2, [sp, #16]
 800cd70:	7823      	ldrb	r3, [r4, #0]
 800cd72:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd74:	d10a      	bne.n	800cd8c <_svfiprintf_r+0x130>
 800cd76:	7863      	ldrb	r3, [r4, #1]
 800cd78:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd7a:	d132      	bne.n	800cde2 <_svfiprintf_r+0x186>
 800cd7c:	9b03      	ldr	r3, [sp, #12]
 800cd7e:	1d1a      	adds	r2, r3, #4
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	9203      	str	r2, [sp, #12]
 800cd84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd88:	3402      	adds	r4, #2
 800cd8a:	9305      	str	r3, [sp, #20]
 800cd8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ce50 <_svfiprintf_r+0x1f4>
 800cd90:	7821      	ldrb	r1, [r4, #0]
 800cd92:	2203      	movs	r2, #3
 800cd94:	4650      	mov	r0, sl
 800cd96:	f7f3 fa3b 	bl	8000210 <memchr>
 800cd9a:	b138      	cbz	r0, 800cdac <_svfiprintf_r+0x150>
 800cd9c:	9b04      	ldr	r3, [sp, #16]
 800cd9e:	eba0 000a 	sub.w	r0, r0, sl
 800cda2:	2240      	movs	r2, #64	@ 0x40
 800cda4:	4082      	lsls	r2, r0
 800cda6:	4313      	orrs	r3, r2
 800cda8:	3401      	adds	r4, #1
 800cdaa:	9304      	str	r3, [sp, #16]
 800cdac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdb0:	4824      	ldr	r0, [pc, #144]	@ (800ce44 <_svfiprintf_r+0x1e8>)
 800cdb2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cdb6:	2206      	movs	r2, #6
 800cdb8:	f7f3 fa2a 	bl	8000210 <memchr>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d036      	beq.n	800ce2e <_svfiprintf_r+0x1d2>
 800cdc0:	4b21      	ldr	r3, [pc, #132]	@ (800ce48 <_svfiprintf_r+0x1ec>)
 800cdc2:	bb1b      	cbnz	r3, 800ce0c <_svfiprintf_r+0x1b0>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	3307      	adds	r3, #7
 800cdc8:	f023 0307 	bic.w	r3, r3, #7
 800cdcc:	3308      	adds	r3, #8
 800cdce:	9303      	str	r3, [sp, #12]
 800cdd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd2:	4433      	add	r3, r6
 800cdd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdd6:	e76a      	b.n	800ccae <_svfiprintf_r+0x52>
 800cdd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cddc:	460c      	mov	r4, r1
 800cdde:	2001      	movs	r0, #1
 800cde0:	e7a8      	b.n	800cd34 <_svfiprintf_r+0xd8>
 800cde2:	2300      	movs	r3, #0
 800cde4:	3401      	adds	r4, #1
 800cde6:	9305      	str	r3, [sp, #20]
 800cde8:	4619      	mov	r1, r3
 800cdea:	f04f 0c0a 	mov.w	ip, #10
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf4:	3a30      	subs	r2, #48	@ 0x30
 800cdf6:	2a09      	cmp	r2, #9
 800cdf8:	d903      	bls.n	800ce02 <_svfiprintf_r+0x1a6>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0c6      	beq.n	800cd8c <_svfiprintf_r+0x130>
 800cdfe:	9105      	str	r1, [sp, #20]
 800ce00:	e7c4      	b.n	800cd8c <_svfiprintf_r+0x130>
 800ce02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce06:	4604      	mov	r4, r0
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e7f0      	b.n	800cdee <_svfiprintf_r+0x192>
 800ce0c:	ab03      	add	r3, sp, #12
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	462a      	mov	r2, r5
 800ce12:	4b0e      	ldr	r3, [pc, #56]	@ (800ce4c <_svfiprintf_r+0x1f0>)
 800ce14:	a904      	add	r1, sp, #16
 800ce16:	4638      	mov	r0, r7
 800ce18:	f7fd fe96 	bl	800ab48 <_printf_float>
 800ce1c:	1c42      	adds	r2, r0, #1
 800ce1e:	4606      	mov	r6, r0
 800ce20:	d1d6      	bne.n	800cdd0 <_svfiprintf_r+0x174>
 800ce22:	89ab      	ldrh	r3, [r5, #12]
 800ce24:	065b      	lsls	r3, r3, #25
 800ce26:	f53f af2d 	bmi.w	800cc84 <_svfiprintf_r+0x28>
 800ce2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce2c:	e72c      	b.n	800cc88 <_svfiprintf_r+0x2c>
 800ce2e:	ab03      	add	r3, sp, #12
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	462a      	mov	r2, r5
 800ce34:	4b05      	ldr	r3, [pc, #20]	@ (800ce4c <_svfiprintf_r+0x1f0>)
 800ce36:	a904      	add	r1, sp, #16
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7fe f91d 	bl	800b078 <_printf_i>
 800ce3e:	e7ed      	b.n	800ce1c <_svfiprintf_r+0x1c0>
 800ce40:	08010ef8 	.word	0x08010ef8
 800ce44:	08010f02 	.word	0x08010f02
 800ce48:	0800ab49 	.word	0x0800ab49
 800ce4c:	0800cba5 	.word	0x0800cba5
 800ce50:	08010efe 	.word	0x08010efe

0800ce54 <__sflush_r>:
 800ce54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5c:	0716      	lsls	r6, r2, #28
 800ce5e:	4605      	mov	r5, r0
 800ce60:	460c      	mov	r4, r1
 800ce62:	d454      	bmi.n	800cf0e <__sflush_r+0xba>
 800ce64:	684b      	ldr	r3, [r1, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dc02      	bgt.n	800ce70 <__sflush_r+0x1c>
 800ce6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	dd48      	ble.n	800cf02 <__sflush_r+0xae>
 800ce70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce72:	2e00      	cmp	r6, #0
 800ce74:	d045      	beq.n	800cf02 <__sflush_r+0xae>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce7c:	682f      	ldr	r7, [r5, #0]
 800ce7e:	6a21      	ldr	r1, [r4, #32]
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	d030      	beq.n	800cee6 <__sflush_r+0x92>
 800ce84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	0759      	lsls	r1, r3, #29
 800ce8a:	d505      	bpl.n	800ce98 <__sflush_r+0x44>
 800ce8c:	6863      	ldr	r3, [r4, #4]
 800ce8e:	1ad2      	subs	r2, r2, r3
 800ce90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce92:	b10b      	cbz	r3, 800ce98 <__sflush_r+0x44>
 800ce94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	2300      	movs	r3, #0
 800ce9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce9c:	6a21      	ldr	r1, [r4, #32]
 800ce9e:	4628      	mov	r0, r5
 800cea0:	47b0      	blx	r6
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	d106      	bne.n	800ceb6 <__sflush_r+0x62>
 800cea8:	6829      	ldr	r1, [r5, #0]
 800ceaa:	291d      	cmp	r1, #29
 800ceac:	d82b      	bhi.n	800cf06 <__sflush_r+0xb2>
 800ceae:	4a2a      	ldr	r2, [pc, #168]	@ (800cf58 <__sflush_r+0x104>)
 800ceb0:	410a      	asrs	r2, r1
 800ceb2:	07d6      	lsls	r6, r2, #31
 800ceb4:	d427      	bmi.n	800cf06 <__sflush_r+0xb2>
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	6062      	str	r2, [r4, #4]
 800ceba:	04d9      	lsls	r1, r3, #19
 800cebc:	6922      	ldr	r2, [r4, #16]
 800cebe:	6022      	str	r2, [r4, #0]
 800cec0:	d504      	bpl.n	800cecc <__sflush_r+0x78>
 800cec2:	1c42      	adds	r2, r0, #1
 800cec4:	d101      	bne.n	800ceca <__sflush_r+0x76>
 800cec6:	682b      	ldr	r3, [r5, #0]
 800cec8:	b903      	cbnz	r3, 800cecc <__sflush_r+0x78>
 800ceca:	6560      	str	r0, [r4, #84]	@ 0x54
 800cecc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cece:	602f      	str	r7, [r5, #0]
 800ced0:	b1b9      	cbz	r1, 800cf02 <__sflush_r+0xae>
 800ced2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ced6:	4299      	cmp	r1, r3
 800ced8:	d002      	beq.n	800cee0 <__sflush_r+0x8c>
 800ceda:	4628      	mov	r0, r5
 800cedc:	f7ff f9e0 	bl	800c2a0 <_free_r>
 800cee0:	2300      	movs	r3, #0
 800cee2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cee4:	e00d      	b.n	800cf02 <__sflush_r+0xae>
 800cee6:	2301      	movs	r3, #1
 800cee8:	4628      	mov	r0, r5
 800ceea:	47b0      	blx	r6
 800ceec:	4602      	mov	r2, r0
 800ceee:	1c50      	adds	r0, r2, #1
 800cef0:	d1c9      	bne.n	800ce86 <__sflush_r+0x32>
 800cef2:	682b      	ldr	r3, [r5, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0c6      	beq.n	800ce86 <__sflush_r+0x32>
 800cef8:	2b1d      	cmp	r3, #29
 800cefa:	d001      	beq.n	800cf00 <__sflush_r+0xac>
 800cefc:	2b16      	cmp	r3, #22
 800cefe:	d11e      	bne.n	800cf3e <__sflush_r+0xea>
 800cf00:	602f      	str	r7, [r5, #0]
 800cf02:	2000      	movs	r0, #0
 800cf04:	e022      	b.n	800cf4c <__sflush_r+0xf8>
 800cf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf0a:	b21b      	sxth	r3, r3
 800cf0c:	e01b      	b.n	800cf46 <__sflush_r+0xf2>
 800cf0e:	690f      	ldr	r7, [r1, #16]
 800cf10:	2f00      	cmp	r7, #0
 800cf12:	d0f6      	beq.n	800cf02 <__sflush_r+0xae>
 800cf14:	0793      	lsls	r3, r2, #30
 800cf16:	680e      	ldr	r6, [r1, #0]
 800cf18:	bf08      	it	eq
 800cf1a:	694b      	ldreq	r3, [r1, #20]
 800cf1c:	600f      	str	r7, [r1, #0]
 800cf1e:	bf18      	it	ne
 800cf20:	2300      	movne	r3, #0
 800cf22:	eba6 0807 	sub.w	r8, r6, r7
 800cf26:	608b      	str	r3, [r1, #8]
 800cf28:	f1b8 0f00 	cmp.w	r8, #0
 800cf2c:	dde9      	ble.n	800cf02 <__sflush_r+0xae>
 800cf2e:	6a21      	ldr	r1, [r4, #32]
 800cf30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cf32:	4643      	mov	r3, r8
 800cf34:	463a      	mov	r2, r7
 800cf36:	4628      	mov	r0, r5
 800cf38:	47b0      	blx	r6
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	dc08      	bgt.n	800cf50 <__sflush_r+0xfc>
 800cf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	f04f 30ff 	mov.w	r0, #4294967295
 800cf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf50:	4407      	add	r7, r0
 800cf52:	eba8 0800 	sub.w	r8, r8, r0
 800cf56:	e7e7      	b.n	800cf28 <__sflush_r+0xd4>
 800cf58:	dfbffffe 	.word	0xdfbffffe

0800cf5c <_fflush_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	690b      	ldr	r3, [r1, #16]
 800cf60:	4605      	mov	r5, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	b913      	cbnz	r3, 800cf6c <_fflush_r+0x10>
 800cf66:	2500      	movs	r5, #0
 800cf68:	4628      	mov	r0, r5
 800cf6a:	bd38      	pop	{r3, r4, r5, pc}
 800cf6c:	b118      	cbz	r0, 800cf76 <_fflush_r+0x1a>
 800cf6e:	6a03      	ldr	r3, [r0, #32]
 800cf70:	b90b      	cbnz	r3, 800cf76 <_fflush_r+0x1a>
 800cf72:	f7fe fa2d 	bl	800b3d0 <__sinit>
 800cf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d0f3      	beq.n	800cf66 <_fflush_r+0xa>
 800cf7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf80:	07d0      	lsls	r0, r2, #31
 800cf82:	d404      	bmi.n	800cf8e <_fflush_r+0x32>
 800cf84:	0599      	lsls	r1, r3, #22
 800cf86:	d402      	bmi.n	800cf8e <_fflush_r+0x32>
 800cf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf8a:	f7fe fb38 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800cf8e:	4628      	mov	r0, r5
 800cf90:	4621      	mov	r1, r4
 800cf92:	f7ff ff5f 	bl	800ce54 <__sflush_r>
 800cf96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf98:	07da      	lsls	r2, r3, #31
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	d4e4      	bmi.n	800cf68 <_fflush_r+0xc>
 800cf9e:	89a3      	ldrh	r3, [r4, #12]
 800cfa0:	059b      	lsls	r3, r3, #22
 800cfa2:	d4e1      	bmi.n	800cf68 <_fflush_r+0xc>
 800cfa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cfa6:	f7fe fb2b 	bl	800b600 <__retarget_lock_release_recursive>
 800cfaa:	e7dd      	b.n	800cf68 <_fflush_r+0xc>

0800cfac <memmove>:
 800cfac:	4288      	cmp	r0, r1
 800cfae:	b510      	push	{r4, lr}
 800cfb0:	eb01 0402 	add.w	r4, r1, r2
 800cfb4:	d902      	bls.n	800cfbc <memmove+0x10>
 800cfb6:	4284      	cmp	r4, r0
 800cfb8:	4623      	mov	r3, r4
 800cfba:	d807      	bhi.n	800cfcc <memmove+0x20>
 800cfbc:	1e43      	subs	r3, r0, #1
 800cfbe:	42a1      	cmp	r1, r4
 800cfc0:	d008      	beq.n	800cfd4 <memmove+0x28>
 800cfc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cfc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cfca:	e7f8      	b.n	800cfbe <memmove+0x12>
 800cfcc:	4402      	add	r2, r0
 800cfce:	4601      	mov	r1, r0
 800cfd0:	428a      	cmp	r2, r1
 800cfd2:	d100      	bne.n	800cfd6 <memmove+0x2a>
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cfda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cfde:	e7f7      	b.n	800cfd0 <memmove+0x24>

0800cfe0 <_sbrk_r>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	4d06      	ldr	r5, [pc, #24]	@ (800cffc <_sbrk_r+0x1c>)
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	4604      	mov	r4, r0
 800cfe8:	4608      	mov	r0, r1
 800cfea:	602b      	str	r3, [r5, #0]
 800cfec:	f7f5 fd64 	bl	8002ab8 <_sbrk>
 800cff0:	1c43      	adds	r3, r0, #1
 800cff2:	d102      	bne.n	800cffa <_sbrk_r+0x1a>
 800cff4:	682b      	ldr	r3, [r5, #0]
 800cff6:	b103      	cbz	r3, 800cffa <_sbrk_r+0x1a>
 800cff8:	6023      	str	r3, [r4, #0]
 800cffa:	bd38      	pop	{r3, r4, r5, pc}
 800cffc:	20000cc8 	.word	0x20000cc8

0800d000 <memcpy>:
 800d000:	440a      	add	r2, r1
 800d002:	4291      	cmp	r1, r2
 800d004:	f100 33ff 	add.w	r3, r0, #4294967295
 800d008:	d100      	bne.n	800d00c <memcpy+0xc>
 800d00a:	4770      	bx	lr
 800d00c:	b510      	push	{r4, lr}
 800d00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d012:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d016:	4291      	cmp	r1, r2
 800d018:	d1f9      	bne.n	800d00e <memcpy+0xe>
 800d01a:	bd10      	pop	{r4, pc}

0800d01c <__assert_func>:
 800d01c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d01e:	4614      	mov	r4, r2
 800d020:	461a      	mov	r2, r3
 800d022:	4b09      	ldr	r3, [pc, #36]	@ (800d048 <__assert_func+0x2c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4605      	mov	r5, r0
 800d028:	68d8      	ldr	r0, [r3, #12]
 800d02a:	b954      	cbnz	r4, 800d042 <__assert_func+0x26>
 800d02c:	4b07      	ldr	r3, [pc, #28]	@ (800d04c <__assert_func+0x30>)
 800d02e:	461c      	mov	r4, r3
 800d030:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d034:	9100      	str	r1, [sp, #0]
 800d036:	462b      	mov	r3, r5
 800d038:	4905      	ldr	r1, [pc, #20]	@ (800d050 <__assert_func+0x34>)
 800d03a:	f000 f86f 	bl	800d11c <fiprintf>
 800d03e:	f000 f87f 	bl	800d140 <abort>
 800d042:	4b04      	ldr	r3, [pc, #16]	@ (800d054 <__assert_func+0x38>)
 800d044:	e7f4      	b.n	800d030 <__assert_func+0x14>
 800d046:	bf00      	nop
 800d048:	2000005c 	.word	0x2000005c
 800d04c:	08010f4e 	.word	0x08010f4e
 800d050:	08010f20 	.word	0x08010f20
 800d054:	08010f13 	.word	0x08010f13

0800d058 <_calloc_r>:
 800d058:	b570      	push	{r4, r5, r6, lr}
 800d05a:	fba1 5402 	umull	r5, r4, r1, r2
 800d05e:	b93c      	cbnz	r4, 800d070 <_calloc_r+0x18>
 800d060:	4629      	mov	r1, r5
 800d062:	f7ff f991 	bl	800c388 <_malloc_r>
 800d066:	4606      	mov	r6, r0
 800d068:	b928      	cbnz	r0, 800d076 <_calloc_r+0x1e>
 800d06a:	2600      	movs	r6, #0
 800d06c:	4630      	mov	r0, r6
 800d06e:	bd70      	pop	{r4, r5, r6, pc}
 800d070:	220c      	movs	r2, #12
 800d072:	6002      	str	r2, [r0, #0]
 800d074:	e7f9      	b.n	800d06a <_calloc_r+0x12>
 800d076:	462a      	mov	r2, r5
 800d078:	4621      	mov	r1, r4
 800d07a:	f7fe fa42 	bl	800b502 <memset>
 800d07e:	e7f5      	b.n	800d06c <_calloc_r+0x14>

0800d080 <__ascii_mbtowc>:
 800d080:	b082      	sub	sp, #8
 800d082:	b901      	cbnz	r1, 800d086 <__ascii_mbtowc+0x6>
 800d084:	a901      	add	r1, sp, #4
 800d086:	b142      	cbz	r2, 800d09a <__ascii_mbtowc+0x1a>
 800d088:	b14b      	cbz	r3, 800d09e <__ascii_mbtowc+0x1e>
 800d08a:	7813      	ldrb	r3, [r2, #0]
 800d08c:	600b      	str	r3, [r1, #0]
 800d08e:	7812      	ldrb	r2, [r2, #0]
 800d090:	1e10      	subs	r0, r2, #0
 800d092:	bf18      	it	ne
 800d094:	2001      	movne	r0, #1
 800d096:	b002      	add	sp, #8
 800d098:	4770      	bx	lr
 800d09a:	4610      	mov	r0, r2
 800d09c:	e7fb      	b.n	800d096 <__ascii_mbtowc+0x16>
 800d09e:	f06f 0001 	mvn.w	r0, #1
 800d0a2:	e7f8      	b.n	800d096 <__ascii_mbtowc+0x16>

0800d0a4 <_realloc_r>:
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	4680      	mov	r8, r0
 800d0aa:	4615      	mov	r5, r2
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	b921      	cbnz	r1, 800d0ba <_realloc_r+0x16>
 800d0b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b4:	4611      	mov	r1, r2
 800d0b6:	f7ff b967 	b.w	800c388 <_malloc_r>
 800d0ba:	b92a      	cbnz	r2, 800d0c8 <_realloc_r+0x24>
 800d0bc:	f7ff f8f0 	bl	800c2a0 <_free_r>
 800d0c0:	2400      	movs	r4, #0
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0c8:	f000 f841 	bl	800d14e <_malloc_usable_size_r>
 800d0cc:	4285      	cmp	r5, r0
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	d802      	bhi.n	800d0d8 <_realloc_r+0x34>
 800d0d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d0d6:	d8f4      	bhi.n	800d0c2 <_realloc_r+0x1e>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4640      	mov	r0, r8
 800d0dc:	f7ff f954 	bl	800c388 <_malloc_r>
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	2800      	cmp	r0, #0
 800d0e4:	d0ec      	beq.n	800d0c0 <_realloc_r+0x1c>
 800d0e6:	42b5      	cmp	r5, r6
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	bf28      	it	cs
 800d0ee:	4632      	movcs	r2, r6
 800d0f0:	f7ff ff86 	bl	800d000 <memcpy>
 800d0f4:	4621      	mov	r1, r4
 800d0f6:	4640      	mov	r0, r8
 800d0f8:	f7ff f8d2 	bl	800c2a0 <_free_r>
 800d0fc:	463c      	mov	r4, r7
 800d0fe:	e7e0      	b.n	800d0c2 <_realloc_r+0x1e>

0800d100 <__ascii_wctomb>:
 800d100:	4603      	mov	r3, r0
 800d102:	4608      	mov	r0, r1
 800d104:	b141      	cbz	r1, 800d118 <__ascii_wctomb+0x18>
 800d106:	2aff      	cmp	r2, #255	@ 0xff
 800d108:	d904      	bls.n	800d114 <__ascii_wctomb+0x14>
 800d10a:	228a      	movs	r2, #138	@ 0x8a
 800d10c:	601a      	str	r2, [r3, #0]
 800d10e:	f04f 30ff 	mov.w	r0, #4294967295
 800d112:	4770      	bx	lr
 800d114:	700a      	strb	r2, [r1, #0]
 800d116:	2001      	movs	r0, #1
 800d118:	4770      	bx	lr
	...

0800d11c <fiprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b503      	push	{r0, r1, lr}
 800d120:	4601      	mov	r1, r0
 800d122:	ab03      	add	r3, sp, #12
 800d124:	4805      	ldr	r0, [pc, #20]	@ (800d13c <fiprintf+0x20>)
 800d126:	f853 2b04 	ldr.w	r2, [r3], #4
 800d12a:	6800      	ldr	r0, [r0, #0]
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f000 f83f 	bl	800d1b0 <_vfiprintf_r>
 800d132:	b002      	add	sp, #8
 800d134:	f85d eb04 	ldr.w	lr, [sp], #4
 800d138:	b003      	add	sp, #12
 800d13a:	4770      	bx	lr
 800d13c:	2000005c 	.word	0x2000005c

0800d140 <abort>:
 800d140:	b508      	push	{r3, lr}
 800d142:	2006      	movs	r0, #6
 800d144:	f000 fa08 	bl	800d558 <raise>
 800d148:	2001      	movs	r0, #1
 800d14a:	f7f5 fc3d 	bl	80029c8 <_exit>

0800d14e <_malloc_usable_size_r>:
 800d14e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d152:	1f18      	subs	r0, r3, #4
 800d154:	2b00      	cmp	r3, #0
 800d156:	bfbc      	itt	lt
 800d158:	580b      	ldrlt	r3, [r1, r0]
 800d15a:	18c0      	addlt	r0, r0, r3
 800d15c:	4770      	bx	lr

0800d15e <__sfputc_r>:
 800d15e:	6893      	ldr	r3, [r2, #8]
 800d160:	3b01      	subs	r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	b410      	push	{r4}
 800d166:	6093      	str	r3, [r2, #8]
 800d168:	da08      	bge.n	800d17c <__sfputc_r+0x1e>
 800d16a:	6994      	ldr	r4, [r2, #24]
 800d16c:	42a3      	cmp	r3, r4
 800d16e:	db01      	blt.n	800d174 <__sfputc_r+0x16>
 800d170:	290a      	cmp	r1, #10
 800d172:	d103      	bne.n	800d17c <__sfputc_r+0x1e>
 800d174:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d178:	f000 b932 	b.w	800d3e0 <__swbuf_r>
 800d17c:	6813      	ldr	r3, [r2, #0]
 800d17e:	1c58      	adds	r0, r3, #1
 800d180:	6010      	str	r0, [r2, #0]
 800d182:	7019      	strb	r1, [r3, #0]
 800d184:	4608      	mov	r0, r1
 800d186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <__sfputs_r>:
 800d18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18e:	4606      	mov	r6, r0
 800d190:	460f      	mov	r7, r1
 800d192:	4614      	mov	r4, r2
 800d194:	18d5      	adds	r5, r2, r3
 800d196:	42ac      	cmp	r4, r5
 800d198:	d101      	bne.n	800d19e <__sfputs_r+0x12>
 800d19a:	2000      	movs	r0, #0
 800d19c:	e007      	b.n	800d1ae <__sfputs_r+0x22>
 800d19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a2:	463a      	mov	r2, r7
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7ff ffda 	bl	800d15e <__sfputc_r>
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	d1f3      	bne.n	800d196 <__sfputs_r+0xa>
 800d1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1b0 <_vfiprintf_r>:
 800d1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1b4:	460d      	mov	r5, r1
 800d1b6:	b09d      	sub	sp, #116	@ 0x74
 800d1b8:	4614      	mov	r4, r2
 800d1ba:	4698      	mov	r8, r3
 800d1bc:	4606      	mov	r6, r0
 800d1be:	b118      	cbz	r0, 800d1c8 <_vfiprintf_r+0x18>
 800d1c0:	6a03      	ldr	r3, [r0, #32]
 800d1c2:	b90b      	cbnz	r3, 800d1c8 <_vfiprintf_r+0x18>
 800d1c4:	f7fe f904 	bl	800b3d0 <__sinit>
 800d1c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1ca:	07d9      	lsls	r1, r3, #31
 800d1cc:	d405      	bmi.n	800d1da <_vfiprintf_r+0x2a>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	059a      	lsls	r2, r3, #22
 800d1d2:	d402      	bmi.n	800d1da <_vfiprintf_r+0x2a>
 800d1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1d6:	f7fe fa12 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800d1da:	89ab      	ldrh	r3, [r5, #12]
 800d1dc:	071b      	lsls	r3, r3, #28
 800d1de:	d501      	bpl.n	800d1e4 <_vfiprintf_r+0x34>
 800d1e0:	692b      	ldr	r3, [r5, #16]
 800d1e2:	b99b      	cbnz	r3, 800d20c <_vfiprintf_r+0x5c>
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f000 f938 	bl	800d45c <__swsetup_r>
 800d1ec:	b170      	cbz	r0, 800d20c <_vfiprintf_r+0x5c>
 800d1ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1f0:	07dc      	lsls	r4, r3, #31
 800d1f2:	d504      	bpl.n	800d1fe <_vfiprintf_r+0x4e>
 800d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f8:	b01d      	add	sp, #116	@ 0x74
 800d1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1fe:	89ab      	ldrh	r3, [r5, #12]
 800d200:	0598      	lsls	r0, r3, #22
 800d202:	d4f7      	bmi.n	800d1f4 <_vfiprintf_r+0x44>
 800d204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d206:	f7fe f9fb 	bl	800b600 <__retarget_lock_release_recursive>
 800d20a:	e7f3      	b.n	800d1f4 <_vfiprintf_r+0x44>
 800d20c:	2300      	movs	r3, #0
 800d20e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d210:	2320      	movs	r3, #32
 800d212:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d216:	f8cd 800c 	str.w	r8, [sp, #12]
 800d21a:	2330      	movs	r3, #48	@ 0x30
 800d21c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d3cc <_vfiprintf_r+0x21c>
 800d220:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d224:	f04f 0901 	mov.w	r9, #1
 800d228:	4623      	mov	r3, r4
 800d22a:	469a      	mov	sl, r3
 800d22c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d230:	b10a      	cbz	r2, 800d236 <_vfiprintf_r+0x86>
 800d232:	2a25      	cmp	r2, #37	@ 0x25
 800d234:	d1f9      	bne.n	800d22a <_vfiprintf_r+0x7a>
 800d236:	ebba 0b04 	subs.w	fp, sl, r4
 800d23a:	d00b      	beq.n	800d254 <_vfiprintf_r+0xa4>
 800d23c:	465b      	mov	r3, fp
 800d23e:	4622      	mov	r2, r4
 800d240:	4629      	mov	r1, r5
 800d242:	4630      	mov	r0, r6
 800d244:	f7ff ffa2 	bl	800d18c <__sfputs_r>
 800d248:	3001      	adds	r0, #1
 800d24a:	f000 80a7 	beq.w	800d39c <_vfiprintf_r+0x1ec>
 800d24e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d250:	445a      	add	r2, fp
 800d252:	9209      	str	r2, [sp, #36]	@ 0x24
 800d254:	f89a 3000 	ldrb.w	r3, [sl]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	f000 809f 	beq.w	800d39c <_vfiprintf_r+0x1ec>
 800d25e:	2300      	movs	r3, #0
 800d260:	f04f 32ff 	mov.w	r2, #4294967295
 800d264:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d268:	f10a 0a01 	add.w	sl, sl, #1
 800d26c:	9304      	str	r3, [sp, #16]
 800d26e:	9307      	str	r3, [sp, #28]
 800d270:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d274:	931a      	str	r3, [sp, #104]	@ 0x68
 800d276:	4654      	mov	r4, sl
 800d278:	2205      	movs	r2, #5
 800d27a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d27e:	4853      	ldr	r0, [pc, #332]	@ (800d3cc <_vfiprintf_r+0x21c>)
 800d280:	f7f2 ffc6 	bl	8000210 <memchr>
 800d284:	9a04      	ldr	r2, [sp, #16]
 800d286:	b9d8      	cbnz	r0, 800d2c0 <_vfiprintf_r+0x110>
 800d288:	06d1      	lsls	r1, r2, #27
 800d28a:	bf44      	itt	mi
 800d28c:	2320      	movmi	r3, #32
 800d28e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d292:	0713      	lsls	r3, r2, #28
 800d294:	bf44      	itt	mi
 800d296:	232b      	movmi	r3, #43	@ 0x2b
 800d298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d29c:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2a2:	d015      	beq.n	800d2d0 <_vfiprintf_r+0x120>
 800d2a4:	9a07      	ldr	r2, [sp, #28]
 800d2a6:	4654      	mov	r4, sl
 800d2a8:	2000      	movs	r0, #0
 800d2aa:	f04f 0c0a 	mov.w	ip, #10
 800d2ae:	4621      	mov	r1, r4
 800d2b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2b4:	3b30      	subs	r3, #48	@ 0x30
 800d2b6:	2b09      	cmp	r3, #9
 800d2b8:	d94b      	bls.n	800d352 <_vfiprintf_r+0x1a2>
 800d2ba:	b1b0      	cbz	r0, 800d2ea <_vfiprintf_r+0x13a>
 800d2bc:	9207      	str	r2, [sp, #28]
 800d2be:	e014      	b.n	800d2ea <_vfiprintf_r+0x13a>
 800d2c0:	eba0 0308 	sub.w	r3, r0, r8
 800d2c4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2c8:	4313      	orrs	r3, r2
 800d2ca:	9304      	str	r3, [sp, #16]
 800d2cc:	46a2      	mov	sl, r4
 800d2ce:	e7d2      	b.n	800d276 <_vfiprintf_r+0xc6>
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	1d19      	adds	r1, r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	9103      	str	r1, [sp, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	bfbb      	ittet	lt
 800d2dc:	425b      	neglt	r3, r3
 800d2de:	f042 0202 	orrlt.w	r2, r2, #2
 800d2e2:	9307      	strge	r3, [sp, #28]
 800d2e4:	9307      	strlt	r3, [sp, #28]
 800d2e6:	bfb8      	it	lt
 800d2e8:	9204      	strlt	r2, [sp, #16]
 800d2ea:	7823      	ldrb	r3, [r4, #0]
 800d2ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2ee:	d10a      	bne.n	800d306 <_vfiprintf_r+0x156>
 800d2f0:	7863      	ldrb	r3, [r4, #1]
 800d2f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2f4:	d132      	bne.n	800d35c <_vfiprintf_r+0x1ac>
 800d2f6:	9b03      	ldr	r3, [sp, #12]
 800d2f8:	1d1a      	adds	r2, r3, #4
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	9203      	str	r2, [sp, #12]
 800d2fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d302:	3402      	adds	r4, #2
 800d304:	9305      	str	r3, [sp, #20]
 800d306:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d3dc <_vfiprintf_r+0x22c>
 800d30a:	7821      	ldrb	r1, [r4, #0]
 800d30c:	2203      	movs	r2, #3
 800d30e:	4650      	mov	r0, sl
 800d310:	f7f2 ff7e 	bl	8000210 <memchr>
 800d314:	b138      	cbz	r0, 800d326 <_vfiprintf_r+0x176>
 800d316:	9b04      	ldr	r3, [sp, #16]
 800d318:	eba0 000a 	sub.w	r0, r0, sl
 800d31c:	2240      	movs	r2, #64	@ 0x40
 800d31e:	4082      	lsls	r2, r0
 800d320:	4313      	orrs	r3, r2
 800d322:	3401      	adds	r4, #1
 800d324:	9304      	str	r3, [sp, #16]
 800d326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d32a:	4829      	ldr	r0, [pc, #164]	@ (800d3d0 <_vfiprintf_r+0x220>)
 800d32c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d330:	2206      	movs	r2, #6
 800d332:	f7f2 ff6d 	bl	8000210 <memchr>
 800d336:	2800      	cmp	r0, #0
 800d338:	d03f      	beq.n	800d3ba <_vfiprintf_r+0x20a>
 800d33a:	4b26      	ldr	r3, [pc, #152]	@ (800d3d4 <_vfiprintf_r+0x224>)
 800d33c:	bb1b      	cbnz	r3, 800d386 <_vfiprintf_r+0x1d6>
 800d33e:	9b03      	ldr	r3, [sp, #12]
 800d340:	3307      	adds	r3, #7
 800d342:	f023 0307 	bic.w	r3, r3, #7
 800d346:	3308      	adds	r3, #8
 800d348:	9303      	str	r3, [sp, #12]
 800d34a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d34c:	443b      	add	r3, r7
 800d34e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d350:	e76a      	b.n	800d228 <_vfiprintf_r+0x78>
 800d352:	fb0c 3202 	mla	r2, ip, r2, r3
 800d356:	460c      	mov	r4, r1
 800d358:	2001      	movs	r0, #1
 800d35a:	e7a8      	b.n	800d2ae <_vfiprintf_r+0xfe>
 800d35c:	2300      	movs	r3, #0
 800d35e:	3401      	adds	r4, #1
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	4619      	mov	r1, r3
 800d364:	f04f 0c0a 	mov.w	ip, #10
 800d368:	4620      	mov	r0, r4
 800d36a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d36e:	3a30      	subs	r2, #48	@ 0x30
 800d370:	2a09      	cmp	r2, #9
 800d372:	d903      	bls.n	800d37c <_vfiprintf_r+0x1cc>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d0c6      	beq.n	800d306 <_vfiprintf_r+0x156>
 800d378:	9105      	str	r1, [sp, #20]
 800d37a:	e7c4      	b.n	800d306 <_vfiprintf_r+0x156>
 800d37c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d380:	4604      	mov	r4, r0
 800d382:	2301      	movs	r3, #1
 800d384:	e7f0      	b.n	800d368 <_vfiprintf_r+0x1b8>
 800d386:	ab03      	add	r3, sp, #12
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	462a      	mov	r2, r5
 800d38c:	4b12      	ldr	r3, [pc, #72]	@ (800d3d8 <_vfiprintf_r+0x228>)
 800d38e:	a904      	add	r1, sp, #16
 800d390:	4630      	mov	r0, r6
 800d392:	f7fd fbd9 	bl	800ab48 <_printf_float>
 800d396:	4607      	mov	r7, r0
 800d398:	1c78      	adds	r0, r7, #1
 800d39a:	d1d6      	bne.n	800d34a <_vfiprintf_r+0x19a>
 800d39c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d39e:	07d9      	lsls	r1, r3, #31
 800d3a0:	d405      	bmi.n	800d3ae <_vfiprintf_r+0x1fe>
 800d3a2:	89ab      	ldrh	r3, [r5, #12]
 800d3a4:	059a      	lsls	r2, r3, #22
 800d3a6:	d402      	bmi.n	800d3ae <_vfiprintf_r+0x1fe>
 800d3a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3aa:	f7fe f929 	bl	800b600 <__retarget_lock_release_recursive>
 800d3ae:	89ab      	ldrh	r3, [r5, #12]
 800d3b0:	065b      	lsls	r3, r3, #25
 800d3b2:	f53f af1f 	bmi.w	800d1f4 <_vfiprintf_r+0x44>
 800d3b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3b8:	e71e      	b.n	800d1f8 <_vfiprintf_r+0x48>
 800d3ba:	ab03      	add	r3, sp, #12
 800d3bc:	9300      	str	r3, [sp, #0]
 800d3be:	462a      	mov	r2, r5
 800d3c0:	4b05      	ldr	r3, [pc, #20]	@ (800d3d8 <_vfiprintf_r+0x228>)
 800d3c2:	a904      	add	r1, sp, #16
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	f7fd fe57 	bl	800b078 <_printf_i>
 800d3ca:	e7e4      	b.n	800d396 <_vfiprintf_r+0x1e6>
 800d3cc:	08010ef8 	.word	0x08010ef8
 800d3d0:	08010f02 	.word	0x08010f02
 800d3d4:	0800ab49 	.word	0x0800ab49
 800d3d8:	0800d18d 	.word	0x0800d18d
 800d3dc:	08010efe 	.word	0x08010efe

0800d3e0 <__swbuf_r>:
 800d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3e2:	460e      	mov	r6, r1
 800d3e4:	4614      	mov	r4, r2
 800d3e6:	4605      	mov	r5, r0
 800d3e8:	b118      	cbz	r0, 800d3f2 <__swbuf_r+0x12>
 800d3ea:	6a03      	ldr	r3, [r0, #32]
 800d3ec:	b90b      	cbnz	r3, 800d3f2 <__swbuf_r+0x12>
 800d3ee:	f7fd ffef 	bl	800b3d0 <__sinit>
 800d3f2:	69a3      	ldr	r3, [r4, #24]
 800d3f4:	60a3      	str	r3, [r4, #8]
 800d3f6:	89a3      	ldrh	r3, [r4, #12]
 800d3f8:	071a      	lsls	r2, r3, #28
 800d3fa:	d501      	bpl.n	800d400 <__swbuf_r+0x20>
 800d3fc:	6923      	ldr	r3, [r4, #16]
 800d3fe:	b943      	cbnz	r3, 800d412 <__swbuf_r+0x32>
 800d400:	4621      	mov	r1, r4
 800d402:	4628      	mov	r0, r5
 800d404:	f000 f82a 	bl	800d45c <__swsetup_r>
 800d408:	b118      	cbz	r0, 800d412 <__swbuf_r+0x32>
 800d40a:	f04f 37ff 	mov.w	r7, #4294967295
 800d40e:	4638      	mov	r0, r7
 800d410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d412:	6823      	ldr	r3, [r4, #0]
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	1a98      	subs	r0, r3, r2
 800d418:	6963      	ldr	r3, [r4, #20]
 800d41a:	b2f6      	uxtb	r6, r6
 800d41c:	4283      	cmp	r3, r0
 800d41e:	4637      	mov	r7, r6
 800d420:	dc05      	bgt.n	800d42e <__swbuf_r+0x4e>
 800d422:	4621      	mov	r1, r4
 800d424:	4628      	mov	r0, r5
 800d426:	f7ff fd99 	bl	800cf5c <_fflush_r>
 800d42a:	2800      	cmp	r0, #0
 800d42c:	d1ed      	bne.n	800d40a <__swbuf_r+0x2a>
 800d42e:	68a3      	ldr	r3, [r4, #8]
 800d430:	3b01      	subs	r3, #1
 800d432:	60a3      	str	r3, [r4, #8]
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	6022      	str	r2, [r4, #0]
 800d43a:	701e      	strb	r6, [r3, #0]
 800d43c:	6962      	ldr	r2, [r4, #20]
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	429a      	cmp	r2, r3
 800d442:	d004      	beq.n	800d44e <__swbuf_r+0x6e>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	07db      	lsls	r3, r3, #31
 800d448:	d5e1      	bpl.n	800d40e <__swbuf_r+0x2e>
 800d44a:	2e0a      	cmp	r6, #10
 800d44c:	d1df      	bne.n	800d40e <__swbuf_r+0x2e>
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fd83 	bl	800cf5c <_fflush_r>
 800d456:	2800      	cmp	r0, #0
 800d458:	d0d9      	beq.n	800d40e <__swbuf_r+0x2e>
 800d45a:	e7d6      	b.n	800d40a <__swbuf_r+0x2a>

0800d45c <__swsetup_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4b29      	ldr	r3, [pc, #164]	@ (800d504 <__swsetup_r+0xa8>)
 800d460:	4605      	mov	r5, r0
 800d462:	6818      	ldr	r0, [r3, #0]
 800d464:	460c      	mov	r4, r1
 800d466:	b118      	cbz	r0, 800d470 <__swsetup_r+0x14>
 800d468:	6a03      	ldr	r3, [r0, #32]
 800d46a:	b90b      	cbnz	r3, 800d470 <__swsetup_r+0x14>
 800d46c:	f7fd ffb0 	bl	800b3d0 <__sinit>
 800d470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d474:	0719      	lsls	r1, r3, #28
 800d476:	d422      	bmi.n	800d4be <__swsetup_r+0x62>
 800d478:	06da      	lsls	r2, r3, #27
 800d47a:	d407      	bmi.n	800d48c <__swsetup_r+0x30>
 800d47c:	2209      	movs	r2, #9
 800d47e:	602a      	str	r2, [r5, #0]
 800d480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d484:	81a3      	strh	r3, [r4, #12]
 800d486:	f04f 30ff 	mov.w	r0, #4294967295
 800d48a:	e033      	b.n	800d4f4 <__swsetup_r+0x98>
 800d48c:	0758      	lsls	r0, r3, #29
 800d48e:	d512      	bpl.n	800d4b6 <__swsetup_r+0x5a>
 800d490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d492:	b141      	cbz	r1, 800d4a6 <__swsetup_r+0x4a>
 800d494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d498:	4299      	cmp	r1, r3
 800d49a:	d002      	beq.n	800d4a2 <__swsetup_r+0x46>
 800d49c:	4628      	mov	r0, r5
 800d49e:	f7fe feff 	bl	800c2a0 <_free_r>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4ac:	81a3      	strh	r3, [r4, #12]
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	6063      	str	r3, [r4, #4]
 800d4b2:	6923      	ldr	r3, [r4, #16]
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	89a3      	ldrh	r3, [r4, #12]
 800d4b8:	f043 0308 	orr.w	r3, r3, #8
 800d4bc:	81a3      	strh	r3, [r4, #12]
 800d4be:	6923      	ldr	r3, [r4, #16]
 800d4c0:	b94b      	cbnz	r3, 800d4d6 <__swsetup_r+0x7a>
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4cc:	d003      	beq.n	800d4d6 <__swsetup_r+0x7a>
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f000 f883 	bl	800d5dc <__smakebuf_r>
 800d4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4da:	f013 0201 	ands.w	r2, r3, #1
 800d4de:	d00a      	beq.n	800d4f6 <__swsetup_r+0x9a>
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	60a2      	str	r2, [r4, #8]
 800d4e4:	6962      	ldr	r2, [r4, #20]
 800d4e6:	4252      	negs	r2, r2
 800d4e8:	61a2      	str	r2, [r4, #24]
 800d4ea:	6922      	ldr	r2, [r4, #16]
 800d4ec:	b942      	cbnz	r2, 800d500 <__swsetup_r+0xa4>
 800d4ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4f2:	d1c5      	bne.n	800d480 <__swsetup_r+0x24>
 800d4f4:	bd38      	pop	{r3, r4, r5, pc}
 800d4f6:	0799      	lsls	r1, r3, #30
 800d4f8:	bf58      	it	pl
 800d4fa:	6962      	ldrpl	r2, [r4, #20]
 800d4fc:	60a2      	str	r2, [r4, #8]
 800d4fe:	e7f4      	b.n	800d4ea <__swsetup_r+0x8e>
 800d500:	2000      	movs	r0, #0
 800d502:	e7f7      	b.n	800d4f4 <__swsetup_r+0x98>
 800d504:	2000005c 	.word	0x2000005c

0800d508 <_raise_r>:
 800d508:	291f      	cmp	r1, #31
 800d50a:	b538      	push	{r3, r4, r5, lr}
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	d904      	bls.n	800d51c <_raise_r+0x14>
 800d512:	2316      	movs	r3, #22
 800d514:	6003      	str	r3, [r0, #0]
 800d516:	f04f 30ff 	mov.w	r0, #4294967295
 800d51a:	bd38      	pop	{r3, r4, r5, pc}
 800d51c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d51e:	b112      	cbz	r2, 800d526 <_raise_r+0x1e>
 800d520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d524:	b94b      	cbnz	r3, 800d53a <_raise_r+0x32>
 800d526:	4628      	mov	r0, r5
 800d528:	f000 f830 	bl	800d58c <_getpid_r>
 800d52c:	4622      	mov	r2, r4
 800d52e:	4601      	mov	r1, r0
 800d530:	4628      	mov	r0, r5
 800d532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d536:	f000 b817 	b.w	800d568 <_kill_r>
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d00a      	beq.n	800d554 <_raise_r+0x4c>
 800d53e:	1c59      	adds	r1, r3, #1
 800d540:	d103      	bne.n	800d54a <_raise_r+0x42>
 800d542:	2316      	movs	r3, #22
 800d544:	6003      	str	r3, [r0, #0]
 800d546:	2001      	movs	r0, #1
 800d548:	e7e7      	b.n	800d51a <_raise_r+0x12>
 800d54a:	2100      	movs	r1, #0
 800d54c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d550:	4620      	mov	r0, r4
 800d552:	4798      	blx	r3
 800d554:	2000      	movs	r0, #0
 800d556:	e7e0      	b.n	800d51a <_raise_r+0x12>

0800d558 <raise>:
 800d558:	4b02      	ldr	r3, [pc, #8]	@ (800d564 <raise+0xc>)
 800d55a:	4601      	mov	r1, r0
 800d55c:	6818      	ldr	r0, [r3, #0]
 800d55e:	f7ff bfd3 	b.w	800d508 <_raise_r>
 800d562:	bf00      	nop
 800d564:	2000005c 	.word	0x2000005c

0800d568 <_kill_r>:
 800d568:	b538      	push	{r3, r4, r5, lr}
 800d56a:	4d07      	ldr	r5, [pc, #28]	@ (800d588 <_kill_r+0x20>)
 800d56c:	2300      	movs	r3, #0
 800d56e:	4604      	mov	r4, r0
 800d570:	4608      	mov	r0, r1
 800d572:	4611      	mov	r1, r2
 800d574:	602b      	str	r3, [r5, #0]
 800d576:	f7f5 fa17 	bl	80029a8 <_kill>
 800d57a:	1c43      	adds	r3, r0, #1
 800d57c:	d102      	bne.n	800d584 <_kill_r+0x1c>
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	b103      	cbz	r3, 800d584 <_kill_r+0x1c>
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	bd38      	pop	{r3, r4, r5, pc}
 800d586:	bf00      	nop
 800d588:	20000cc8 	.word	0x20000cc8

0800d58c <_getpid_r>:
 800d58c:	f7f5 ba04 	b.w	8002998 <_getpid>

0800d590 <__swhatbuf_r>:
 800d590:	b570      	push	{r4, r5, r6, lr}
 800d592:	460c      	mov	r4, r1
 800d594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d598:	2900      	cmp	r1, #0
 800d59a:	b096      	sub	sp, #88	@ 0x58
 800d59c:	4615      	mov	r5, r2
 800d59e:	461e      	mov	r6, r3
 800d5a0:	da0d      	bge.n	800d5be <__swhatbuf_r+0x2e>
 800d5a2:	89a3      	ldrh	r3, [r4, #12]
 800d5a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5a8:	f04f 0100 	mov.w	r1, #0
 800d5ac:	bf14      	ite	ne
 800d5ae:	2340      	movne	r3, #64	@ 0x40
 800d5b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	6031      	str	r1, [r6, #0]
 800d5b8:	602b      	str	r3, [r5, #0]
 800d5ba:	b016      	add	sp, #88	@ 0x58
 800d5bc:	bd70      	pop	{r4, r5, r6, pc}
 800d5be:	466a      	mov	r2, sp
 800d5c0:	f000 f848 	bl	800d654 <_fstat_r>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	dbec      	blt.n	800d5a2 <__swhatbuf_r+0x12>
 800d5c8:	9901      	ldr	r1, [sp, #4]
 800d5ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5d2:	4259      	negs	r1, r3
 800d5d4:	4159      	adcs	r1, r3
 800d5d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5da:	e7eb      	b.n	800d5b4 <__swhatbuf_r+0x24>

0800d5dc <__smakebuf_r>:
 800d5dc:	898b      	ldrh	r3, [r1, #12]
 800d5de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e0:	079d      	lsls	r5, r3, #30
 800d5e2:	4606      	mov	r6, r0
 800d5e4:	460c      	mov	r4, r1
 800d5e6:	d507      	bpl.n	800d5f8 <__smakebuf_r+0x1c>
 800d5e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5ec:	6023      	str	r3, [r4, #0]
 800d5ee:	6123      	str	r3, [r4, #16]
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	6163      	str	r3, [r4, #20]
 800d5f4:	b003      	add	sp, #12
 800d5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f8:	ab01      	add	r3, sp, #4
 800d5fa:	466a      	mov	r2, sp
 800d5fc:	f7ff ffc8 	bl	800d590 <__swhatbuf_r>
 800d600:	9f00      	ldr	r7, [sp, #0]
 800d602:	4605      	mov	r5, r0
 800d604:	4639      	mov	r1, r7
 800d606:	4630      	mov	r0, r6
 800d608:	f7fe febe 	bl	800c388 <_malloc_r>
 800d60c:	b948      	cbnz	r0, 800d622 <__smakebuf_r+0x46>
 800d60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d612:	059a      	lsls	r2, r3, #22
 800d614:	d4ee      	bmi.n	800d5f4 <__smakebuf_r+0x18>
 800d616:	f023 0303 	bic.w	r3, r3, #3
 800d61a:	f043 0302 	orr.w	r3, r3, #2
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	e7e2      	b.n	800d5e8 <__smakebuf_r+0xc>
 800d622:	89a3      	ldrh	r3, [r4, #12]
 800d624:	6020      	str	r0, [r4, #0]
 800d626:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	9b01      	ldr	r3, [sp, #4]
 800d62e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d632:	b15b      	cbz	r3, 800d64c <__smakebuf_r+0x70>
 800d634:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d638:	4630      	mov	r0, r6
 800d63a:	f000 f81d 	bl	800d678 <_isatty_r>
 800d63e:	b128      	cbz	r0, 800d64c <__smakebuf_r+0x70>
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	f023 0303 	bic.w	r3, r3, #3
 800d646:	f043 0301 	orr.w	r3, r3, #1
 800d64a:	81a3      	strh	r3, [r4, #12]
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	431d      	orrs	r5, r3
 800d650:	81a5      	strh	r5, [r4, #12]
 800d652:	e7cf      	b.n	800d5f4 <__smakebuf_r+0x18>

0800d654 <_fstat_r>:
 800d654:	b538      	push	{r3, r4, r5, lr}
 800d656:	4d07      	ldr	r5, [pc, #28]	@ (800d674 <_fstat_r+0x20>)
 800d658:	2300      	movs	r3, #0
 800d65a:	4604      	mov	r4, r0
 800d65c:	4608      	mov	r0, r1
 800d65e:	4611      	mov	r1, r2
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	f7f5 fa01 	bl	8002a68 <_fstat>
 800d666:	1c43      	adds	r3, r0, #1
 800d668:	d102      	bne.n	800d670 <_fstat_r+0x1c>
 800d66a:	682b      	ldr	r3, [r5, #0]
 800d66c:	b103      	cbz	r3, 800d670 <_fstat_r+0x1c>
 800d66e:	6023      	str	r3, [r4, #0]
 800d670:	bd38      	pop	{r3, r4, r5, pc}
 800d672:	bf00      	nop
 800d674:	20000cc8 	.word	0x20000cc8

0800d678 <_isatty_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	4d06      	ldr	r5, [pc, #24]	@ (800d694 <_isatty_r+0x1c>)
 800d67c:	2300      	movs	r3, #0
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7f5 fa00 	bl	8002a88 <_isatty>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_isatty_r+0x1a>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_isatty_r+0x1a>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20000cc8 	.word	0x20000cc8

0800d698 <sin>:
 800d698:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d69a:	ec53 2b10 	vmov	r2, r3, d0
 800d69e:	4826      	ldr	r0, [pc, #152]	@ (800d738 <sin+0xa0>)
 800d6a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d6a4:	4281      	cmp	r1, r0
 800d6a6:	d807      	bhi.n	800d6b8 <sin+0x20>
 800d6a8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d730 <sin+0x98>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	b005      	add	sp, #20
 800d6b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6b4:	f000 b954 	b.w	800d960 <__kernel_sin>
 800d6b8:	4820      	ldr	r0, [pc, #128]	@ (800d73c <sin+0xa4>)
 800d6ba:	4281      	cmp	r1, r0
 800d6bc:	d908      	bls.n	800d6d0 <sin+0x38>
 800d6be:	4610      	mov	r0, r2
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	f7f2 fe01 	bl	80002c8 <__aeabi_dsub>
 800d6c6:	ec41 0b10 	vmov	d0, r0, r1
 800d6ca:	b005      	add	sp, #20
 800d6cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d6d0:	4668      	mov	r0, sp
 800d6d2:	f000 fa01 	bl	800dad8 <__ieee754_rem_pio2>
 800d6d6:	f000 0003 	and.w	r0, r0, #3
 800d6da:	2801      	cmp	r0, #1
 800d6dc:	d00c      	beq.n	800d6f8 <sin+0x60>
 800d6de:	2802      	cmp	r0, #2
 800d6e0:	d011      	beq.n	800d706 <sin+0x6e>
 800d6e2:	b9e8      	cbnz	r0, 800d720 <sin+0x88>
 800d6e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6e8:	ed9d 0b00 	vldr	d0, [sp]
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	f000 f937 	bl	800d960 <__kernel_sin>
 800d6f2:	ec51 0b10 	vmov	r0, r1, d0
 800d6f6:	e7e6      	b.n	800d6c6 <sin+0x2e>
 800d6f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d6fc:	ed9d 0b00 	vldr	d0, [sp]
 800d700:	f000 f866 	bl	800d7d0 <__kernel_cos>
 800d704:	e7f5      	b.n	800d6f2 <sin+0x5a>
 800d706:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d70a:	ed9d 0b00 	vldr	d0, [sp]
 800d70e:	2001      	movs	r0, #1
 800d710:	f000 f926 	bl	800d960 <__kernel_sin>
 800d714:	ec53 2b10 	vmov	r2, r3, d0
 800d718:	4610      	mov	r0, r2
 800d71a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d71e:	e7d2      	b.n	800d6c6 <sin+0x2e>
 800d720:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d724:	ed9d 0b00 	vldr	d0, [sp]
 800d728:	f000 f852 	bl	800d7d0 <__kernel_cos>
 800d72c:	e7f2      	b.n	800d714 <sin+0x7c>
 800d72e:	bf00      	nop
	...
 800d738:	3fe921fb 	.word	0x3fe921fb
 800d73c:	7fefffff 	.word	0x7fefffff

0800d740 <sinf>:
 800d740:	ee10 3a10 	vmov	r3, s0
 800d744:	b507      	push	{r0, r1, r2, lr}
 800d746:	4a1f      	ldr	r2, [pc, #124]	@ (800d7c4 <sinf+0x84>)
 800d748:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d807      	bhi.n	800d760 <sinf+0x20>
 800d750:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d7c8 <sinf+0x88>
 800d754:	2000      	movs	r0, #0
 800d756:	b003      	add	sp, #12
 800d758:	f85d eb04 	ldr.w	lr, [sp], #4
 800d75c:	f000 bc18 	b.w	800df90 <__kernel_sinf>
 800d760:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d764:	d304      	bcc.n	800d770 <sinf+0x30>
 800d766:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d76a:	b003      	add	sp, #12
 800d76c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d770:	4668      	mov	r0, sp
 800d772:	f000 fc55 	bl	800e020 <__ieee754_rem_pio2f>
 800d776:	f000 0003 	and.w	r0, r0, #3
 800d77a:	2801      	cmp	r0, #1
 800d77c:	d00a      	beq.n	800d794 <sinf+0x54>
 800d77e:	2802      	cmp	r0, #2
 800d780:	d00f      	beq.n	800d7a2 <sinf+0x62>
 800d782:	b9c0      	cbnz	r0, 800d7b6 <sinf+0x76>
 800d784:	eddd 0a01 	vldr	s1, [sp, #4]
 800d788:	ed9d 0a00 	vldr	s0, [sp]
 800d78c:	2001      	movs	r0, #1
 800d78e:	f000 fbff 	bl	800df90 <__kernel_sinf>
 800d792:	e7ea      	b.n	800d76a <sinf+0x2a>
 800d794:	eddd 0a01 	vldr	s1, [sp, #4]
 800d798:	ed9d 0a00 	vldr	s0, [sp]
 800d79c:	f000 fba0 	bl	800dee0 <__kernel_cosf>
 800d7a0:	e7e3      	b.n	800d76a <sinf+0x2a>
 800d7a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7a6:	ed9d 0a00 	vldr	s0, [sp]
 800d7aa:	2001      	movs	r0, #1
 800d7ac:	f000 fbf0 	bl	800df90 <__kernel_sinf>
 800d7b0:	eeb1 0a40 	vneg.f32	s0, s0
 800d7b4:	e7d9      	b.n	800d76a <sinf+0x2a>
 800d7b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d7ba:	ed9d 0a00 	vldr	s0, [sp]
 800d7be:	f000 fb8f 	bl	800dee0 <__kernel_cosf>
 800d7c2:	e7f5      	b.n	800d7b0 <sinf+0x70>
 800d7c4:	3f490fd8 	.word	0x3f490fd8
	...

0800d7d0 <__kernel_cos>:
 800d7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d4:	ec57 6b10 	vmov	r6, r7, d0
 800d7d8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d7dc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d7e0:	ed8d 1b00 	vstr	d1, [sp]
 800d7e4:	d206      	bcs.n	800d7f4 <__kernel_cos+0x24>
 800d7e6:	4630      	mov	r0, r6
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	f7f3 f9d5 	bl	8000b98 <__aeabi_d2iz>
 800d7ee:	2800      	cmp	r0, #0
 800d7f0:	f000 8088 	beq.w	800d904 <__kernel_cos+0x134>
 800d7f4:	4632      	mov	r2, r6
 800d7f6:	463b      	mov	r3, r7
 800d7f8:	4630      	mov	r0, r6
 800d7fa:	4639      	mov	r1, r7
 800d7fc:	f7f2 ff1c 	bl	8000638 <__aeabi_dmul>
 800d800:	4b51      	ldr	r3, [pc, #324]	@ (800d948 <__kernel_cos+0x178>)
 800d802:	2200      	movs	r2, #0
 800d804:	4604      	mov	r4, r0
 800d806:	460d      	mov	r5, r1
 800d808:	f7f2 ff16 	bl	8000638 <__aeabi_dmul>
 800d80c:	a340      	add	r3, pc, #256	@ (adr r3, 800d910 <__kernel_cos+0x140>)
 800d80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d812:	4682      	mov	sl, r0
 800d814:	468b      	mov	fp, r1
 800d816:	4620      	mov	r0, r4
 800d818:	4629      	mov	r1, r5
 800d81a:	f7f2 ff0d 	bl	8000638 <__aeabi_dmul>
 800d81e:	a33e      	add	r3, pc, #248	@ (adr r3, 800d918 <__kernel_cos+0x148>)
 800d820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d824:	f7f2 fd52 	bl	80002cc <__adddf3>
 800d828:	4622      	mov	r2, r4
 800d82a:	462b      	mov	r3, r5
 800d82c:	f7f2 ff04 	bl	8000638 <__aeabi_dmul>
 800d830:	a33b      	add	r3, pc, #236	@ (adr r3, 800d920 <__kernel_cos+0x150>)
 800d832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d836:	f7f2 fd47 	bl	80002c8 <__aeabi_dsub>
 800d83a:	4622      	mov	r2, r4
 800d83c:	462b      	mov	r3, r5
 800d83e:	f7f2 fefb 	bl	8000638 <__aeabi_dmul>
 800d842:	a339      	add	r3, pc, #228	@ (adr r3, 800d928 <__kernel_cos+0x158>)
 800d844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d848:	f7f2 fd40 	bl	80002cc <__adddf3>
 800d84c:	4622      	mov	r2, r4
 800d84e:	462b      	mov	r3, r5
 800d850:	f7f2 fef2 	bl	8000638 <__aeabi_dmul>
 800d854:	a336      	add	r3, pc, #216	@ (adr r3, 800d930 <__kernel_cos+0x160>)
 800d856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85a:	f7f2 fd35 	bl	80002c8 <__aeabi_dsub>
 800d85e:	4622      	mov	r2, r4
 800d860:	462b      	mov	r3, r5
 800d862:	f7f2 fee9 	bl	8000638 <__aeabi_dmul>
 800d866:	a334      	add	r3, pc, #208	@ (adr r3, 800d938 <__kernel_cos+0x168>)
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f7f2 fd2e 	bl	80002cc <__adddf3>
 800d870:	4622      	mov	r2, r4
 800d872:	462b      	mov	r3, r5
 800d874:	f7f2 fee0 	bl	8000638 <__aeabi_dmul>
 800d878:	4622      	mov	r2, r4
 800d87a:	462b      	mov	r3, r5
 800d87c:	f7f2 fedc 	bl	8000638 <__aeabi_dmul>
 800d880:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d884:	4604      	mov	r4, r0
 800d886:	460d      	mov	r5, r1
 800d888:	4630      	mov	r0, r6
 800d88a:	4639      	mov	r1, r7
 800d88c:	f7f2 fed4 	bl	8000638 <__aeabi_dmul>
 800d890:	460b      	mov	r3, r1
 800d892:	4602      	mov	r2, r0
 800d894:	4629      	mov	r1, r5
 800d896:	4620      	mov	r0, r4
 800d898:	f7f2 fd16 	bl	80002c8 <__aeabi_dsub>
 800d89c:	4b2b      	ldr	r3, [pc, #172]	@ (800d94c <__kernel_cos+0x17c>)
 800d89e:	4598      	cmp	r8, r3
 800d8a0:	4606      	mov	r6, r0
 800d8a2:	460f      	mov	r7, r1
 800d8a4:	d810      	bhi.n	800d8c8 <__kernel_cos+0xf8>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	4650      	mov	r0, sl
 800d8ac:	4659      	mov	r1, fp
 800d8ae:	f7f2 fd0b 	bl	80002c8 <__aeabi_dsub>
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4926      	ldr	r1, [pc, #152]	@ (800d950 <__kernel_cos+0x180>)
 800d8b6:	4602      	mov	r2, r0
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	f7f2 fd05 	bl	80002c8 <__aeabi_dsub>
 800d8be:	ec41 0b10 	vmov	d0, r0, r1
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8c8:	4b22      	ldr	r3, [pc, #136]	@ (800d954 <__kernel_cos+0x184>)
 800d8ca:	4921      	ldr	r1, [pc, #132]	@ (800d950 <__kernel_cos+0x180>)
 800d8cc:	4598      	cmp	r8, r3
 800d8ce:	bf8c      	ite	hi
 800d8d0:	4d21      	ldrhi	r5, [pc, #132]	@ (800d958 <__kernel_cos+0x188>)
 800d8d2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d8d6:	2400      	movs	r4, #0
 800d8d8:	4622      	mov	r2, r4
 800d8da:	462b      	mov	r3, r5
 800d8dc:	2000      	movs	r0, #0
 800d8de:	f7f2 fcf3 	bl	80002c8 <__aeabi_dsub>
 800d8e2:	4622      	mov	r2, r4
 800d8e4:	4680      	mov	r8, r0
 800d8e6:	4689      	mov	r9, r1
 800d8e8:	462b      	mov	r3, r5
 800d8ea:	4650      	mov	r0, sl
 800d8ec:	4659      	mov	r1, fp
 800d8ee:	f7f2 fceb 	bl	80002c8 <__aeabi_dsub>
 800d8f2:	4632      	mov	r2, r6
 800d8f4:	463b      	mov	r3, r7
 800d8f6:	f7f2 fce7 	bl	80002c8 <__aeabi_dsub>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	460b      	mov	r3, r1
 800d8fe:	4640      	mov	r0, r8
 800d900:	4649      	mov	r1, r9
 800d902:	e7da      	b.n	800d8ba <__kernel_cos+0xea>
 800d904:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d940 <__kernel_cos+0x170>
 800d908:	e7db      	b.n	800d8c2 <__kernel_cos+0xf2>
 800d90a:	bf00      	nop
 800d90c:	f3af 8000 	nop.w
 800d910:	be8838d4 	.word	0xbe8838d4
 800d914:	bda8fae9 	.word	0xbda8fae9
 800d918:	bdb4b1c4 	.word	0xbdb4b1c4
 800d91c:	3e21ee9e 	.word	0x3e21ee9e
 800d920:	809c52ad 	.word	0x809c52ad
 800d924:	3e927e4f 	.word	0x3e927e4f
 800d928:	19cb1590 	.word	0x19cb1590
 800d92c:	3efa01a0 	.word	0x3efa01a0
 800d930:	16c15177 	.word	0x16c15177
 800d934:	3f56c16c 	.word	0x3f56c16c
 800d938:	5555554c 	.word	0x5555554c
 800d93c:	3fa55555 	.word	0x3fa55555
 800d940:	00000000 	.word	0x00000000
 800d944:	3ff00000 	.word	0x3ff00000
 800d948:	3fe00000 	.word	0x3fe00000
 800d94c:	3fd33332 	.word	0x3fd33332
 800d950:	3ff00000 	.word	0x3ff00000
 800d954:	3fe90000 	.word	0x3fe90000
 800d958:	3fd20000 	.word	0x3fd20000
 800d95c:	00000000 	.word	0x00000000

0800d960 <__kernel_sin>:
 800d960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d964:	ec55 4b10 	vmov	r4, r5, d0
 800d968:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d96c:	b085      	sub	sp, #20
 800d96e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d972:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d976:	4680      	mov	r8, r0
 800d978:	d205      	bcs.n	800d986 <__kernel_sin+0x26>
 800d97a:	4620      	mov	r0, r4
 800d97c:	4629      	mov	r1, r5
 800d97e:	f7f3 f90b 	bl	8000b98 <__aeabi_d2iz>
 800d982:	2800      	cmp	r0, #0
 800d984:	d052      	beq.n	800da2c <__kernel_sin+0xcc>
 800d986:	4622      	mov	r2, r4
 800d988:	462b      	mov	r3, r5
 800d98a:	4620      	mov	r0, r4
 800d98c:	4629      	mov	r1, r5
 800d98e:	f7f2 fe53 	bl	8000638 <__aeabi_dmul>
 800d992:	4682      	mov	sl, r0
 800d994:	468b      	mov	fp, r1
 800d996:	4602      	mov	r2, r0
 800d998:	460b      	mov	r3, r1
 800d99a:	4620      	mov	r0, r4
 800d99c:	4629      	mov	r1, r5
 800d99e:	f7f2 fe4b 	bl	8000638 <__aeabi_dmul>
 800d9a2:	a342      	add	r3, pc, #264	@ (adr r3, 800daac <__kernel_sin+0x14c>)
 800d9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d9ac:	4650      	mov	r0, sl
 800d9ae:	4659      	mov	r1, fp
 800d9b0:	f7f2 fe42 	bl	8000638 <__aeabi_dmul>
 800d9b4:	a33f      	add	r3, pc, #252	@ (adr r3, 800dab4 <__kernel_sin+0x154>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fc85 	bl	80002c8 <__aeabi_dsub>
 800d9be:	4652      	mov	r2, sl
 800d9c0:	465b      	mov	r3, fp
 800d9c2:	f7f2 fe39 	bl	8000638 <__aeabi_dmul>
 800d9c6:	a33d      	add	r3, pc, #244	@ (adr r3, 800dabc <__kernel_sin+0x15c>)
 800d9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9cc:	f7f2 fc7e 	bl	80002cc <__adddf3>
 800d9d0:	4652      	mov	r2, sl
 800d9d2:	465b      	mov	r3, fp
 800d9d4:	f7f2 fe30 	bl	8000638 <__aeabi_dmul>
 800d9d8:	a33a      	add	r3, pc, #232	@ (adr r3, 800dac4 <__kernel_sin+0x164>)
 800d9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9de:	f7f2 fc73 	bl	80002c8 <__aeabi_dsub>
 800d9e2:	4652      	mov	r2, sl
 800d9e4:	465b      	mov	r3, fp
 800d9e6:	f7f2 fe27 	bl	8000638 <__aeabi_dmul>
 800d9ea:	a338      	add	r3, pc, #224	@ (adr r3, 800dacc <__kernel_sin+0x16c>)
 800d9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f0:	f7f2 fc6c 	bl	80002cc <__adddf3>
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	460f      	mov	r7, r1
 800d9f8:	f1b8 0f00 	cmp.w	r8, #0
 800d9fc:	d11b      	bne.n	800da36 <__kernel_sin+0xd6>
 800d9fe:	4602      	mov	r2, r0
 800da00:	460b      	mov	r3, r1
 800da02:	4650      	mov	r0, sl
 800da04:	4659      	mov	r1, fp
 800da06:	f7f2 fe17 	bl	8000638 <__aeabi_dmul>
 800da0a:	a325      	add	r3, pc, #148	@ (adr r3, 800daa0 <__kernel_sin+0x140>)
 800da0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da10:	f7f2 fc5a 	bl	80002c8 <__aeabi_dsub>
 800da14:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da18:	f7f2 fe0e 	bl	8000638 <__aeabi_dmul>
 800da1c:	4602      	mov	r2, r0
 800da1e:	460b      	mov	r3, r1
 800da20:	4620      	mov	r0, r4
 800da22:	4629      	mov	r1, r5
 800da24:	f7f2 fc52 	bl	80002cc <__adddf3>
 800da28:	4604      	mov	r4, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	ec45 4b10 	vmov	d0, r4, r5
 800da30:	b005      	add	sp, #20
 800da32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da3a:	4b1b      	ldr	r3, [pc, #108]	@ (800daa8 <__kernel_sin+0x148>)
 800da3c:	2200      	movs	r2, #0
 800da3e:	f7f2 fdfb 	bl	8000638 <__aeabi_dmul>
 800da42:	4632      	mov	r2, r6
 800da44:	4680      	mov	r8, r0
 800da46:	4689      	mov	r9, r1
 800da48:	463b      	mov	r3, r7
 800da4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da4e:	f7f2 fdf3 	bl	8000638 <__aeabi_dmul>
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f2 fc35 	bl	80002c8 <__aeabi_dsub>
 800da5e:	4652      	mov	r2, sl
 800da60:	465b      	mov	r3, fp
 800da62:	f7f2 fde9 	bl	8000638 <__aeabi_dmul>
 800da66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da6a:	f7f2 fc2d 	bl	80002c8 <__aeabi_dsub>
 800da6e:	a30c      	add	r3, pc, #48	@ (adr r3, 800daa0 <__kernel_sin+0x140>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	4606      	mov	r6, r0
 800da76:	460f      	mov	r7, r1
 800da78:	e9dd 0100 	ldrd	r0, r1, [sp]
 800da7c:	f7f2 fddc 	bl	8000638 <__aeabi_dmul>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4630      	mov	r0, r6
 800da86:	4639      	mov	r1, r7
 800da88:	f7f2 fc20 	bl	80002cc <__adddf3>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4620      	mov	r0, r4
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fc18 	bl	80002c8 <__aeabi_dsub>
 800da98:	e7c6      	b.n	800da28 <__kernel_sin+0xc8>
 800da9a:	bf00      	nop
 800da9c:	f3af 8000 	nop.w
 800daa0:	55555549 	.word	0x55555549
 800daa4:	3fc55555 	.word	0x3fc55555
 800daa8:	3fe00000 	.word	0x3fe00000
 800daac:	5acfd57c 	.word	0x5acfd57c
 800dab0:	3de5d93a 	.word	0x3de5d93a
 800dab4:	8a2b9ceb 	.word	0x8a2b9ceb
 800dab8:	3e5ae5e6 	.word	0x3e5ae5e6
 800dabc:	57b1fe7d 	.word	0x57b1fe7d
 800dac0:	3ec71de3 	.word	0x3ec71de3
 800dac4:	19c161d5 	.word	0x19c161d5
 800dac8:	3f2a01a0 	.word	0x3f2a01a0
 800dacc:	1110f8a6 	.word	0x1110f8a6
 800dad0:	3f811111 	.word	0x3f811111
 800dad4:	00000000 	.word	0x00000000

0800dad8 <__ieee754_rem_pio2>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	ec57 6b10 	vmov	r6, r7, d0
 800dae0:	4bc5      	ldr	r3, [pc, #788]	@ (800ddf8 <__ieee754_rem_pio2+0x320>)
 800dae2:	b08d      	sub	sp, #52	@ 0x34
 800dae4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800dae8:	4598      	cmp	r8, r3
 800daea:	4604      	mov	r4, r0
 800daec:	9704      	str	r7, [sp, #16]
 800daee:	d807      	bhi.n	800db00 <__ieee754_rem_pio2+0x28>
 800daf0:	2200      	movs	r2, #0
 800daf2:	2300      	movs	r3, #0
 800daf4:	ed80 0b00 	vstr	d0, [r0]
 800daf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dafc:	2500      	movs	r5, #0
 800dafe:	e028      	b.n	800db52 <__ieee754_rem_pio2+0x7a>
 800db00:	4bbe      	ldr	r3, [pc, #760]	@ (800ddfc <__ieee754_rem_pio2+0x324>)
 800db02:	4598      	cmp	r8, r3
 800db04:	d878      	bhi.n	800dbf8 <__ieee754_rem_pio2+0x120>
 800db06:	9b04      	ldr	r3, [sp, #16]
 800db08:	4dbd      	ldr	r5, [pc, #756]	@ (800de00 <__ieee754_rem_pio2+0x328>)
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	4630      	mov	r0, r6
 800db0e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800ddc0 <__ieee754_rem_pio2+0x2e8>)
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	4639      	mov	r1, r7
 800db16:	dd38      	ble.n	800db8a <__ieee754_rem_pio2+0xb2>
 800db18:	f7f2 fbd6 	bl	80002c8 <__aeabi_dsub>
 800db1c:	45a8      	cmp	r8, r5
 800db1e:	4606      	mov	r6, r0
 800db20:	460f      	mov	r7, r1
 800db22:	d01a      	beq.n	800db5a <__ieee754_rem_pio2+0x82>
 800db24:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2f0>)
 800db26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2a:	f7f2 fbcd 	bl	80002c8 <__aeabi_dsub>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	4680      	mov	r8, r0
 800db34:	4689      	mov	r9, r1
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	f7f2 fbc5 	bl	80002c8 <__aeabi_dsub>
 800db3e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2f0>)
 800db40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db44:	f7f2 fbc0 	bl	80002c8 <__aeabi_dsub>
 800db48:	e9c4 8900 	strd	r8, r9, [r4]
 800db4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800db50:	2501      	movs	r5, #1
 800db52:	4628      	mov	r0, r5
 800db54:	b00d      	add	sp, #52	@ 0x34
 800db56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db5a:	a39d      	add	r3, pc, #628	@ (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f8>)
 800db5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db60:	f7f2 fbb2 	bl	80002c8 <__aeabi_dsub>
 800db64:	a39c      	add	r3, pc, #624	@ (adr r3, 800ddd8 <__ieee754_rem_pio2+0x300>)
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	4606      	mov	r6, r0
 800db6c:	460f      	mov	r7, r1
 800db6e:	f7f2 fbab 	bl	80002c8 <__aeabi_dsub>
 800db72:	4602      	mov	r2, r0
 800db74:	460b      	mov	r3, r1
 800db76:	4680      	mov	r8, r0
 800db78:	4689      	mov	r9, r1
 800db7a:	4630      	mov	r0, r6
 800db7c:	4639      	mov	r1, r7
 800db7e:	f7f2 fba3 	bl	80002c8 <__aeabi_dsub>
 800db82:	a395      	add	r3, pc, #596	@ (adr r3, 800ddd8 <__ieee754_rem_pio2+0x300>)
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	e7dc      	b.n	800db44 <__ieee754_rem_pio2+0x6c>
 800db8a:	f7f2 fb9f 	bl	80002cc <__adddf3>
 800db8e:	45a8      	cmp	r8, r5
 800db90:	4606      	mov	r6, r0
 800db92:	460f      	mov	r7, r1
 800db94:	d018      	beq.n	800dbc8 <__ieee754_rem_pio2+0xf0>
 800db96:	a38c      	add	r3, pc, #560	@ (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2f0>)
 800db98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9c:	f7f2 fb96 	bl	80002cc <__adddf3>
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	4680      	mov	r8, r0
 800dba6:	4689      	mov	r9, r1
 800dba8:	4630      	mov	r0, r6
 800dbaa:	4639      	mov	r1, r7
 800dbac:	f7f2 fb8c 	bl	80002c8 <__aeabi_dsub>
 800dbb0:	a385      	add	r3, pc, #532	@ (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2f0>)
 800dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb6:	f7f2 fb89 	bl	80002cc <__adddf3>
 800dbba:	f04f 35ff 	mov.w	r5, #4294967295
 800dbbe:	e9c4 8900 	strd	r8, r9, [r4]
 800dbc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbc6:	e7c4      	b.n	800db52 <__ieee754_rem_pio2+0x7a>
 800dbc8:	a381      	add	r3, pc, #516	@ (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f8>)
 800dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbce:	f7f2 fb7d 	bl	80002cc <__adddf3>
 800dbd2:	a381      	add	r3, pc, #516	@ (adr r3, 800ddd8 <__ieee754_rem_pio2+0x300>)
 800dbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd8:	4606      	mov	r6, r0
 800dbda:	460f      	mov	r7, r1
 800dbdc:	f7f2 fb76 	bl	80002cc <__adddf3>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4680      	mov	r8, r0
 800dbe6:	4689      	mov	r9, r1
 800dbe8:	4630      	mov	r0, r6
 800dbea:	4639      	mov	r1, r7
 800dbec:	f7f2 fb6c 	bl	80002c8 <__aeabi_dsub>
 800dbf0:	a379      	add	r3, pc, #484	@ (adr r3, 800ddd8 <__ieee754_rem_pio2+0x300>)
 800dbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf6:	e7de      	b.n	800dbb6 <__ieee754_rem_pio2+0xde>
 800dbf8:	4b82      	ldr	r3, [pc, #520]	@ (800de04 <__ieee754_rem_pio2+0x32c>)
 800dbfa:	4598      	cmp	r8, r3
 800dbfc:	f200 80d1 	bhi.w	800dda2 <__ieee754_rem_pio2+0x2ca>
 800dc00:	f000 f966 	bl	800ded0 <fabs>
 800dc04:	ec57 6b10 	vmov	r6, r7, d0
 800dc08:	a375      	add	r3, pc, #468	@ (adr r3, 800dde0 <__ieee754_rem_pio2+0x308>)
 800dc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc0e:	4630      	mov	r0, r6
 800dc10:	4639      	mov	r1, r7
 800dc12:	f7f2 fd11 	bl	8000638 <__aeabi_dmul>
 800dc16:	4b7c      	ldr	r3, [pc, #496]	@ (800de08 <__ieee754_rem_pio2+0x330>)
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f7f2 fb57 	bl	80002cc <__adddf3>
 800dc1e:	f7f2 ffbb 	bl	8000b98 <__aeabi_d2iz>
 800dc22:	4605      	mov	r5, r0
 800dc24:	f7f2 fc9e 	bl	8000564 <__aeabi_i2d>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc30:	a363      	add	r3, pc, #396	@ (adr r3, 800ddc0 <__ieee754_rem_pio2+0x2e8>)
 800dc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc36:	f7f2 fcff 	bl	8000638 <__aeabi_dmul>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 fb41 	bl	80002c8 <__aeabi_dsub>
 800dc46:	a360      	add	r3, pc, #384	@ (adr r3, 800ddc8 <__ieee754_rem_pio2+0x2f0>)
 800dc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4c:	4682      	mov	sl, r0
 800dc4e:	468b      	mov	fp, r1
 800dc50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc54:	f7f2 fcf0 	bl	8000638 <__aeabi_dmul>
 800dc58:	2d1f      	cmp	r5, #31
 800dc5a:	4606      	mov	r6, r0
 800dc5c:	460f      	mov	r7, r1
 800dc5e:	dc0c      	bgt.n	800dc7a <__ieee754_rem_pio2+0x1a2>
 800dc60:	4b6a      	ldr	r3, [pc, #424]	@ (800de0c <__ieee754_rem_pio2+0x334>)
 800dc62:	1e6a      	subs	r2, r5, #1
 800dc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc68:	4543      	cmp	r3, r8
 800dc6a:	d006      	beq.n	800dc7a <__ieee754_rem_pio2+0x1a2>
 800dc6c:	4632      	mov	r2, r6
 800dc6e:	463b      	mov	r3, r7
 800dc70:	4650      	mov	r0, sl
 800dc72:	4659      	mov	r1, fp
 800dc74:	f7f2 fb28 	bl	80002c8 <__aeabi_dsub>
 800dc78:	e00e      	b.n	800dc98 <__ieee754_rem_pio2+0x1c0>
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	4632      	mov	r2, r6
 800dc7e:	4650      	mov	r0, sl
 800dc80:	4659      	mov	r1, fp
 800dc82:	f7f2 fb21 	bl	80002c8 <__aeabi_dsub>
 800dc86:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dc8a:	9305      	str	r3, [sp, #20]
 800dc8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dc90:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dc94:	2b10      	cmp	r3, #16
 800dc96:	dc02      	bgt.n	800dc9e <__ieee754_rem_pio2+0x1c6>
 800dc98:	e9c4 0100 	strd	r0, r1, [r4]
 800dc9c:	e039      	b.n	800dd12 <__ieee754_rem_pio2+0x23a>
 800dc9e:	a34c      	add	r3, pc, #304	@ (adr r3, 800ddd0 <__ieee754_rem_pio2+0x2f8>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dca8:	f7f2 fcc6 	bl	8000638 <__aeabi_dmul>
 800dcac:	4606      	mov	r6, r0
 800dcae:	460f      	mov	r7, r1
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4650      	mov	r0, sl
 800dcb6:	4659      	mov	r1, fp
 800dcb8:	f7f2 fb06 	bl	80002c8 <__aeabi_dsub>
 800dcbc:	4602      	mov	r2, r0
 800dcbe:	460b      	mov	r3, r1
 800dcc0:	4680      	mov	r8, r0
 800dcc2:	4689      	mov	r9, r1
 800dcc4:	4650      	mov	r0, sl
 800dcc6:	4659      	mov	r1, fp
 800dcc8:	f7f2 fafe 	bl	80002c8 <__aeabi_dsub>
 800dccc:	4632      	mov	r2, r6
 800dcce:	463b      	mov	r3, r7
 800dcd0:	f7f2 fafa 	bl	80002c8 <__aeabi_dsub>
 800dcd4:	a340      	add	r3, pc, #256	@ (adr r3, 800ddd8 <__ieee754_rem_pio2+0x300>)
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	4606      	mov	r6, r0
 800dcdc:	460f      	mov	r7, r1
 800dcde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce2:	f7f2 fca9 	bl	8000638 <__aeabi_dmul>
 800dce6:	4632      	mov	r2, r6
 800dce8:	463b      	mov	r3, r7
 800dcea:	f7f2 faed 	bl	80002c8 <__aeabi_dsub>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	4649      	mov	r1, r9
 800dcfa:	f7f2 fae5 	bl	80002c8 <__aeabi_dsub>
 800dcfe:	9a05      	ldr	r2, [sp, #20]
 800dd00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd04:	1ad3      	subs	r3, r2, r3
 800dd06:	2b31      	cmp	r3, #49	@ 0x31
 800dd08:	dc20      	bgt.n	800dd4c <__ieee754_rem_pio2+0x274>
 800dd0a:	e9c4 0100 	strd	r0, r1, [r4]
 800dd0e:	46c2      	mov	sl, r8
 800dd10:	46cb      	mov	fp, r9
 800dd12:	e9d4 8900 	ldrd	r8, r9, [r4]
 800dd16:	4650      	mov	r0, sl
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	4659      	mov	r1, fp
 800dd1e:	f7f2 fad3 	bl	80002c8 <__aeabi_dsub>
 800dd22:	463b      	mov	r3, r7
 800dd24:	4632      	mov	r2, r6
 800dd26:	f7f2 facf 	bl	80002c8 <__aeabi_dsub>
 800dd2a:	9b04      	ldr	r3, [sp, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dd32:	f6bf af0e 	bge.w	800db52 <__ieee754_rem_pio2+0x7a>
 800dd36:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dd3a:	6063      	str	r3, [r4, #4]
 800dd3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dd40:	f8c4 8000 	str.w	r8, [r4]
 800dd44:	60a0      	str	r0, [r4, #8]
 800dd46:	60e3      	str	r3, [r4, #12]
 800dd48:	426d      	negs	r5, r5
 800dd4a:	e702      	b.n	800db52 <__ieee754_rem_pio2+0x7a>
 800dd4c:	a326      	add	r3, pc, #152	@ (adr r3, 800dde8 <__ieee754_rem_pio2+0x310>)
 800dd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd56:	f7f2 fc6f 	bl	8000638 <__aeabi_dmul>
 800dd5a:	4606      	mov	r6, r0
 800dd5c:	460f      	mov	r7, r1
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4640      	mov	r0, r8
 800dd64:	4649      	mov	r1, r9
 800dd66:	f7f2 faaf 	bl	80002c8 <__aeabi_dsub>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4682      	mov	sl, r0
 800dd70:	468b      	mov	fp, r1
 800dd72:	4640      	mov	r0, r8
 800dd74:	4649      	mov	r1, r9
 800dd76:	f7f2 faa7 	bl	80002c8 <__aeabi_dsub>
 800dd7a:	4632      	mov	r2, r6
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	f7f2 faa3 	bl	80002c8 <__aeabi_dsub>
 800dd82:	a31b      	add	r3, pc, #108	@ (adr r3, 800ddf0 <__ieee754_rem_pio2+0x318>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	4606      	mov	r6, r0
 800dd8a:	460f      	mov	r7, r1
 800dd8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd90:	f7f2 fc52 	bl	8000638 <__aeabi_dmul>
 800dd94:	4632      	mov	r2, r6
 800dd96:	463b      	mov	r3, r7
 800dd98:	f7f2 fa96 	bl	80002c8 <__aeabi_dsub>
 800dd9c:	4606      	mov	r6, r0
 800dd9e:	460f      	mov	r7, r1
 800dda0:	e764      	b.n	800dc6c <__ieee754_rem_pio2+0x194>
 800dda2:	4b1b      	ldr	r3, [pc, #108]	@ (800de10 <__ieee754_rem_pio2+0x338>)
 800dda4:	4598      	cmp	r8, r3
 800dda6:	d935      	bls.n	800de14 <__ieee754_rem_pio2+0x33c>
 800dda8:	4632      	mov	r2, r6
 800ddaa:	463b      	mov	r3, r7
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	f7f2 fa8a 	bl	80002c8 <__aeabi_dsub>
 800ddb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddb8:	e9c4 0100 	strd	r0, r1, [r4]
 800ddbc:	e69e      	b.n	800dafc <__ieee754_rem_pio2+0x24>
 800ddbe:	bf00      	nop
 800ddc0:	54400000 	.word	0x54400000
 800ddc4:	3ff921fb 	.word	0x3ff921fb
 800ddc8:	1a626331 	.word	0x1a626331
 800ddcc:	3dd0b461 	.word	0x3dd0b461
 800ddd0:	1a600000 	.word	0x1a600000
 800ddd4:	3dd0b461 	.word	0x3dd0b461
 800ddd8:	2e037073 	.word	0x2e037073
 800dddc:	3ba3198a 	.word	0x3ba3198a
 800dde0:	6dc9c883 	.word	0x6dc9c883
 800dde4:	3fe45f30 	.word	0x3fe45f30
 800dde8:	2e000000 	.word	0x2e000000
 800ddec:	3ba3198a 	.word	0x3ba3198a
 800ddf0:	252049c1 	.word	0x252049c1
 800ddf4:	397b839a 	.word	0x397b839a
 800ddf8:	3fe921fb 	.word	0x3fe921fb
 800ddfc:	4002d97b 	.word	0x4002d97b
 800de00:	3ff921fb 	.word	0x3ff921fb
 800de04:	413921fb 	.word	0x413921fb
 800de08:	3fe00000 	.word	0x3fe00000
 800de0c:	08011050 	.word	0x08011050
 800de10:	7fefffff 	.word	0x7fefffff
 800de14:	ea4f 5528 	mov.w	r5, r8, asr #20
 800de18:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800de1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800de20:	4630      	mov	r0, r6
 800de22:	460f      	mov	r7, r1
 800de24:	f7f2 feb8 	bl	8000b98 <__aeabi_d2iz>
 800de28:	f7f2 fb9c 	bl	8000564 <__aeabi_i2d>
 800de2c:	4602      	mov	r2, r0
 800de2e:	460b      	mov	r3, r1
 800de30:	4630      	mov	r0, r6
 800de32:	4639      	mov	r1, r7
 800de34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800de38:	f7f2 fa46 	bl	80002c8 <__aeabi_dsub>
 800de3c:	4b22      	ldr	r3, [pc, #136]	@ (800dec8 <__ieee754_rem_pio2+0x3f0>)
 800de3e:	2200      	movs	r2, #0
 800de40:	f7f2 fbfa 	bl	8000638 <__aeabi_dmul>
 800de44:	460f      	mov	r7, r1
 800de46:	4606      	mov	r6, r0
 800de48:	f7f2 fea6 	bl	8000b98 <__aeabi_d2iz>
 800de4c:	f7f2 fb8a 	bl	8000564 <__aeabi_i2d>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de5c:	f7f2 fa34 	bl	80002c8 <__aeabi_dsub>
 800de60:	4b19      	ldr	r3, [pc, #100]	@ (800dec8 <__ieee754_rem_pio2+0x3f0>)
 800de62:	2200      	movs	r2, #0
 800de64:	f7f2 fbe8 	bl	8000638 <__aeabi_dmul>
 800de68:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800de6c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800de70:	f04f 0803 	mov.w	r8, #3
 800de74:	2600      	movs	r6, #0
 800de76:	2700      	movs	r7, #0
 800de78:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800de7c:	4632      	mov	r2, r6
 800de7e:	463b      	mov	r3, r7
 800de80:	46c2      	mov	sl, r8
 800de82:	f108 38ff 	add.w	r8, r8, #4294967295
 800de86:	f7f2 fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d1f4      	bne.n	800de78 <__ieee754_rem_pio2+0x3a0>
 800de8e:	4b0f      	ldr	r3, [pc, #60]	@ (800decc <__ieee754_rem_pio2+0x3f4>)
 800de90:	9301      	str	r3, [sp, #4]
 800de92:	2302      	movs	r3, #2
 800de94:	9300      	str	r3, [sp, #0]
 800de96:	462a      	mov	r2, r5
 800de98:	4653      	mov	r3, sl
 800de9a:	4621      	mov	r1, r4
 800de9c:	a806      	add	r0, sp, #24
 800de9e:	f000 f9f7 	bl	800e290 <__kernel_rem_pio2>
 800dea2:	9b04      	ldr	r3, [sp, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	4605      	mov	r5, r0
 800dea8:	f6bf ae53 	bge.w	800db52 <__ieee754_rem_pio2+0x7a>
 800deac:	e9d4 2100 	ldrd	r2, r1, [r4]
 800deb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800deb4:	e9c4 2300 	strd	r2, r3, [r4]
 800deb8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800debc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dec0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800dec4:	e740      	b.n	800dd48 <__ieee754_rem_pio2+0x270>
 800dec6:	bf00      	nop
 800dec8:	41700000 	.word	0x41700000
 800decc:	080110d0 	.word	0x080110d0

0800ded0 <fabs>:
 800ded0:	ec51 0b10 	vmov	r0, r1, d0
 800ded4:	4602      	mov	r2, r0
 800ded6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800deda:	ec43 2b10 	vmov	d0, r2, r3
 800dede:	4770      	bx	lr

0800dee0 <__kernel_cosf>:
 800dee0:	ee10 3a10 	vmov	r3, s0
 800dee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dee8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800deec:	eef0 6a40 	vmov.f32	s13, s0
 800def0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800def4:	d204      	bcs.n	800df00 <__kernel_cosf+0x20>
 800def6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800defa:	ee17 2a90 	vmov	r2, s15
 800defe:	b342      	cbz	r2, 800df52 <__kernel_cosf+0x72>
 800df00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800df04:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800df70 <__kernel_cosf+0x90>
 800df08:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800df74 <__kernel_cosf+0x94>
 800df0c:	4a1a      	ldr	r2, [pc, #104]	@ (800df78 <__kernel_cosf+0x98>)
 800df0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800df12:	4293      	cmp	r3, r2
 800df14:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800df7c <__kernel_cosf+0x9c>
 800df18:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df1c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800df80 <__kernel_cosf+0xa0>
 800df20:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df24:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800df84 <__kernel_cosf+0xa4>
 800df28:	eee6 7a07 	vfma.f32	s15, s12, s14
 800df2c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800df88 <__kernel_cosf+0xa8>
 800df30:	eea7 6a87 	vfma.f32	s12, s15, s14
 800df34:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800df38:	ee26 6a07 	vmul.f32	s12, s12, s14
 800df3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800df40:	eee7 0a06 	vfma.f32	s1, s14, s12
 800df44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df48:	d804      	bhi.n	800df54 <__kernel_cosf+0x74>
 800df4a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800df4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df52:	4770      	bx	lr
 800df54:	4a0d      	ldr	r2, [pc, #52]	@ (800df8c <__kernel_cosf+0xac>)
 800df56:	4293      	cmp	r3, r2
 800df58:	bf9a      	itte	ls
 800df5a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800df5e:	ee07 3a10 	vmovls	s14, r3
 800df62:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800df66:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df6e:	e7ec      	b.n	800df4a <__kernel_cosf+0x6a>
 800df70:	ad47d74e 	.word	0xad47d74e
 800df74:	310f74f6 	.word	0x310f74f6
 800df78:	3e999999 	.word	0x3e999999
 800df7c:	b493f27c 	.word	0xb493f27c
 800df80:	37d00d01 	.word	0x37d00d01
 800df84:	bab60b61 	.word	0xbab60b61
 800df88:	3d2aaaab 	.word	0x3d2aaaab
 800df8c:	3f480000 	.word	0x3f480000

0800df90 <__kernel_sinf>:
 800df90:	ee10 3a10 	vmov	r3, s0
 800df94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800df98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800df9c:	d204      	bcs.n	800dfa8 <__kernel_sinf+0x18>
 800df9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dfa2:	ee17 3a90 	vmov	r3, s15
 800dfa6:	b35b      	cbz	r3, 800e000 <__kernel_sinf+0x70>
 800dfa8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dfac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e004 <__kernel_sinf+0x74>
 800dfb0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e008 <__kernel_sinf+0x78>
 800dfb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dfb8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e00c <__kernel_sinf+0x7c>
 800dfbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfc0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e010 <__kernel_sinf+0x80>
 800dfc4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dfc8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e014 <__kernel_sinf+0x84>
 800dfcc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dfd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dfd4:	b930      	cbnz	r0, 800dfe4 <__kernel_sinf+0x54>
 800dfd6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e018 <__kernel_sinf+0x88>
 800dfda:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dfde:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dfe2:	4770      	bx	lr
 800dfe4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dfe8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800dfec:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dff0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dff4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e01c <__kernel_sinf+0x8c>
 800dff8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dffc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	2f2ec9d3 	.word	0x2f2ec9d3
 800e008:	b2d72f34 	.word	0xb2d72f34
 800e00c:	3638ef1b 	.word	0x3638ef1b
 800e010:	b9500d01 	.word	0xb9500d01
 800e014:	3c088889 	.word	0x3c088889
 800e018:	be2aaaab 	.word	0xbe2aaaab
 800e01c:	3e2aaaab 	.word	0x3e2aaaab

0800e020 <__ieee754_rem_pio2f>:
 800e020:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e022:	ee10 6a10 	vmov	r6, s0
 800e026:	4b88      	ldr	r3, [pc, #544]	@ (800e248 <__ieee754_rem_pio2f+0x228>)
 800e028:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e02c:	429d      	cmp	r5, r3
 800e02e:	b087      	sub	sp, #28
 800e030:	4604      	mov	r4, r0
 800e032:	d805      	bhi.n	800e040 <__ieee754_rem_pio2f+0x20>
 800e034:	2300      	movs	r3, #0
 800e036:	ed80 0a00 	vstr	s0, [r0]
 800e03a:	6043      	str	r3, [r0, #4]
 800e03c:	2000      	movs	r0, #0
 800e03e:	e022      	b.n	800e086 <__ieee754_rem_pio2f+0x66>
 800e040:	4b82      	ldr	r3, [pc, #520]	@ (800e24c <__ieee754_rem_pio2f+0x22c>)
 800e042:	429d      	cmp	r5, r3
 800e044:	d83a      	bhi.n	800e0bc <__ieee754_rem_pio2f+0x9c>
 800e046:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e04a:	2e00      	cmp	r6, #0
 800e04c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e250 <__ieee754_rem_pio2f+0x230>
 800e050:	4a80      	ldr	r2, [pc, #512]	@ (800e254 <__ieee754_rem_pio2f+0x234>)
 800e052:	f023 030f 	bic.w	r3, r3, #15
 800e056:	dd18      	ble.n	800e08a <__ieee754_rem_pio2f+0x6a>
 800e058:	4293      	cmp	r3, r2
 800e05a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e05e:	bf09      	itett	eq
 800e060:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e258 <__ieee754_rem_pio2f+0x238>
 800e064:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e25c <__ieee754_rem_pio2f+0x23c>
 800e068:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e260 <__ieee754_rem_pio2f+0x240>
 800e06c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e070:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e078:	ed80 7a00 	vstr	s14, [r0]
 800e07c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e080:	edc0 7a01 	vstr	s15, [r0, #4]
 800e084:	2001      	movs	r0, #1
 800e086:	b007      	add	sp, #28
 800e088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e08a:	4293      	cmp	r3, r2
 800e08c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e090:	bf09      	itett	eq
 800e092:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e258 <__ieee754_rem_pio2f+0x238>
 800e096:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e25c <__ieee754_rem_pio2f+0x23c>
 800e09a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e260 <__ieee754_rem_pio2f+0x240>
 800e09e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e0a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e0a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0aa:	ed80 7a00 	vstr	s14, [r0]
 800e0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0b2:	edc0 7a01 	vstr	s15, [r0, #4]
 800e0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e0ba:	e7e4      	b.n	800e086 <__ieee754_rem_pio2f+0x66>
 800e0bc:	4b69      	ldr	r3, [pc, #420]	@ (800e264 <__ieee754_rem_pio2f+0x244>)
 800e0be:	429d      	cmp	r5, r3
 800e0c0:	d873      	bhi.n	800e1aa <__ieee754_rem_pio2f+0x18a>
 800e0c2:	f000 f8dd 	bl	800e280 <fabsf>
 800e0c6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e268 <__ieee754_rem_pio2f+0x248>
 800e0ca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e0ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e0d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e0d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e0da:	ee17 0a90 	vmov	r0, s15
 800e0de:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e250 <__ieee754_rem_pio2f+0x230>
 800e0e2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e0e6:	281f      	cmp	r0, #31
 800e0e8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e25c <__ieee754_rem_pio2f+0x23c>
 800e0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0f0:	eeb1 6a47 	vneg.f32	s12, s14
 800e0f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e0f8:	ee16 1a90 	vmov	r1, s13
 800e0fc:	dc09      	bgt.n	800e112 <__ieee754_rem_pio2f+0xf2>
 800e0fe:	4a5b      	ldr	r2, [pc, #364]	@ (800e26c <__ieee754_rem_pio2f+0x24c>)
 800e100:	1e47      	subs	r7, r0, #1
 800e102:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e106:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e10a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e10e:	4293      	cmp	r3, r2
 800e110:	d107      	bne.n	800e122 <__ieee754_rem_pio2f+0x102>
 800e112:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e116:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e11a:	2a08      	cmp	r2, #8
 800e11c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e120:	dc14      	bgt.n	800e14c <__ieee754_rem_pio2f+0x12c>
 800e122:	6021      	str	r1, [r4, #0]
 800e124:	ed94 7a00 	vldr	s14, [r4]
 800e128:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e12c:	2e00      	cmp	r6, #0
 800e12e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e132:	ed84 0a01 	vstr	s0, [r4, #4]
 800e136:	daa6      	bge.n	800e086 <__ieee754_rem_pio2f+0x66>
 800e138:	eeb1 7a47 	vneg.f32	s14, s14
 800e13c:	eeb1 0a40 	vneg.f32	s0, s0
 800e140:	ed84 7a00 	vstr	s14, [r4]
 800e144:	ed84 0a01 	vstr	s0, [r4, #4]
 800e148:	4240      	negs	r0, r0
 800e14a:	e79c      	b.n	800e086 <__ieee754_rem_pio2f+0x66>
 800e14c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e258 <__ieee754_rem_pio2f+0x238>
 800e150:	eef0 6a40 	vmov.f32	s13, s0
 800e154:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e158:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e15c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e160:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e260 <__ieee754_rem_pio2f+0x240>
 800e164:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e168:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e16c:	ee15 2a90 	vmov	r2, s11
 800e170:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e174:	1a5b      	subs	r3, r3, r1
 800e176:	2b19      	cmp	r3, #25
 800e178:	dc04      	bgt.n	800e184 <__ieee754_rem_pio2f+0x164>
 800e17a:	edc4 5a00 	vstr	s11, [r4]
 800e17e:	eeb0 0a66 	vmov.f32	s0, s13
 800e182:	e7cf      	b.n	800e124 <__ieee754_rem_pio2f+0x104>
 800e184:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e270 <__ieee754_rem_pio2f+0x250>
 800e188:	eeb0 0a66 	vmov.f32	s0, s13
 800e18c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e190:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e194:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e274 <__ieee754_rem_pio2f+0x254>
 800e198:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e19c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e1a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e1a4:	ed84 7a00 	vstr	s14, [r4]
 800e1a8:	e7bc      	b.n	800e124 <__ieee754_rem_pio2f+0x104>
 800e1aa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e1ae:	d306      	bcc.n	800e1be <__ieee754_rem_pio2f+0x19e>
 800e1b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e1b4:	edc0 7a01 	vstr	s15, [r0, #4]
 800e1b8:	edc0 7a00 	vstr	s15, [r0]
 800e1bc:	e73e      	b.n	800e03c <__ieee754_rem_pio2f+0x1c>
 800e1be:	15ea      	asrs	r2, r5, #23
 800e1c0:	3a86      	subs	r2, #134	@ 0x86
 800e1c2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e1c6:	ee07 3a90 	vmov	s15, r3
 800e1ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1ce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e278 <__ieee754_rem_pio2f+0x258>
 800e1d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1da:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e1de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e1e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e1ee:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e1f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e1f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	edcd 7a05 	vstr	s15, [sp, #20]
 800e202:	d11e      	bne.n	800e242 <__ieee754_rem_pio2f+0x222>
 800e204:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e20c:	bf0c      	ite	eq
 800e20e:	2301      	moveq	r3, #1
 800e210:	2302      	movne	r3, #2
 800e212:	491a      	ldr	r1, [pc, #104]	@ (800e27c <__ieee754_rem_pio2f+0x25c>)
 800e214:	9101      	str	r1, [sp, #4]
 800e216:	2102      	movs	r1, #2
 800e218:	9100      	str	r1, [sp, #0]
 800e21a:	a803      	add	r0, sp, #12
 800e21c:	4621      	mov	r1, r4
 800e21e:	f000 fb8f 	bl	800e940 <__kernel_rem_pio2f>
 800e222:	2e00      	cmp	r6, #0
 800e224:	f6bf af2f 	bge.w	800e086 <__ieee754_rem_pio2f+0x66>
 800e228:	edd4 7a00 	vldr	s15, [r4]
 800e22c:	eef1 7a67 	vneg.f32	s15, s15
 800e230:	edc4 7a00 	vstr	s15, [r4]
 800e234:	edd4 7a01 	vldr	s15, [r4, #4]
 800e238:	eef1 7a67 	vneg.f32	s15, s15
 800e23c:	edc4 7a01 	vstr	s15, [r4, #4]
 800e240:	e782      	b.n	800e148 <__ieee754_rem_pio2f+0x128>
 800e242:	2303      	movs	r3, #3
 800e244:	e7e5      	b.n	800e212 <__ieee754_rem_pio2f+0x1f2>
 800e246:	bf00      	nop
 800e248:	3f490fd8 	.word	0x3f490fd8
 800e24c:	4016cbe3 	.word	0x4016cbe3
 800e250:	3fc90f80 	.word	0x3fc90f80
 800e254:	3fc90fd0 	.word	0x3fc90fd0
 800e258:	37354400 	.word	0x37354400
 800e25c:	37354443 	.word	0x37354443
 800e260:	2e85a308 	.word	0x2e85a308
 800e264:	43490f80 	.word	0x43490f80
 800e268:	3f22f984 	.word	0x3f22f984
 800e26c:	080111d8 	.word	0x080111d8
 800e270:	2e85a300 	.word	0x2e85a300
 800e274:	248d3132 	.word	0x248d3132
 800e278:	43800000 	.word	0x43800000
 800e27c:	08011258 	.word	0x08011258

0800e280 <fabsf>:
 800e280:	ee10 3a10 	vmov	r3, s0
 800e284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e288:	ee00 3a10 	vmov	s0, r3
 800e28c:	4770      	bx	lr
	...

0800e290 <__kernel_rem_pio2>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	ed2d 8b02 	vpush	{d8}
 800e298:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e29c:	f112 0f14 	cmn.w	r2, #20
 800e2a0:	9306      	str	r3, [sp, #24]
 800e2a2:	9104      	str	r1, [sp, #16]
 800e2a4:	4bbe      	ldr	r3, [pc, #760]	@ (800e5a0 <__kernel_rem_pio2+0x310>)
 800e2a6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e2a8:	9008      	str	r0, [sp, #32]
 800e2aa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2ae:	9300      	str	r3, [sp, #0]
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2b6:	bfa8      	it	ge
 800e2b8:	1ed4      	subge	r4, r2, #3
 800e2ba:	9305      	str	r3, [sp, #20]
 800e2bc:	bfb2      	itee	lt
 800e2be:	2400      	movlt	r4, #0
 800e2c0:	2318      	movge	r3, #24
 800e2c2:	fb94 f4f3 	sdivge	r4, r4, r3
 800e2c6:	f06f 0317 	mvn.w	r3, #23
 800e2ca:	fb04 3303 	mla	r3, r4, r3, r3
 800e2ce:	eb03 0b02 	add.w	fp, r3, r2
 800e2d2:	9b00      	ldr	r3, [sp, #0]
 800e2d4:	9a05      	ldr	r2, [sp, #20]
 800e2d6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e590 <__kernel_rem_pio2+0x300>
 800e2da:	eb03 0802 	add.w	r8, r3, r2
 800e2de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e2e0:	1aa7      	subs	r7, r4, r2
 800e2e2:	ae20      	add	r6, sp, #128	@ 0x80
 800e2e4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e2e8:	2500      	movs	r5, #0
 800e2ea:	4545      	cmp	r5, r8
 800e2ec:	dd13      	ble.n	800e316 <__kernel_rem_pio2+0x86>
 800e2ee:	9b06      	ldr	r3, [sp, #24]
 800e2f0:	aa20      	add	r2, sp, #128	@ 0x80
 800e2f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e2f6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e2fa:	f04f 0800 	mov.w	r8, #0
 800e2fe:	9b00      	ldr	r3, [sp, #0]
 800e300:	4598      	cmp	r8, r3
 800e302:	dc31      	bgt.n	800e368 <__kernel_rem_pio2+0xd8>
 800e304:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e590 <__kernel_rem_pio2+0x300>
 800e308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e30c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e310:	462f      	mov	r7, r5
 800e312:	2600      	movs	r6, #0
 800e314:	e01b      	b.n	800e34e <__kernel_rem_pio2+0xbe>
 800e316:	42ef      	cmn	r7, r5
 800e318:	d407      	bmi.n	800e32a <__kernel_rem_pio2+0x9a>
 800e31a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e31e:	f7f2 f921 	bl	8000564 <__aeabi_i2d>
 800e322:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e326:	3501      	adds	r5, #1
 800e328:	e7df      	b.n	800e2ea <__kernel_rem_pio2+0x5a>
 800e32a:	ec51 0b18 	vmov	r0, r1, d8
 800e32e:	e7f8      	b.n	800e322 <__kernel_rem_pio2+0x92>
 800e330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e334:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e338:	f7f2 f97e 	bl	8000638 <__aeabi_dmul>
 800e33c:	4602      	mov	r2, r0
 800e33e:	460b      	mov	r3, r1
 800e340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e344:	f7f1 ffc2 	bl	80002cc <__adddf3>
 800e348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e34c:	3601      	adds	r6, #1
 800e34e:	9b05      	ldr	r3, [sp, #20]
 800e350:	429e      	cmp	r6, r3
 800e352:	f1a7 0708 	sub.w	r7, r7, #8
 800e356:	ddeb      	ble.n	800e330 <__kernel_rem_pio2+0xa0>
 800e358:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e35c:	f108 0801 	add.w	r8, r8, #1
 800e360:	ecaa 7b02 	vstmia	sl!, {d7}
 800e364:	3508      	adds	r5, #8
 800e366:	e7ca      	b.n	800e2fe <__kernel_rem_pio2+0x6e>
 800e368:	9b00      	ldr	r3, [sp, #0]
 800e36a:	f8dd 8000 	ldr.w	r8, [sp]
 800e36e:	aa0c      	add	r2, sp, #48	@ 0x30
 800e370:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e374:	930a      	str	r3, [sp, #40]	@ 0x28
 800e376:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e378:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e37e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e382:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e384:	ab98      	add	r3, sp, #608	@ 0x260
 800e386:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e38a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e38e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e392:	ac0c      	add	r4, sp, #48	@ 0x30
 800e394:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e396:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e39a:	46a1      	mov	r9, r4
 800e39c:	46c2      	mov	sl, r8
 800e39e:	f1ba 0f00 	cmp.w	sl, #0
 800e3a2:	f1a5 0508 	sub.w	r5, r5, #8
 800e3a6:	dc77      	bgt.n	800e498 <__kernel_rem_pio2+0x208>
 800e3a8:	4658      	mov	r0, fp
 800e3aa:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e3ae:	f000 fd3b 	bl	800ee28 <scalbn>
 800e3b2:	ec57 6b10 	vmov	r6, r7, d0
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e3bc:	4630      	mov	r0, r6
 800e3be:	4639      	mov	r1, r7
 800e3c0:	f7f2 f93a 	bl	8000638 <__aeabi_dmul>
 800e3c4:	ec41 0b10 	vmov	d0, r0, r1
 800e3c8:	f000 fe12 	bl	800eff0 <floor>
 800e3cc:	4b75      	ldr	r3, [pc, #468]	@ (800e5a4 <__kernel_rem_pio2+0x314>)
 800e3ce:	ec51 0b10 	vmov	r0, r1, d0
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	f7f2 f930 	bl	8000638 <__aeabi_dmul>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	4630      	mov	r0, r6
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f7f1 ff72 	bl	80002c8 <__aeabi_dsub>
 800e3e4:	460f      	mov	r7, r1
 800e3e6:	4606      	mov	r6, r0
 800e3e8:	f7f2 fbd6 	bl	8000b98 <__aeabi_d2iz>
 800e3ec:	9002      	str	r0, [sp, #8]
 800e3ee:	f7f2 f8b9 	bl	8000564 <__aeabi_i2d>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	4639      	mov	r1, r7
 800e3fa:	f7f1 ff65 	bl	80002c8 <__aeabi_dsub>
 800e3fe:	f1bb 0f00 	cmp.w	fp, #0
 800e402:	4606      	mov	r6, r0
 800e404:	460f      	mov	r7, r1
 800e406:	dd6c      	ble.n	800e4e2 <__kernel_rem_pio2+0x252>
 800e408:	f108 31ff 	add.w	r1, r8, #4294967295
 800e40c:	ab0c      	add	r3, sp, #48	@ 0x30
 800e40e:	9d02      	ldr	r5, [sp, #8]
 800e410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e414:	f1cb 0018 	rsb	r0, fp, #24
 800e418:	fa43 f200 	asr.w	r2, r3, r0
 800e41c:	4415      	add	r5, r2
 800e41e:	4082      	lsls	r2, r0
 800e420:	1a9b      	subs	r3, r3, r2
 800e422:	aa0c      	add	r2, sp, #48	@ 0x30
 800e424:	9502      	str	r5, [sp, #8]
 800e426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e42a:	f1cb 0217 	rsb	r2, fp, #23
 800e42e:	fa43 f902 	asr.w	r9, r3, r2
 800e432:	f1b9 0f00 	cmp.w	r9, #0
 800e436:	dd64      	ble.n	800e502 <__kernel_rem_pio2+0x272>
 800e438:	9b02      	ldr	r3, [sp, #8]
 800e43a:	2200      	movs	r2, #0
 800e43c:	3301      	adds	r3, #1
 800e43e:	9302      	str	r3, [sp, #8]
 800e440:	4615      	mov	r5, r2
 800e442:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e446:	4590      	cmp	r8, r2
 800e448:	f300 80b8 	bgt.w	800e5bc <__kernel_rem_pio2+0x32c>
 800e44c:	f1bb 0f00 	cmp.w	fp, #0
 800e450:	dd07      	ble.n	800e462 <__kernel_rem_pio2+0x1d2>
 800e452:	f1bb 0f01 	cmp.w	fp, #1
 800e456:	f000 80bf 	beq.w	800e5d8 <__kernel_rem_pio2+0x348>
 800e45a:	f1bb 0f02 	cmp.w	fp, #2
 800e45e:	f000 80c6 	beq.w	800e5ee <__kernel_rem_pio2+0x35e>
 800e462:	f1b9 0f02 	cmp.w	r9, #2
 800e466:	d14c      	bne.n	800e502 <__kernel_rem_pio2+0x272>
 800e468:	4632      	mov	r2, r6
 800e46a:	463b      	mov	r3, r7
 800e46c:	494e      	ldr	r1, [pc, #312]	@ (800e5a8 <__kernel_rem_pio2+0x318>)
 800e46e:	2000      	movs	r0, #0
 800e470:	f7f1 ff2a 	bl	80002c8 <__aeabi_dsub>
 800e474:	4606      	mov	r6, r0
 800e476:	460f      	mov	r7, r1
 800e478:	2d00      	cmp	r5, #0
 800e47a:	d042      	beq.n	800e502 <__kernel_rem_pio2+0x272>
 800e47c:	4658      	mov	r0, fp
 800e47e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e598 <__kernel_rem_pio2+0x308>
 800e482:	f000 fcd1 	bl	800ee28 <scalbn>
 800e486:	4630      	mov	r0, r6
 800e488:	4639      	mov	r1, r7
 800e48a:	ec53 2b10 	vmov	r2, r3, d0
 800e48e:	f7f1 ff1b 	bl	80002c8 <__aeabi_dsub>
 800e492:	4606      	mov	r6, r0
 800e494:	460f      	mov	r7, r1
 800e496:	e034      	b.n	800e502 <__kernel_rem_pio2+0x272>
 800e498:	4b44      	ldr	r3, [pc, #272]	@ (800e5ac <__kernel_rem_pio2+0x31c>)
 800e49a:	2200      	movs	r2, #0
 800e49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4a0:	f7f2 f8ca 	bl	8000638 <__aeabi_dmul>
 800e4a4:	f7f2 fb78 	bl	8000b98 <__aeabi_d2iz>
 800e4a8:	f7f2 f85c 	bl	8000564 <__aeabi_i2d>
 800e4ac:	4b40      	ldr	r3, [pc, #256]	@ (800e5b0 <__kernel_rem_pio2+0x320>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	460f      	mov	r7, r1
 800e4b4:	f7f2 f8c0 	bl	8000638 <__aeabi_dmul>
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	460b      	mov	r3, r1
 800e4bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4c0:	f7f1 ff02 	bl	80002c8 <__aeabi_dsub>
 800e4c4:	f7f2 fb68 	bl	8000b98 <__aeabi_d2iz>
 800e4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4cc:	f849 0b04 	str.w	r0, [r9], #4
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7f1 fefa 	bl	80002cc <__adddf3>
 800e4d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4e0:	e75d      	b.n	800e39e <__kernel_rem_pio2+0x10e>
 800e4e2:	d107      	bne.n	800e4f4 <__kernel_rem_pio2+0x264>
 800e4e4:	f108 33ff 	add.w	r3, r8, #4294967295
 800e4e8:	aa0c      	add	r2, sp, #48	@ 0x30
 800e4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4ee:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e4f2:	e79e      	b.n	800e432 <__kernel_rem_pio2+0x1a2>
 800e4f4:	4b2f      	ldr	r3, [pc, #188]	@ (800e5b4 <__kernel_rem_pio2+0x324>)
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	f7f2 fb24 	bl	8000b44 <__aeabi_dcmpge>
 800e4fc:	2800      	cmp	r0, #0
 800e4fe:	d143      	bne.n	800e588 <__kernel_rem_pio2+0x2f8>
 800e500:	4681      	mov	r9, r0
 800e502:	2200      	movs	r2, #0
 800e504:	2300      	movs	r3, #0
 800e506:	4630      	mov	r0, r6
 800e508:	4639      	mov	r1, r7
 800e50a:	f7f2 fafd 	bl	8000b08 <__aeabi_dcmpeq>
 800e50e:	2800      	cmp	r0, #0
 800e510:	f000 80bf 	beq.w	800e692 <__kernel_rem_pio2+0x402>
 800e514:	f108 33ff 	add.w	r3, r8, #4294967295
 800e518:	2200      	movs	r2, #0
 800e51a:	9900      	ldr	r1, [sp, #0]
 800e51c:	428b      	cmp	r3, r1
 800e51e:	da6e      	bge.n	800e5fe <__kernel_rem_pio2+0x36e>
 800e520:	2a00      	cmp	r2, #0
 800e522:	f000 8089 	beq.w	800e638 <__kernel_rem_pio2+0x3a8>
 800e526:	f108 38ff 	add.w	r8, r8, #4294967295
 800e52a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e52c:	f1ab 0b18 	sub.w	fp, fp, #24
 800e530:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d0f6      	beq.n	800e526 <__kernel_rem_pio2+0x296>
 800e538:	4658      	mov	r0, fp
 800e53a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e598 <__kernel_rem_pio2+0x308>
 800e53e:	f000 fc73 	bl	800ee28 <scalbn>
 800e542:	f108 0301 	add.w	r3, r8, #1
 800e546:	00da      	lsls	r2, r3, #3
 800e548:	9205      	str	r2, [sp, #20]
 800e54a:	ec55 4b10 	vmov	r4, r5, d0
 800e54e:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e550:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e5ac <__kernel_rem_pio2+0x31c>
 800e554:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e558:	4646      	mov	r6, r8
 800e55a:	f04f 0a00 	mov.w	sl, #0
 800e55e:	2e00      	cmp	r6, #0
 800e560:	f280 80cf 	bge.w	800e702 <__kernel_rem_pio2+0x472>
 800e564:	4644      	mov	r4, r8
 800e566:	2c00      	cmp	r4, #0
 800e568:	f2c0 80fd 	blt.w	800e766 <__kernel_rem_pio2+0x4d6>
 800e56c:	4b12      	ldr	r3, [pc, #72]	@ (800e5b8 <__kernel_rem_pio2+0x328>)
 800e56e:	461f      	mov	r7, r3
 800e570:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e576:	9306      	str	r3, [sp, #24]
 800e578:	f04f 0a00 	mov.w	sl, #0
 800e57c:	f04f 0b00 	mov.w	fp, #0
 800e580:	2600      	movs	r6, #0
 800e582:	eba8 0504 	sub.w	r5, r8, r4
 800e586:	e0e2      	b.n	800e74e <__kernel_rem_pio2+0x4be>
 800e588:	f04f 0902 	mov.w	r9, #2
 800e58c:	e754      	b.n	800e438 <__kernel_rem_pio2+0x1a8>
 800e58e:	bf00      	nop
	...
 800e59c:	3ff00000 	.word	0x3ff00000
 800e5a0:	080115b0 	.word	0x080115b0
 800e5a4:	40200000 	.word	0x40200000
 800e5a8:	3ff00000 	.word	0x3ff00000
 800e5ac:	3e700000 	.word	0x3e700000
 800e5b0:	41700000 	.word	0x41700000
 800e5b4:	3fe00000 	.word	0x3fe00000
 800e5b8:	08011570 	.word	0x08011570
 800e5bc:	f854 3b04 	ldr.w	r3, [r4], #4
 800e5c0:	b945      	cbnz	r5, 800e5d4 <__kernel_rem_pio2+0x344>
 800e5c2:	b123      	cbz	r3, 800e5ce <__kernel_rem_pio2+0x33e>
 800e5c4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e5c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	3201      	adds	r2, #1
 800e5d0:	461d      	mov	r5, r3
 800e5d2:	e738      	b.n	800e446 <__kernel_rem_pio2+0x1b6>
 800e5d4:	1acb      	subs	r3, r1, r3
 800e5d6:	e7f7      	b.n	800e5c8 <__kernel_rem_pio2+0x338>
 800e5d8:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5dc:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e5e6:	a90c      	add	r1, sp, #48	@ 0x30
 800e5e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e5ec:	e739      	b.n	800e462 <__kernel_rem_pio2+0x1d2>
 800e5ee:	f108 32ff 	add.w	r2, r8, #4294967295
 800e5f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800e5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e5fc:	e7f3      	b.n	800e5e6 <__kernel_rem_pio2+0x356>
 800e5fe:	a90c      	add	r1, sp, #48	@ 0x30
 800e600:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e604:	3b01      	subs	r3, #1
 800e606:	430a      	orrs	r2, r1
 800e608:	e787      	b.n	800e51a <__kernel_rem_pio2+0x28a>
 800e60a:	3401      	adds	r4, #1
 800e60c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e610:	2a00      	cmp	r2, #0
 800e612:	d0fa      	beq.n	800e60a <__kernel_rem_pio2+0x37a>
 800e614:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e616:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e61a:	eb0d 0503 	add.w	r5, sp, r3
 800e61e:	9b06      	ldr	r3, [sp, #24]
 800e620:	aa20      	add	r2, sp, #128	@ 0x80
 800e622:	4443      	add	r3, r8
 800e624:	f108 0701 	add.w	r7, r8, #1
 800e628:	3d98      	subs	r5, #152	@ 0x98
 800e62a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e62e:	4444      	add	r4, r8
 800e630:	42bc      	cmp	r4, r7
 800e632:	da04      	bge.n	800e63e <__kernel_rem_pio2+0x3ae>
 800e634:	46a0      	mov	r8, r4
 800e636:	e6a2      	b.n	800e37e <__kernel_rem_pio2+0xee>
 800e638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e63a:	2401      	movs	r4, #1
 800e63c:	e7e6      	b.n	800e60c <__kernel_rem_pio2+0x37c>
 800e63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e640:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e644:	f7f1 ff8e 	bl	8000564 <__aeabi_i2d>
 800e648:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e910 <__kernel_rem_pio2+0x680>
 800e64c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e650:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e654:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e658:	46b2      	mov	sl, r6
 800e65a:	f04f 0800 	mov.w	r8, #0
 800e65e:	9b05      	ldr	r3, [sp, #20]
 800e660:	4598      	cmp	r8, r3
 800e662:	dd05      	ble.n	800e670 <__kernel_rem_pio2+0x3e0>
 800e664:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e668:	3701      	adds	r7, #1
 800e66a:	eca5 7b02 	vstmia	r5!, {d7}
 800e66e:	e7df      	b.n	800e630 <__kernel_rem_pio2+0x3a0>
 800e670:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e674:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e678:	f7f1 ffde 	bl	8000638 <__aeabi_dmul>
 800e67c:	4602      	mov	r2, r0
 800e67e:	460b      	mov	r3, r1
 800e680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e684:	f7f1 fe22 	bl	80002cc <__adddf3>
 800e688:	f108 0801 	add.w	r8, r8, #1
 800e68c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e690:	e7e5      	b.n	800e65e <__kernel_rem_pio2+0x3ce>
 800e692:	f1cb 0000 	rsb	r0, fp, #0
 800e696:	ec47 6b10 	vmov	d0, r6, r7
 800e69a:	f000 fbc5 	bl	800ee28 <scalbn>
 800e69e:	ec55 4b10 	vmov	r4, r5, d0
 800e6a2:	4b9d      	ldr	r3, [pc, #628]	@ (800e918 <__kernel_rem_pio2+0x688>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	4629      	mov	r1, r5
 800e6aa:	f7f2 fa4b 	bl	8000b44 <__aeabi_dcmpge>
 800e6ae:	b300      	cbz	r0, 800e6f2 <__kernel_rem_pio2+0x462>
 800e6b0:	4b9a      	ldr	r3, [pc, #616]	@ (800e91c <__kernel_rem_pio2+0x68c>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	4629      	mov	r1, r5
 800e6b8:	f7f1 ffbe 	bl	8000638 <__aeabi_dmul>
 800e6bc:	f7f2 fa6c 	bl	8000b98 <__aeabi_d2iz>
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	f7f1 ff4f 	bl	8000564 <__aeabi_i2d>
 800e6c6:	4b94      	ldr	r3, [pc, #592]	@ (800e918 <__kernel_rem_pio2+0x688>)
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	f7f1 ffb5 	bl	8000638 <__aeabi_dmul>
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	4629      	mov	r1, r5
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f7f1 fdf7 	bl	80002c8 <__aeabi_dsub>
 800e6da:	f7f2 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800e6de:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6e0:	f10b 0b18 	add.w	fp, fp, #24
 800e6e4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e6e8:	f108 0801 	add.w	r8, r8, #1
 800e6ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e6f0:	e722      	b.n	800e538 <__kernel_rem_pio2+0x2a8>
 800e6f2:	4620      	mov	r0, r4
 800e6f4:	4629      	mov	r1, r5
 800e6f6:	f7f2 fa4f 	bl	8000b98 <__aeabi_d2iz>
 800e6fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800e6fc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e700:	e71a      	b.n	800e538 <__kernel_rem_pio2+0x2a8>
 800e702:	ab0c      	add	r3, sp, #48	@ 0x30
 800e704:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e708:	f7f1 ff2c 	bl	8000564 <__aeabi_i2d>
 800e70c:	4622      	mov	r2, r4
 800e70e:	462b      	mov	r3, r5
 800e710:	f7f1 ff92 	bl	8000638 <__aeabi_dmul>
 800e714:	4652      	mov	r2, sl
 800e716:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e71a:	465b      	mov	r3, fp
 800e71c:	4620      	mov	r0, r4
 800e71e:	4629      	mov	r1, r5
 800e720:	f7f1 ff8a 	bl	8000638 <__aeabi_dmul>
 800e724:	3e01      	subs	r6, #1
 800e726:	4604      	mov	r4, r0
 800e728:	460d      	mov	r5, r1
 800e72a:	e718      	b.n	800e55e <__kernel_rem_pio2+0x2ce>
 800e72c:	9906      	ldr	r1, [sp, #24]
 800e72e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e732:	9106      	str	r1, [sp, #24]
 800e734:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e738:	f7f1 ff7e 	bl	8000638 <__aeabi_dmul>
 800e73c:	4602      	mov	r2, r0
 800e73e:	460b      	mov	r3, r1
 800e740:	4650      	mov	r0, sl
 800e742:	4659      	mov	r1, fp
 800e744:	f7f1 fdc2 	bl	80002cc <__adddf3>
 800e748:	3601      	adds	r6, #1
 800e74a:	4682      	mov	sl, r0
 800e74c:	468b      	mov	fp, r1
 800e74e:	9b00      	ldr	r3, [sp, #0]
 800e750:	429e      	cmp	r6, r3
 800e752:	dc01      	bgt.n	800e758 <__kernel_rem_pio2+0x4c8>
 800e754:	42b5      	cmp	r5, r6
 800e756:	dae9      	bge.n	800e72c <__kernel_rem_pio2+0x49c>
 800e758:	ab48      	add	r3, sp, #288	@ 0x120
 800e75a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e75e:	e9c5 ab00 	strd	sl, fp, [r5]
 800e762:	3c01      	subs	r4, #1
 800e764:	e6ff      	b.n	800e566 <__kernel_rem_pio2+0x2d6>
 800e766:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e768:	2b02      	cmp	r3, #2
 800e76a:	dc0b      	bgt.n	800e784 <__kernel_rem_pio2+0x4f4>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	dc39      	bgt.n	800e7e4 <__kernel_rem_pio2+0x554>
 800e770:	d05d      	beq.n	800e82e <__kernel_rem_pio2+0x59e>
 800e772:	9b02      	ldr	r3, [sp, #8]
 800e774:	f003 0007 	and.w	r0, r3, #7
 800e778:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e77c:	ecbd 8b02 	vpop	{d8}
 800e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e784:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e786:	2b03      	cmp	r3, #3
 800e788:	d1f3      	bne.n	800e772 <__kernel_rem_pio2+0x4e2>
 800e78a:	9b05      	ldr	r3, [sp, #20]
 800e78c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e790:	eb0d 0403 	add.w	r4, sp, r3
 800e794:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e798:	4625      	mov	r5, r4
 800e79a:	46c2      	mov	sl, r8
 800e79c:	f1ba 0f00 	cmp.w	sl, #0
 800e7a0:	f1a5 0508 	sub.w	r5, r5, #8
 800e7a4:	dc6b      	bgt.n	800e87e <__kernel_rem_pio2+0x5ee>
 800e7a6:	4645      	mov	r5, r8
 800e7a8:	2d01      	cmp	r5, #1
 800e7aa:	f1a4 0408 	sub.w	r4, r4, #8
 800e7ae:	f300 8087 	bgt.w	800e8c0 <__kernel_rem_pio2+0x630>
 800e7b2:	9c05      	ldr	r4, [sp, #20]
 800e7b4:	ab48      	add	r3, sp, #288	@ 0x120
 800e7b6:	441c      	add	r4, r3
 800e7b8:	2000      	movs	r0, #0
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	f1b8 0f01 	cmp.w	r8, #1
 800e7c0:	f300 809c 	bgt.w	800e8fc <__kernel_rem_pio2+0x66c>
 800e7c4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e7c8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e7cc:	f1b9 0f00 	cmp.w	r9, #0
 800e7d0:	f040 80a6 	bne.w	800e920 <__kernel_rem_pio2+0x690>
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	e9c3 7800 	strd	r7, r8, [r3]
 800e7da:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e7de:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e7e2:	e7c6      	b.n	800e772 <__kernel_rem_pio2+0x4e2>
 800e7e4:	9d05      	ldr	r5, [sp, #20]
 800e7e6:	ab48      	add	r3, sp, #288	@ 0x120
 800e7e8:	441d      	add	r5, r3
 800e7ea:	4644      	mov	r4, r8
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	2c00      	cmp	r4, #0
 800e7f2:	da35      	bge.n	800e860 <__kernel_rem_pio2+0x5d0>
 800e7f4:	f1b9 0f00 	cmp.w	r9, #0
 800e7f8:	d038      	beq.n	800e86c <__kernel_rem_pio2+0x5dc>
 800e7fa:	4602      	mov	r2, r0
 800e7fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e800:	9c04      	ldr	r4, [sp, #16]
 800e802:	e9c4 2300 	strd	r2, r3, [r4]
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e80e:	f7f1 fd5b 	bl	80002c8 <__aeabi_dsub>
 800e812:	ad4a      	add	r5, sp, #296	@ 0x128
 800e814:	2401      	movs	r4, #1
 800e816:	45a0      	cmp	r8, r4
 800e818:	da2b      	bge.n	800e872 <__kernel_rem_pio2+0x5e2>
 800e81a:	f1b9 0f00 	cmp.w	r9, #0
 800e81e:	d002      	beq.n	800e826 <__kernel_rem_pio2+0x596>
 800e820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e824:	4619      	mov	r1, r3
 800e826:	9b04      	ldr	r3, [sp, #16]
 800e828:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e82c:	e7a1      	b.n	800e772 <__kernel_rem_pio2+0x4e2>
 800e82e:	9c05      	ldr	r4, [sp, #20]
 800e830:	ab48      	add	r3, sp, #288	@ 0x120
 800e832:	441c      	add	r4, r3
 800e834:	2000      	movs	r0, #0
 800e836:	2100      	movs	r1, #0
 800e838:	f1b8 0f00 	cmp.w	r8, #0
 800e83c:	da09      	bge.n	800e852 <__kernel_rem_pio2+0x5c2>
 800e83e:	f1b9 0f00 	cmp.w	r9, #0
 800e842:	d002      	beq.n	800e84a <__kernel_rem_pio2+0x5ba>
 800e844:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e848:	4619      	mov	r1, r3
 800e84a:	9b04      	ldr	r3, [sp, #16]
 800e84c:	e9c3 0100 	strd	r0, r1, [r3]
 800e850:	e78f      	b.n	800e772 <__kernel_rem_pio2+0x4e2>
 800e852:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e856:	f7f1 fd39 	bl	80002cc <__adddf3>
 800e85a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e85e:	e7eb      	b.n	800e838 <__kernel_rem_pio2+0x5a8>
 800e860:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e864:	f7f1 fd32 	bl	80002cc <__adddf3>
 800e868:	3c01      	subs	r4, #1
 800e86a:	e7c1      	b.n	800e7f0 <__kernel_rem_pio2+0x560>
 800e86c:	4602      	mov	r2, r0
 800e86e:	460b      	mov	r3, r1
 800e870:	e7c6      	b.n	800e800 <__kernel_rem_pio2+0x570>
 800e872:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e876:	f7f1 fd29 	bl	80002cc <__adddf3>
 800e87a:	3401      	adds	r4, #1
 800e87c:	e7cb      	b.n	800e816 <__kernel_rem_pio2+0x586>
 800e87e:	ed95 7b00 	vldr	d7, [r5]
 800e882:	ed8d 7b00 	vstr	d7, [sp]
 800e886:	ed95 7b02 	vldr	d7, [r5, #8]
 800e88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e88e:	ec53 2b17 	vmov	r2, r3, d7
 800e892:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e896:	f7f1 fd19 	bl	80002cc <__adddf3>
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4606      	mov	r6, r0
 800e8a0:	460f      	mov	r7, r1
 800e8a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8a6:	f7f1 fd0f 	bl	80002c8 <__aeabi_dsub>
 800e8aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8ae:	f7f1 fd0d 	bl	80002cc <__adddf3>
 800e8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8b6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e8ba:	e9c5 6700 	strd	r6, r7, [r5]
 800e8be:	e76d      	b.n	800e79c <__kernel_rem_pio2+0x50c>
 800e8c0:	ed94 7b00 	vldr	d7, [r4]
 800e8c4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e8c8:	ec51 0b17 	vmov	r0, r1, d7
 800e8cc:	4652      	mov	r2, sl
 800e8ce:	465b      	mov	r3, fp
 800e8d0:	ed8d 7b00 	vstr	d7, [sp]
 800e8d4:	f7f1 fcfa 	bl	80002cc <__adddf3>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	460b      	mov	r3, r1
 800e8dc:	4606      	mov	r6, r0
 800e8de:	460f      	mov	r7, r1
 800e8e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8e4:	f7f1 fcf0 	bl	80002c8 <__aeabi_dsub>
 800e8e8:	4652      	mov	r2, sl
 800e8ea:	465b      	mov	r3, fp
 800e8ec:	f7f1 fcee 	bl	80002cc <__adddf3>
 800e8f0:	3d01      	subs	r5, #1
 800e8f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e8f6:	e9c4 6700 	strd	r6, r7, [r4]
 800e8fa:	e755      	b.n	800e7a8 <__kernel_rem_pio2+0x518>
 800e8fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e900:	f7f1 fce4 	bl	80002cc <__adddf3>
 800e904:	f108 38ff 	add.w	r8, r8, #4294967295
 800e908:	e758      	b.n	800e7bc <__kernel_rem_pio2+0x52c>
 800e90a:	bf00      	nop
 800e90c:	f3af 8000 	nop.w
	...
 800e918:	41700000 	.word	0x41700000
 800e91c:	3e700000 	.word	0x3e700000
 800e920:	9b04      	ldr	r3, [sp, #16]
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	601f      	str	r7, [r3, #0]
 800e926:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e92a:	605c      	str	r4, [r3, #4]
 800e92c:	609d      	str	r5, [r3, #8]
 800e92e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e932:	60d3      	str	r3, [r2, #12]
 800e934:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e938:	6110      	str	r0, [r2, #16]
 800e93a:	6153      	str	r3, [r2, #20]
 800e93c:	e719      	b.n	800e772 <__kernel_rem_pio2+0x4e2>
 800e93e:	bf00      	nop

0800e940 <__kernel_rem_pio2f>:
 800e940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e944:	ed2d 8b04 	vpush	{d8-d9}
 800e948:	b0d9      	sub	sp, #356	@ 0x164
 800e94a:	4690      	mov	r8, r2
 800e94c:	9001      	str	r0, [sp, #4]
 800e94e:	4ab9      	ldr	r2, [pc, #740]	@ (800ec34 <__kernel_rem_pio2f+0x2f4>)
 800e950:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e952:	f118 0f04 	cmn.w	r8, #4
 800e956:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e95a:	460f      	mov	r7, r1
 800e95c:	f103 3bff 	add.w	fp, r3, #4294967295
 800e960:	db27      	blt.n	800e9b2 <__kernel_rem_pio2f+0x72>
 800e962:	f1b8 0203 	subs.w	r2, r8, #3
 800e966:	bf48      	it	mi
 800e968:	f108 0204 	addmi.w	r2, r8, #4
 800e96c:	10d2      	asrs	r2, r2, #3
 800e96e:	1c55      	adds	r5, r2, #1
 800e970:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e972:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800e976:	00e8      	lsls	r0, r5, #3
 800e978:	eba2 060b 	sub.w	r6, r2, fp
 800e97c:	9002      	str	r0, [sp, #8]
 800e97e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e982:	eb0a 0c0b 	add.w	ip, sl, fp
 800e986:	ac1c      	add	r4, sp, #112	@ 0x70
 800e988:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e98c:	2000      	movs	r0, #0
 800e98e:	4560      	cmp	r0, ip
 800e990:	dd11      	ble.n	800e9b6 <__kernel_rem_pio2f+0x76>
 800e992:	a91c      	add	r1, sp, #112	@ 0x70
 800e994:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e998:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e99c:	f04f 0c00 	mov.w	ip, #0
 800e9a0:	45d4      	cmp	ip, sl
 800e9a2:	dc27      	bgt.n	800e9f4 <__kernel_rem_pio2f+0xb4>
 800e9a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e9a8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	2400      	movs	r4, #0
 800e9b0:	e016      	b.n	800e9e0 <__kernel_rem_pio2f+0xa0>
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	e7db      	b.n	800e96e <__kernel_rem_pio2f+0x2e>
 800e9b6:	42c6      	cmn	r6, r0
 800e9b8:	bf5d      	ittte	pl
 800e9ba:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e9be:	ee07 1a90 	vmovpl	s15, r1
 800e9c2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e9c6:	eef0 7a47 	vmovmi.f32	s15, s14
 800e9ca:	ece4 7a01 	vstmia	r4!, {s15}
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	e7dd      	b.n	800e98e <__kernel_rem_pio2f+0x4e>
 800e9d2:	ecfe 6a01 	vldmia	lr!, {s13}
 800e9d6:	ed96 7a00 	vldr	s14, [r6]
 800e9da:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e9de:	3401      	adds	r4, #1
 800e9e0:	455c      	cmp	r4, fp
 800e9e2:	f1a6 0604 	sub.w	r6, r6, #4
 800e9e6:	ddf4      	ble.n	800e9d2 <__kernel_rem_pio2f+0x92>
 800e9e8:	ece9 7a01 	vstmia	r9!, {s15}
 800e9ec:	f10c 0c01 	add.w	ip, ip, #1
 800e9f0:	3004      	adds	r0, #4
 800e9f2:	e7d5      	b.n	800e9a0 <__kernel_rem_pio2f+0x60>
 800e9f4:	a908      	add	r1, sp, #32
 800e9f6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9fa:	9104      	str	r1, [sp, #16]
 800e9fc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e9fe:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800ec40 <__kernel_rem_pio2f+0x300>
 800ea02:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800ec3c <__kernel_rem_pio2f+0x2fc>
 800ea06:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ea0a:	9203      	str	r2, [sp, #12]
 800ea0c:	4654      	mov	r4, sl
 800ea0e:	00a2      	lsls	r2, r4, #2
 800ea10:	9205      	str	r2, [sp, #20]
 800ea12:	aa58      	add	r2, sp, #352	@ 0x160
 800ea14:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ea18:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800ea1c:	a944      	add	r1, sp, #272	@ 0x110
 800ea1e:	aa08      	add	r2, sp, #32
 800ea20:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800ea24:	4694      	mov	ip, r2
 800ea26:	4626      	mov	r6, r4
 800ea28:	2e00      	cmp	r6, #0
 800ea2a:	f1a0 0004 	sub.w	r0, r0, #4
 800ea2e:	dc4c      	bgt.n	800eaca <__kernel_rem_pio2f+0x18a>
 800ea30:	4628      	mov	r0, r5
 800ea32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea36:	f000 fa75 	bl	800ef24 <scalbnf>
 800ea3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ea3e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ea42:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ea46:	f000 fb4f 	bl	800f0e8 <floorf>
 800ea4a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ea4e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea58:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea5c:	ee17 9a90 	vmov	r9, s15
 800ea60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea64:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ea68:	dd41      	ble.n	800eaee <__kernel_rem_pio2f+0x1ae>
 800ea6a:	f104 3cff 	add.w	ip, r4, #4294967295
 800ea6e:	a908      	add	r1, sp, #32
 800ea70:	f1c5 0e08 	rsb	lr, r5, #8
 800ea74:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ea78:	fa46 f00e 	asr.w	r0, r6, lr
 800ea7c:	4481      	add	r9, r0
 800ea7e:	fa00 f00e 	lsl.w	r0, r0, lr
 800ea82:	1a36      	subs	r6, r6, r0
 800ea84:	f1c5 0007 	rsb	r0, r5, #7
 800ea88:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ea8c:	4106      	asrs	r6, r0
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	dd3c      	ble.n	800eb0c <__kernel_rem_pio2f+0x1cc>
 800ea92:	f04f 0e00 	mov.w	lr, #0
 800ea96:	f109 0901 	add.w	r9, r9, #1
 800ea9a:	4670      	mov	r0, lr
 800ea9c:	4574      	cmp	r4, lr
 800ea9e:	dc68      	bgt.n	800eb72 <__kernel_rem_pio2f+0x232>
 800eaa0:	2d00      	cmp	r5, #0
 800eaa2:	dd03      	ble.n	800eaac <__kernel_rem_pio2f+0x16c>
 800eaa4:	2d01      	cmp	r5, #1
 800eaa6:	d074      	beq.n	800eb92 <__kernel_rem_pio2f+0x252>
 800eaa8:	2d02      	cmp	r5, #2
 800eaaa:	d07d      	beq.n	800eba8 <__kernel_rem_pio2f+0x268>
 800eaac:	2e02      	cmp	r6, #2
 800eaae:	d12d      	bne.n	800eb0c <__kernel_rem_pio2f+0x1cc>
 800eab0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eab4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800eab8:	b340      	cbz	r0, 800eb0c <__kernel_rem_pio2f+0x1cc>
 800eaba:	4628      	mov	r0, r5
 800eabc:	9306      	str	r3, [sp, #24]
 800eabe:	f000 fa31 	bl	800ef24 <scalbnf>
 800eac2:	9b06      	ldr	r3, [sp, #24]
 800eac4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800eac8:	e020      	b.n	800eb0c <__kernel_rem_pio2f+0x1cc>
 800eaca:	ee60 7a28 	vmul.f32	s15, s0, s17
 800eace:	3e01      	subs	r6, #1
 800ead0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ead4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ead8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800eadc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eae0:	ecac 0a01 	vstmia	ip!, {s0}
 800eae4:	ed90 0a00 	vldr	s0, [r0]
 800eae8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eaec:	e79c      	b.n	800ea28 <__kernel_rem_pio2f+0xe8>
 800eaee:	d105      	bne.n	800eafc <__kernel_rem_pio2f+0x1bc>
 800eaf0:	1e60      	subs	r0, r4, #1
 800eaf2:	a908      	add	r1, sp, #32
 800eaf4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800eaf8:	11f6      	asrs	r6, r6, #7
 800eafa:	e7c8      	b.n	800ea8e <__kernel_rem_pio2f+0x14e>
 800eafc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eb00:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800eb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb08:	da31      	bge.n	800eb6e <__kernel_rem_pio2f+0x22e>
 800eb0a:	2600      	movs	r6, #0
 800eb0c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	f040 8098 	bne.w	800ec48 <__kernel_rem_pio2f+0x308>
 800eb18:	1e60      	subs	r0, r4, #1
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	4550      	cmp	r0, sl
 800eb1e:	da4b      	bge.n	800ebb8 <__kernel_rem_pio2f+0x278>
 800eb20:	2a00      	cmp	r2, #0
 800eb22:	d065      	beq.n	800ebf0 <__kernel_rem_pio2f+0x2b0>
 800eb24:	3c01      	subs	r4, #1
 800eb26:	ab08      	add	r3, sp, #32
 800eb28:	3d08      	subs	r5, #8
 800eb2a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d0f8      	beq.n	800eb24 <__kernel_rem_pio2f+0x1e4>
 800eb32:	4628      	mov	r0, r5
 800eb34:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eb38:	f000 f9f4 	bl	800ef24 <scalbnf>
 800eb3c:	1c63      	adds	r3, r4, #1
 800eb3e:	aa44      	add	r2, sp, #272	@ 0x110
 800eb40:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ec40 <__kernel_rem_pio2f+0x300>
 800eb44:	0099      	lsls	r1, r3, #2
 800eb46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb4a:	4623      	mov	r3, r4
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f280 80a9 	bge.w	800eca4 <__kernel_rem_pio2f+0x364>
 800eb52:	4623      	mov	r3, r4
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f2c0 80c7 	blt.w	800ece8 <__kernel_rem_pio2f+0x3a8>
 800eb5a:	aa44      	add	r2, sp, #272	@ 0x110
 800eb5c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800eb60:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ec38 <__kernel_rem_pio2f+0x2f8>
 800eb64:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800eb68:	2000      	movs	r0, #0
 800eb6a:	1ae2      	subs	r2, r4, r3
 800eb6c:	e0b1      	b.n	800ecd2 <__kernel_rem_pio2f+0x392>
 800eb6e:	2602      	movs	r6, #2
 800eb70:	e78f      	b.n	800ea92 <__kernel_rem_pio2f+0x152>
 800eb72:	f852 1b04 	ldr.w	r1, [r2], #4
 800eb76:	b948      	cbnz	r0, 800eb8c <__kernel_rem_pio2f+0x24c>
 800eb78:	b121      	cbz	r1, 800eb84 <__kernel_rem_pio2f+0x244>
 800eb7a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800eb7e:	f842 1c04 	str.w	r1, [r2, #-4]
 800eb82:	2101      	movs	r1, #1
 800eb84:	f10e 0e01 	add.w	lr, lr, #1
 800eb88:	4608      	mov	r0, r1
 800eb8a:	e787      	b.n	800ea9c <__kernel_rem_pio2f+0x15c>
 800eb8c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800eb90:	e7f5      	b.n	800eb7e <__kernel_rem_pio2f+0x23e>
 800eb92:	f104 3cff 	add.w	ip, r4, #4294967295
 800eb96:	aa08      	add	r2, sp, #32
 800eb98:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eb9c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800eba0:	a908      	add	r1, sp, #32
 800eba2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800eba6:	e781      	b.n	800eaac <__kernel_rem_pio2f+0x16c>
 800eba8:	f104 3cff 	add.w	ip, r4, #4294967295
 800ebac:	aa08      	add	r2, sp, #32
 800ebae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ebb2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ebb6:	e7f3      	b.n	800eba0 <__kernel_rem_pio2f+0x260>
 800ebb8:	a908      	add	r1, sp, #32
 800ebba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ebbe:	3801      	subs	r0, #1
 800ebc0:	430a      	orrs	r2, r1
 800ebc2:	e7ab      	b.n	800eb1c <__kernel_rem_pio2f+0x1dc>
 800ebc4:	3201      	adds	r2, #1
 800ebc6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ebca:	2e00      	cmp	r6, #0
 800ebcc:	d0fa      	beq.n	800ebc4 <__kernel_rem_pio2f+0x284>
 800ebce:	9905      	ldr	r1, [sp, #20]
 800ebd0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ebd4:	eb0d 0001 	add.w	r0, sp, r1
 800ebd8:	18e6      	adds	r6, r4, r3
 800ebda:	a91c      	add	r1, sp, #112	@ 0x70
 800ebdc:	f104 0c01 	add.w	ip, r4, #1
 800ebe0:	384c      	subs	r0, #76	@ 0x4c
 800ebe2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ebe6:	4422      	add	r2, r4
 800ebe8:	4562      	cmp	r2, ip
 800ebea:	da04      	bge.n	800ebf6 <__kernel_rem_pio2f+0x2b6>
 800ebec:	4614      	mov	r4, r2
 800ebee:	e70e      	b.n	800ea0e <__kernel_rem_pio2f+0xce>
 800ebf0:	9804      	ldr	r0, [sp, #16]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	e7e7      	b.n	800ebc6 <__kernel_rem_pio2f+0x286>
 800ebf6:	9903      	ldr	r1, [sp, #12]
 800ebf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ebfc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ec00:	9105      	str	r1, [sp, #20]
 800ec02:	ee07 1a90 	vmov	s15, r1
 800ec06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec0a:	2400      	movs	r4, #0
 800ec0c:	ece6 7a01 	vstmia	r6!, {s15}
 800ec10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800ec14:	46b1      	mov	r9, r6
 800ec16:	455c      	cmp	r4, fp
 800ec18:	dd04      	ble.n	800ec24 <__kernel_rem_pio2f+0x2e4>
 800ec1a:	ece0 7a01 	vstmia	r0!, {s15}
 800ec1e:	f10c 0c01 	add.w	ip, ip, #1
 800ec22:	e7e1      	b.n	800ebe8 <__kernel_rem_pio2f+0x2a8>
 800ec24:	ecfe 6a01 	vldmia	lr!, {s13}
 800ec28:	ed39 7a01 	vldmdb	r9!, {s14}
 800ec2c:	3401      	adds	r4, #1
 800ec2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec32:	e7f0      	b.n	800ec16 <__kernel_rem_pio2f+0x2d6>
 800ec34:	080115ec 	.word	0x080115ec
 800ec38:	080115c0 	.word	0x080115c0
 800ec3c:	43800000 	.word	0x43800000
 800ec40:	3b800000 	.word	0x3b800000
 800ec44:	00000000 	.word	0x00000000
 800ec48:	9b02      	ldr	r3, [sp, #8]
 800ec4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ec4e:	eba3 0008 	sub.w	r0, r3, r8
 800ec52:	f000 f967 	bl	800ef24 <scalbnf>
 800ec56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ec3c <__kernel_rem_pio2f+0x2fc>
 800ec5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ec5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec62:	db19      	blt.n	800ec98 <__kernel_rem_pio2f+0x358>
 800ec64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ec40 <__kernel_rem_pio2f+0x300>
 800ec68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ec6c:	aa08      	add	r2, sp, #32
 800ec6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec72:	3508      	adds	r5, #8
 800ec74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ec7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec84:	ee10 3a10 	vmov	r3, s0
 800ec88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec8c:	ee17 3a90 	vmov	r3, s15
 800ec90:	3401      	adds	r4, #1
 800ec92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec96:	e74c      	b.n	800eb32 <__kernel_rem_pio2f+0x1f2>
 800ec98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec9c:	aa08      	add	r2, sp, #32
 800ec9e:	ee10 3a10 	vmov	r3, s0
 800eca2:	e7f6      	b.n	800ec92 <__kernel_rem_pio2f+0x352>
 800eca4:	a808      	add	r0, sp, #32
 800eca6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ecaa:	9001      	str	r0, [sp, #4]
 800ecac:	ee07 0a90 	vmov	s15, r0
 800ecb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ecb4:	3b01      	subs	r3, #1
 800ecb6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ecba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ecbe:	ed62 7a01 	vstmdb	r2!, {s15}
 800ecc2:	e743      	b.n	800eb4c <__kernel_rem_pio2f+0x20c>
 800ecc4:	ecfc 6a01 	vldmia	ip!, {s13}
 800ecc8:	ecb5 7a01 	vldmia	r5!, {s14}
 800eccc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ecd0:	3001      	adds	r0, #1
 800ecd2:	4550      	cmp	r0, sl
 800ecd4:	dc01      	bgt.n	800ecda <__kernel_rem_pio2f+0x39a>
 800ecd6:	4282      	cmp	r2, r0
 800ecd8:	daf4      	bge.n	800ecc4 <__kernel_rem_pio2f+0x384>
 800ecda:	a858      	add	r0, sp, #352	@ 0x160
 800ecdc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ece0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ece4:	3b01      	subs	r3, #1
 800ece6:	e735      	b.n	800eb54 <__kernel_rem_pio2f+0x214>
 800ece8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	dc09      	bgt.n	800ed02 <__kernel_rem_pio2f+0x3c2>
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	dc2b      	bgt.n	800ed4a <__kernel_rem_pio2f+0x40a>
 800ecf2:	d044      	beq.n	800ed7e <__kernel_rem_pio2f+0x43e>
 800ecf4:	f009 0007 	and.w	r0, r9, #7
 800ecf8:	b059      	add	sp, #356	@ 0x164
 800ecfa:	ecbd 8b04 	vpop	{d8-d9}
 800ecfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ed04:	2b03      	cmp	r3, #3
 800ed06:	d1f5      	bne.n	800ecf4 <__kernel_rem_pio2f+0x3b4>
 800ed08:	aa30      	add	r2, sp, #192	@ 0xc0
 800ed0a:	1f0b      	subs	r3, r1, #4
 800ed0c:	4413      	add	r3, r2
 800ed0e:	461a      	mov	r2, r3
 800ed10:	4620      	mov	r0, r4
 800ed12:	2800      	cmp	r0, #0
 800ed14:	f1a2 0204 	sub.w	r2, r2, #4
 800ed18:	dc52      	bgt.n	800edc0 <__kernel_rem_pio2f+0x480>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	2a01      	cmp	r2, #1
 800ed1e:	f1a3 0304 	sub.w	r3, r3, #4
 800ed22:	dc5d      	bgt.n	800ede0 <__kernel_rem_pio2f+0x4a0>
 800ed24:	ab30      	add	r3, sp, #192	@ 0xc0
 800ed26:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800ed2a:	440b      	add	r3, r1
 800ed2c:	2c01      	cmp	r4, #1
 800ed2e:	dc67      	bgt.n	800ee00 <__kernel_rem_pio2f+0x4c0>
 800ed30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ed34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ed38:	2e00      	cmp	r6, #0
 800ed3a:	d167      	bne.n	800ee0c <__kernel_rem_pio2f+0x4cc>
 800ed3c:	edc7 6a00 	vstr	s13, [r7]
 800ed40:	ed87 7a01 	vstr	s14, [r7, #4]
 800ed44:	edc7 7a02 	vstr	s15, [r7, #8]
 800ed48:	e7d4      	b.n	800ecf4 <__kernel_rem_pio2f+0x3b4>
 800ed4a:	ab30      	add	r3, sp, #192	@ 0xc0
 800ed4c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800ed50:	440b      	add	r3, r1
 800ed52:	4622      	mov	r2, r4
 800ed54:	2a00      	cmp	r2, #0
 800ed56:	da24      	bge.n	800eda2 <__kernel_rem_pio2f+0x462>
 800ed58:	b34e      	cbz	r6, 800edae <__kernel_rem_pio2f+0x46e>
 800ed5a:	eef1 7a47 	vneg.f32	s15, s14
 800ed5e:	edc7 7a00 	vstr	s15, [r7]
 800ed62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ed66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed6a:	aa31      	add	r2, sp, #196	@ 0xc4
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	429c      	cmp	r4, r3
 800ed70:	da20      	bge.n	800edb4 <__kernel_rem_pio2f+0x474>
 800ed72:	b10e      	cbz	r6, 800ed78 <__kernel_rem_pio2f+0x438>
 800ed74:	eef1 7a67 	vneg.f32	s15, s15
 800ed78:	edc7 7a01 	vstr	s15, [r7, #4]
 800ed7c:	e7ba      	b.n	800ecf4 <__kernel_rem_pio2f+0x3b4>
 800ed7e:	ab30      	add	r3, sp, #192	@ 0xc0
 800ed80:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800ec44 <__kernel_rem_pio2f+0x304>
 800ed84:	440b      	add	r3, r1
 800ed86:	2c00      	cmp	r4, #0
 800ed88:	da05      	bge.n	800ed96 <__kernel_rem_pio2f+0x456>
 800ed8a:	b10e      	cbz	r6, 800ed90 <__kernel_rem_pio2f+0x450>
 800ed8c:	eef1 7a67 	vneg.f32	s15, s15
 800ed90:	edc7 7a00 	vstr	s15, [r7]
 800ed94:	e7ae      	b.n	800ecf4 <__kernel_rem_pio2f+0x3b4>
 800ed96:	ed33 7a01 	vldmdb	r3!, {s14}
 800ed9a:	3c01      	subs	r4, #1
 800ed9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eda0:	e7f1      	b.n	800ed86 <__kernel_rem_pio2f+0x446>
 800eda2:	ed73 7a01 	vldmdb	r3!, {s15}
 800eda6:	3a01      	subs	r2, #1
 800eda8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800edac:	e7d2      	b.n	800ed54 <__kernel_rem_pio2f+0x414>
 800edae:	eef0 7a47 	vmov.f32	s15, s14
 800edb2:	e7d4      	b.n	800ed5e <__kernel_rem_pio2f+0x41e>
 800edb4:	ecb2 7a01 	vldmia	r2!, {s14}
 800edb8:	3301      	adds	r3, #1
 800edba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edbe:	e7d6      	b.n	800ed6e <__kernel_rem_pio2f+0x42e>
 800edc0:	edd2 7a00 	vldr	s15, [r2]
 800edc4:	edd2 6a01 	vldr	s13, [r2, #4]
 800edc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edcc:	3801      	subs	r0, #1
 800edce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edd2:	ed82 7a00 	vstr	s14, [r2]
 800edd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edda:	edc2 7a01 	vstr	s15, [r2, #4]
 800edde:	e798      	b.n	800ed12 <__kernel_rem_pio2f+0x3d2>
 800ede0:	edd3 7a00 	vldr	s15, [r3]
 800ede4:	edd3 6a01 	vldr	s13, [r3, #4]
 800ede8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edec:	3a01      	subs	r2, #1
 800edee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edf2:	ed83 7a00 	vstr	s14, [r3]
 800edf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edfa:	edc3 7a01 	vstr	s15, [r3, #4]
 800edfe:	e78d      	b.n	800ed1c <__kernel_rem_pio2f+0x3dc>
 800ee00:	ed33 7a01 	vldmdb	r3!, {s14}
 800ee04:	3c01      	subs	r4, #1
 800ee06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ee0a:	e78f      	b.n	800ed2c <__kernel_rem_pio2f+0x3ec>
 800ee0c:	eef1 6a66 	vneg.f32	s13, s13
 800ee10:	eeb1 7a47 	vneg.f32	s14, s14
 800ee14:	edc7 6a00 	vstr	s13, [r7]
 800ee18:	ed87 7a01 	vstr	s14, [r7, #4]
 800ee1c:	eef1 7a67 	vneg.f32	s15, s15
 800ee20:	e790      	b.n	800ed44 <__kernel_rem_pio2f+0x404>
 800ee22:	bf00      	nop
 800ee24:	0000      	movs	r0, r0
	...

0800ee28 <scalbn>:
 800ee28:	b570      	push	{r4, r5, r6, lr}
 800ee2a:	ec55 4b10 	vmov	r4, r5, d0
 800ee2e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800ee32:	4606      	mov	r6, r0
 800ee34:	462b      	mov	r3, r5
 800ee36:	b991      	cbnz	r1, 800ee5e <scalbn+0x36>
 800ee38:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ee3c:	4323      	orrs	r3, r4
 800ee3e:	d03d      	beq.n	800eebc <scalbn+0x94>
 800ee40:	4b35      	ldr	r3, [pc, #212]	@ (800ef18 <scalbn+0xf0>)
 800ee42:	4620      	mov	r0, r4
 800ee44:	4629      	mov	r1, r5
 800ee46:	2200      	movs	r2, #0
 800ee48:	f7f1 fbf6 	bl	8000638 <__aeabi_dmul>
 800ee4c:	4b33      	ldr	r3, [pc, #204]	@ (800ef1c <scalbn+0xf4>)
 800ee4e:	429e      	cmp	r6, r3
 800ee50:	4604      	mov	r4, r0
 800ee52:	460d      	mov	r5, r1
 800ee54:	da0f      	bge.n	800ee76 <scalbn+0x4e>
 800ee56:	a328      	add	r3, pc, #160	@ (adr r3, 800eef8 <scalbn+0xd0>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	e01e      	b.n	800ee9c <scalbn+0x74>
 800ee5e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800ee62:	4291      	cmp	r1, r2
 800ee64:	d10b      	bne.n	800ee7e <scalbn+0x56>
 800ee66:	4622      	mov	r2, r4
 800ee68:	4620      	mov	r0, r4
 800ee6a:	4629      	mov	r1, r5
 800ee6c:	f7f1 fa2e 	bl	80002cc <__adddf3>
 800ee70:	4604      	mov	r4, r0
 800ee72:	460d      	mov	r5, r1
 800ee74:	e022      	b.n	800eebc <scalbn+0x94>
 800ee76:	460b      	mov	r3, r1
 800ee78:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ee7c:	3936      	subs	r1, #54	@ 0x36
 800ee7e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800ee82:	4296      	cmp	r6, r2
 800ee84:	dd0d      	ble.n	800eea2 <scalbn+0x7a>
 800ee86:	2d00      	cmp	r5, #0
 800ee88:	a11d      	add	r1, pc, #116	@ (adr r1, 800ef00 <scalbn+0xd8>)
 800ee8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee8e:	da02      	bge.n	800ee96 <scalbn+0x6e>
 800ee90:	a11d      	add	r1, pc, #116	@ (adr r1, 800ef08 <scalbn+0xe0>)
 800ee92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee96:	a31a      	add	r3, pc, #104	@ (adr r3, 800ef00 <scalbn+0xd8>)
 800ee98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9c:	f7f1 fbcc 	bl	8000638 <__aeabi_dmul>
 800eea0:	e7e6      	b.n	800ee70 <scalbn+0x48>
 800eea2:	1872      	adds	r2, r6, r1
 800eea4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800eea8:	428a      	cmp	r2, r1
 800eeaa:	dcec      	bgt.n	800ee86 <scalbn+0x5e>
 800eeac:	2a00      	cmp	r2, #0
 800eeae:	dd08      	ble.n	800eec2 <scalbn+0x9a>
 800eeb0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800eeb4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800eeb8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eebc:	ec45 4b10 	vmov	d0, r4, r5
 800eec0:	bd70      	pop	{r4, r5, r6, pc}
 800eec2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800eec6:	da08      	bge.n	800eeda <scalbn+0xb2>
 800eec8:	2d00      	cmp	r5, #0
 800eeca:	a10b      	add	r1, pc, #44	@ (adr r1, 800eef8 <scalbn+0xd0>)
 800eecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eed0:	dac1      	bge.n	800ee56 <scalbn+0x2e>
 800eed2:	a10f      	add	r1, pc, #60	@ (adr r1, 800ef10 <scalbn+0xe8>)
 800eed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eed8:	e7bd      	b.n	800ee56 <scalbn+0x2e>
 800eeda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800eede:	3236      	adds	r2, #54	@ 0x36
 800eee0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800eee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800eee8:	4620      	mov	r0, r4
 800eeea:	4b0d      	ldr	r3, [pc, #52]	@ (800ef20 <scalbn+0xf8>)
 800eeec:	4629      	mov	r1, r5
 800eeee:	2200      	movs	r2, #0
 800eef0:	e7d4      	b.n	800ee9c <scalbn+0x74>
 800eef2:	bf00      	nop
 800eef4:	f3af 8000 	nop.w
 800eef8:	c2f8f359 	.word	0xc2f8f359
 800eefc:	01a56e1f 	.word	0x01a56e1f
 800ef00:	8800759c 	.word	0x8800759c
 800ef04:	7e37e43c 	.word	0x7e37e43c
 800ef08:	8800759c 	.word	0x8800759c
 800ef0c:	fe37e43c 	.word	0xfe37e43c
 800ef10:	c2f8f359 	.word	0xc2f8f359
 800ef14:	81a56e1f 	.word	0x81a56e1f
 800ef18:	43500000 	.word	0x43500000
 800ef1c:	ffff3cb0 	.word	0xffff3cb0
 800ef20:	3c900000 	.word	0x3c900000

0800ef24 <scalbnf>:
 800ef24:	ee10 3a10 	vmov	r3, s0
 800ef28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ef2c:	d02b      	beq.n	800ef86 <scalbnf+0x62>
 800ef2e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ef32:	d302      	bcc.n	800ef3a <scalbnf+0x16>
 800ef34:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef38:	4770      	bx	lr
 800ef3a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ef3e:	d123      	bne.n	800ef88 <scalbnf+0x64>
 800ef40:	4b24      	ldr	r3, [pc, #144]	@ (800efd4 <scalbnf+0xb0>)
 800ef42:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800efd8 <scalbnf+0xb4>
 800ef46:	4298      	cmp	r0, r3
 800ef48:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ef4c:	db17      	blt.n	800ef7e <scalbnf+0x5a>
 800ef4e:	ee10 3a10 	vmov	r3, s0
 800ef52:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ef56:	3a19      	subs	r2, #25
 800ef58:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ef5c:	4288      	cmp	r0, r1
 800ef5e:	dd15      	ble.n	800ef8c <scalbnf+0x68>
 800ef60:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800efdc <scalbnf+0xb8>
 800ef64:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800efe0 <scalbnf+0xbc>
 800ef68:	ee10 3a10 	vmov	r3, s0
 800ef6c:	eeb0 7a67 	vmov.f32	s14, s15
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	bfb8      	it	lt
 800ef74:	eef0 7a66 	vmovlt.f32	s15, s13
 800ef78:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ef7c:	4770      	bx	lr
 800ef7e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800efe4 <scalbnf+0xc0>
 800ef82:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ef86:	4770      	bx	lr
 800ef88:	0dd2      	lsrs	r2, r2, #23
 800ef8a:	e7e5      	b.n	800ef58 <scalbnf+0x34>
 800ef8c:	4410      	add	r0, r2
 800ef8e:	28fe      	cmp	r0, #254	@ 0xfe
 800ef90:	dce6      	bgt.n	800ef60 <scalbnf+0x3c>
 800ef92:	2800      	cmp	r0, #0
 800ef94:	dd06      	ble.n	800efa4 <scalbnf+0x80>
 800ef96:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ef9a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ef9e:	ee00 3a10 	vmov	s0, r3
 800efa2:	4770      	bx	lr
 800efa4:	f110 0f16 	cmn.w	r0, #22
 800efa8:	da09      	bge.n	800efbe <scalbnf+0x9a>
 800efaa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800efe4 <scalbnf+0xc0>
 800efae:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800efe8 <scalbnf+0xc4>
 800efb2:	ee10 3a10 	vmov	r3, s0
 800efb6:	eeb0 7a67 	vmov.f32	s14, s15
 800efba:	2b00      	cmp	r3, #0
 800efbc:	e7d9      	b.n	800ef72 <scalbnf+0x4e>
 800efbe:	3019      	adds	r0, #25
 800efc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800efc4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800efc8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800efec <scalbnf+0xc8>
 800efcc:	ee07 3a90 	vmov	s15, r3
 800efd0:	e7d7      	b.n	800ef82 <scalbnf+0x5e>
 800efd2:	bf00      	nop
 800efd4:	ffff3cb0 	.word	0xffff3cb0
 800efd8:	4c000000 	.word	0x4c000000
 800efdc:	7149f2ca 	.word	0x7149f2ca
 800efe0:	f149f2ca 	.word	0xf149f2ca
 800efe4:	0da24260 	.word	0x0da24260
 800efe8:	8da24260 	.word	0x8da24260
 800efec:	33000000 	.word	0x33000000

0800eff0 <floor>:
 800eff0:	ec51 0b10 	vmov	r0, r1, d0
 800eff4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800effc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800f000:	2e13      	cmp	r6, #19
 800f002:	460c      	mov	r4, r1
 800f004:	4605      	mov	r5, r0
 800f006:	4680      	mov	r8, r0
 800f008:	dc34      	bgt.n	800f074 <floor+0x84>
 800f00a:	2e00      	cmp	r6, #0
 800f00c:	da17      	bge.n	800f03e <floor+0x4e>
 800f00e:	a332      	add	r3, pc, #200	@ (adr r3, 800f0d8 <floor+0xe8>)
 800f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f014:	f7f1 f95a 	bl	80002cc <__adddf3>
 800f018:	2200      	movs	r2, #0
 800f01a:	2300      	movs	r3, #0
 800f01c:	f7f1 fd9c 	bl	8000b58 <__aeabi_dcmpgt>
 800f020:	b150      	cbz	r0, 800f038 <floor+0x48>
 800f022:	2c00      	cmp	r4, #0
 800f024:	da55      	bge.n	800f0d2 <floor+0xe2>
 800f026:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800f02a:	432c      	orrs	r4, r5
 800f02c:	2500      	movs	r5, #0
 800f02e:	42ac      	cmp	r4, r5
 800f030:	4c2b      	ldr	r4, [pc, #172]	@ (800f0e0 <floor+0xf0>)
 800f032:	bf08      	it	eq
 800f034:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800f038:	4621      	mov	r1, r4
 800f03a:	4628      	mov	r0, r5
 800f03c:	e023      	b.n	800f086 <floor+0x96>
 800f03e:	4f29      	ldr	r7, [pc, #164]	@ (800f0e4 <floor+0xf4>)
 800f040:	4137      	asrs	r7, r6
 800f042:	ea01 0307 	and.w	r3, r1, r7
 800f046:	4303      	orrs	r3, r0
 800f048:	d01d      	beq.n	800f086 <floor+0x96>
 800f04a:	a323      	add	r3, pc, #140	@ (adr r3, 800f0d8 <floor+0xe8>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f7f1 f93c 	bl	80002cc <__adddf3>
 800f054:	2200      	movs	r2, #0
 800f056:	2300      	movs	r3, #0
 800f058:	f7f1 fd7e 	bl	8000b58 <__aeabi_dcmpgt>
 800f05c:	2800      	cmp	r0, #0
 800f05e:	d0eb      	beq.n	800f038 <floor+0x48>
 800f060:	2c00      	cmp	r4, #0
 800f062:	bfbe      	ittt	lt
 800f064:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800f068:	4133      	asrlt	r3, r6
 800f06a:	18e4      	addlt	r4, r4, r3
 800f06c:	ea24 0407 	bic.w	r4, r4, r7
 800f070:	2500      	movs	r5, #0
 800f072:	e7e1      	b.n	800f038 <floor+0x48>
 800f074:	2e33      	cmp	r6, #51	@ 0x33
 800f076:	dd0a      	ble.n	800f08e <floor+0x9e>
 800f078:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800f07c:	d103      	bne.n	800f086 <floor+0x96>
 800f07e:	4602      	mov	r2, r0
 800f080:	460b      	mov	r3, r1
 800f082:	f7f1 f923 	bl	80002cc <__adddf3>
 800f086:	ec41 0b10 	vmov	d0, r0, r1
 800f08a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f08e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800f092:	f04f 37ff 	mov.w	r7, #4294967295
 800f096:	40df      	lsrs	r7, r3
 800f098:	4207      	tst	r7, r0
 800f09a:	d0f4      	beq.n	800f086 <floor+0x96>
 800f09c:	a30e      	add	r3, pc, #56	@ (adr r3, 800f0d8 <floor+0xe8>)
 800f09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a2:	f7f1 f913 	bl	80002cc <__adddf3>
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	f7f1 fd55 	bl	8000b58 <__aeabi_dcmpgt>
 800f0ae:	2800      	cmp	r0, #0
 800f0b0:	d0c2      	beq.n	800f038 <floor+0x48>
 800f0b2:	2c00      	cmp	r4, #0
 800f0b4:	da0a      	bge.n	800f0cc <floor+0xdc>
 800f0b6:	2e14      	cmp	r6, #20
 800f0b8:	d101      	bne.n	800f0be <floor+0xce>
 800f0ba:	3401      	adds	r4, #1
 800f0bc:	e006      	b.n	800f0cc <floor+0xdc>
 800f0be:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800f0c2:	2301      	movs	r3, #1
 800f0c4:	40b3      	lsls	r3, r6
 800f0c6:	441d      	add	r5, r3
 800f0c8:	4545      	cmp	r5, r8
 800f0ca:	d3f6      	bcc.n	800f0ba <floor+0xca>
 800f0cc:	ea25 0507 	bic.w	r5, r5, r7
 800f0d0:	e7b2      	b.n	800f038 <floor+0x48>
 800f0d2:	2500      	movs	r5, #0
 800f0d4:	462c      	mov	r4, r5
 800f0d6:	e7af      	b.n	800f038 <floor+0x48>
 800f0d8:	8800759c 	.word	0x8800759c
 800f0dc:	7e37e43c 	.word	0x7e37e43c
 800f0e0:	bff00000 	.word	0xbff00000
 800f0e4:	000fffff 	.word	0x000fffff

0800f0e8 <floorf>:
 800f0e8:	ee10 3a10 	vmov	r3, s0
 800f0ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f0f0:	3a7f      	subs	r2, #127	@ 0x7f
 800f0f2:	2a16      	cmp	r2, #22
 800f0f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f0f8:	dc2b      	bgt.n	800f152 <floorf+0x6a>
 800f0fa:	2a00      	cmp	r2, #0
 800f0fc:	da12      	bge.n	800f124 <floorf+0x3c>
 800f0fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f164 <floorf+0x7c>
 800f102:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f106:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10e:	dd06      	ble.n	800f11e <floorf+0x36>
 800f110:	2b00      	cmp	r3, #0
 800f112:	da24      	bge.n	800f15e <floorf+0x76>
 800f114:	2900      	cmp	r1, #0
 800f116:	4b14      	ldr	r3, [pc, #80]	@ (800f168 <floorf+0x80>)
 800f118:	bf08      	it	eq
 800f11a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f11e:	ee00 3a10 	vmov	s0, r3
 800f122:	4770      	bx	lr
 800f124:	4911      	ldr	r1, [pc, #68]	@ (800f16c <floorf+0x84>)
 800f126:	4111      	asrs	r1, r2
 800f128:	420b      	tst	r3, r1
 800f12a:	d0fa      	beq.n	800f122 <floorf+0x3a>
 800f12c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f164 <floorf+0x7c>
 800f130:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13c:	ddef      	ble.n	800f11e <floorf+0x36>
 800f13e:	2b00      	cmp	r3, #0
 800f140:	bfbe      	ittt	lt
 800f142:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f146:	fa40 f202 	asrlt.w	r2, r0, r2
 800f14a:	189b      	addlt	r3, r3, r2
 800f14c:	ea23 0301 	bic.w	r3, r3, r1
 800f150:	e7e5      	b.n	800f11e <floorf+0x36>
 800f152:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f156:	d3e4      	bcc.n	800f122 <floorf+0x3a>
 800f158:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f15c:	4770      	bx	lr
 800f15e:	2300      	movs	r3, #0
 800f160:	e7dd      	b.n	800f11e <floorf+0x36>
 800f162:	bf00      	nop
 800f164:	7149f2ca 	.word	0x7149f2ca
 800f168:	bf800000 	.word	0xbf800000
 800f16c:	007fffff 	.word	0x007fffff

0800f170 <_init>:
 800f170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f172:	bf00      	nop
 800f174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f176:	bc08      	pop	{r3}
 800f178:	469e      	mov	lr, r3
 800f17a:	4770      	bx	lr

0800f17c <_fini>:
 800f17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f17e:	bf00      	nop
 800f180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f182:	bc08      	pop	{r3}
 800f184:	469e      	mov	lr, r3
 800f186:	4770      	bx	lr
