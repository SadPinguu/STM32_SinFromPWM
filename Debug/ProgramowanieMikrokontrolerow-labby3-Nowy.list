
ProgramowanieMikrokontrolerow-labby3-Nowy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f80  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08008148  08008148  00009148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008340  08008340  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008340  08008340  00009340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008348  08008348  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800834c  0800834c  0000934c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008350  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  20000018  08008368  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  08008368  0000a6d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019586  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033b1  00000000  00000000  000235ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00026980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001115  00000000  00000000  00027f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000294df  00000000  00000000  0002907d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ad9b  00000000  00000000  0005255c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010169b  00000000  00000000  0006d2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000613c  00000000  00000000  0016e9d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00174b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000018 	.word	0x20000018
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008130 	.word	0x08008130

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000001c 	.word	0x2000001c
 8000204:	08008130 	.word	0x08008130

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_d2f>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b4c:	bf24      	itt	cs
 8000b4e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b52:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b56:	d90d      	bls.n	8000b74 <__aeabi_d2f+0x30>
 8000b58:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b5c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b60:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b64:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b68:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b6c:	bf08      	it	eq
 8000b6e:	f020 0001 	biceq.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b78:	d121      	bne.n	8000bbe <__aeabi_d2f+0x7a>
 8000b7a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7e:	bfbc      	itt	lt
 8000b80:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	4770      	bxlt	lr
 8000b86:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b8a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8e:	f1c2 0218 	rsb	r2, r2, #24
 8000b92:	f1c2 0c20 	rsb	ip, r2, #32
 8000b96:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9e:	bf18      	it	ne
 8000ba0:	f040 0001 	orrne.w	r0, r0, #1
 8000ba4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bac:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb0:	ea40 000c 	orr.w	r0, r0, ip
 8000bb4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bbc:	e7cc      	b.n	8000b58 <__aeabi_d2f+0x14>
 8000bbe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc2:	d107      	bne.n	8000bd4 <__aeabi_d2f+0x90>
 8000bc4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc8:	bf1e      	ittt	ne
 8000bca:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bce:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bd2:	4770      	bxne	lr
 8000bd4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bdc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <__aeabi_uldivmod>:
 8000be4:	b953      	cbnz	r3, 8000bfc <__aeabi_uldivmod+0x18>
 8000be6:	b94a      	cbnz	r2, 8000bfc <__aeabi_uldivmod+0x18>
 8000be8:	2900      	cmp	r1, #0
 8000bea:	bf08      	it	eq
 8000bec:	2800      	cmpeq	r0, #0
 8000bee:	bf1c      	itt	ne
 8000bf0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf8:	f000 b96a 	b.w	8000ed0 <__aeabi_idiv0>
 8000bfc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c04:	f000 f806 	bl	8000c14 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr

08000c14 <__udivmoddi4>:
 8000c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c18:	9d08      	ldr	r5, [sp, #32]
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d14e      	bne.n	8000cbe <__udivmoddi4+0xaa>
 8000c20:	4694      	mov	ip, r2
 8000c22:	458c      	cmp	ip, r1
 8000c24:	4686      	mov	lr, r0
 8000c26:	fab2 f282 	clz	r2, r2
 8000c2a:	d962      	bls.n	8000cf2 <__udivmoddi4+0xde>
 8000c2c:	b14a      	cbz	r2, 8000c42 <__udivmoddi4+0x2e>
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	4091      	lsls	r1, r2
 8000c34:	fa20 f303 	lsr.w	r3, r0, r3
 8000c38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c3c:	4319      	orrs	r1, r3
 8000c3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c46:	fa1f f68c 	uxth.w	r6, ip
 8000c4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c52:	fb07 1114 	mls	r1, r7, r4, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb04 f106 	mul.w	r1, r4, r6
 8000c5e:	4299      	cmp	r1, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x64>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c6a:	f080 8112 	bcs.w	8000e92 <__udivmoddi4+0x27e>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 810f 	bls.w	8000e92 <__udivmoddi4+0x27e>
 8000c74:	3c02      	subs	r4, #2
 8000c76:	4463      	add	r3, ip
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c82:	fb07 1110 	mls	r1, r7, r0, r1
 8000c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8a:	fb00 f606 	mul.w	r6, r0, r6
 8000c8e:	429e      	cmp	r6, r3
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x94>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c9a:	f080 80fc 	bcs.w	8000e96 <__udivmoddi4+0x282>
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	f240 80f9 	bls.w	8000e96 <__udivmoddi4+0x282>
 8000ca4:	4463      	add	r3, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	1b9b      	subs	r3, r3, r6
 8000caa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa6>
 8000cb2:	40d3      	lsrs	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xba>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb4>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x150>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xcc>
 8000cda:	4290      	cmp	r0, r2
 8000cdc:	f0c0 80f0 	bcc.w	8000ec0 <__udivmoddi4+0x2ac>
 8000ce0:	1a86      	subs	r6, r0, r2
 8000ce2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d0e6      	beq.n	8000cba <__udivmoddi4+0xa6>
 8000cec:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf0:	e7e3      	b.n	8000cba <__udivmoddi4+0xa6>
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x204>
 8000cf8:	eba1 040c 	sub.w	r4, r1, ip
 8000cfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d00:	fa1f f78c 	uxth.w	r7, ip
 8000d04:	2101      	movs	r1, #1
 8000d06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb07 f006 	mul.w	r0, r7, r6
 8000d1a:	4298      	cmp	r0, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x11c>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x11a>
 8000d28:	4298      	cmp	r0, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2b4>
 8000d2e:	4626      	mov	r6, r4
 8000d30:	1a1c      	subs	r4, r3, r0
 8000d32:	fa1f f38e 	uxth.w	r3, lr
 8000d36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb00 f707 	mul.w	r7, r0, r7
 8000d46:	429f      	cmp	r7, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x148>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x146>
 8000d54:	429f      	cmp	r7, r3
 8000d56:	f200 80b0 	bhi.w	8000eba <__udivmoddi4+0x2a6>
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	1bdb      	subs	r3, r3, r7
 8000d5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x9c>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d74:	fa04 f301 	lsl.w	r3, r4, r1
 8000d78:	ea43 030c 	orr.w	r3, r3, ip
 8000d7c:	40f4      	lsrs	r4, r6
 8000d7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d82:	0c38      	lsrs	r0, r7, #16
 8000d84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d88:	fbb4 fef0 	udiv	lr, r4, r0
 8000d8c:	fa1f fc87 	uxth.w	ip, r7
 8000d90:	fb00 441e 	mls	r4, r0, lr, r4
 8000d94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d98:	fb0e f90c 	mul.w	r9, lr, ip
 8000d9c:	45a1      	cmp	r9, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d90a      	bls.n	8000dba <__udivmoddi4+0x1a6>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000daa:	f080 8084 	bcs.w	8000eb6 <__udivmoddi4+0x2a2>
 8000dae:	45a1      	cmp	r9, r4
 8000db0:	f240 8081 	bls.w	8000eb6 <__udivmoddi4+0x2a2>
 8000db4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	eba4 0409 	sub.w	r4, r4, r9
 8000dbe:	fa1f f983 	uxth.w	r9, r3
 8000dc2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dc6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dce:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d907      	bls.n	8000de6 <__udivmoddi4+0x1d2>
 8000dd6:	193c      	adds	r4, r7, r4
 8000dd8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ddc:	d267      	bcs.n	8000eae <__udivmoddi4+0x29a>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d965      	bls.n	8000eae <__udivmoddi4+0x29a>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dea:	fba0 9302 	umull	r9, r3, r0, r2
 8000dee:	eba4 040c 	sub.w	r4, r4, ip
 8000df2:	429c      	cmp	r4, r3
 8000df4:	46ce      	mov	lr, r9
 8000df6:	469c      	mov	ip, r3
 8000df8:	d351      	bcc.n	8000e9e <__udivmoddi4+0x28a>
 8000dfa:	d04e      	beq.n	8000e9a <__udivmoddi4+0x286>
 8000dfc:	b155      	cbz	r5, 8000e14 <__udivmoddi4+0x200>
 8000dfe:	ebb8 030e 	subs.w	r3, r8, lr
 8000e02:	eb64 040c 	sbc.w	r4, r4, ip
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	40cb      	lsrs	r3, r1
 8000e0c:	431e      	orrs	r6, r3
 8000e0e:	40cc      	lsrs	r4, r1
 8000e10:	e9c5 6400 	strd	r6, r4, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	e750      	b.n	8000cba <__udivmoddi4+0xa6>
 8000e18:	f1c2 0320 	rsb	r3, r2, #32
 8000e1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e24:	fa24 f303 	lsr.w	r3, r4, r3
 8000e28:	4094      	lsls	r4, r2
 8000e2a:	430c      	orrs	r4, r1
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e34:	fa1f f78c 	uxth.w	r7, ip
 8000e38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e40:	0c23      	lsrs	r3, r4, #16
 8000e42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e46:	fb00 f107 	mul.w	r1, r0, r7
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x24c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e56:	d22c      	bcs.n	8000eb2 <__udivmoddi4+0x29e>
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	d92a      	bls.n	8000eb2 <__udivmoddi4+0x29e>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4463      	add	r3, ip
 8000e60:	1a5b      	subs	r3, r3, r1
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e68:	fb08 3311 	mls	r3, r8, r1, r3
 8000e6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e70:	fb01 f307 	mul.w	r3, r1, r7
 8000e74:	42a3      	cmp	r3, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x276>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e80:	d213      	bcs.n	8000eaa <__udivmoddi4+0x296>
 8000e82:	42a3      	cmp	r3, r4
 8000e84:	d911      	bls.n	8000eaa <__udivmoddi4+0x296>
 8000e86:	3902      	subs	r1, #2
 8000e88:	4464      	add	r4, ip
 8000e8a:	1ae4      	subs	r4, r4, r3
 8000e8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e90:	e739      	b.n	8000d06 <__udivmoddi4+0xf2>
 8000e92:	4604      	mov	r4, r0
 8000e94:	e6f0      	b.n	8000c78 <__udivmoddi4+0x64>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e706      	b.n	8000ca8 <__udivmoddi4+0x94>
 8000e9a:	45c8      	cmp	r8, r9
 8000e9c:	d2ae      	bcs.n	8000dfc <__udivmoddi4+0x1e8>
 8000e9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ea6:	3801      	subs	r0, #1
 8000ea8:	e7a8      	b.n	8000dfc <__udivmoddi4+0x1e8>
 8000eaa:	4631      	mov	r1, r6
 8000eac:	e7ed      	b.n	8000e8a <__udivmoddi4+0x276>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	e799      	b.n	8000de6 <__udivmoddi4+0x1d2>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e7d4      	b.n	8000e60 <__udivmoddi4+0x24c>
 8000eb6:	46d6      	mov	lr, sl
 8000eb8:	e77f      	b.n	8000dba <__udivmoddi4+0x1a6>
 8000eba:	4463      	add	r3, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e74d      	b.n	8000d5c <__udivmoddi4+0x148>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	4608      	mov	r0, r1
 8000ec6:	e70f      	b.n	8000ce8 <__udivmoddi4+0xd4>
 8000ec8:	3e02      	subs	r6, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	e730      	b.n	8000d30 <__udivmoddi4+0x11c>
 8000ece:	bf00      	nop

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	0000      	movs	r0, r0
	...

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ede:	f001 fa1e 	bl	800231e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee2:	f000 f8ef 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee6:	f000 fbd1 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 8000eea:	f000 fb63 	bl	80015b4 <MX_DMA_Init>
  MX_DMA2D_Init();
 8000eee:	f000 f9cb 	bl	8001288 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ef2:	f000 fb7d 	bl	80015f0 <MX_FMC_Init>
  MX_LTDC_Init();
 8000ef6:	f000 f9f9 	bl	80012ec <MX_LTDC_Init>
  MX_TIM2_Init();
 8000efa:	f000 faa9 	bl	8001450 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000efe:	f000 fb29 	bl	8001554 <MX_USART1_UART_Init>
  MX_ADC3_Init();
 8000f02:	f000 f94d 	bl	80011a0 <MX_ADC3_Init>
  MX_CRC_Init();
 8000f06:	f000 f99d 	bl	8001244 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  CreateSinTable();
 8000f0a:	f000 fc93 	bl	8001834 <CreateSinTable>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	485d      	ldr	r0, [pc, #372]	@ (8001088 <main+0x1b0>)
 8000f12:	f004 faa7 	bl	8005464 <HAL_TIM_PWM_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if((uwTick % 2U) == 0U) //co 1ms
 8000f16:	4b5d      	ldr	r3, [pc, #372]	@ (800108c <main+0x1b4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d159      	bne.n	8000fd6 <main+0xfe>
	  	  {
	  	 	  tikTak1++;
 8000f22:	4b5b      	ldr	r3, [pc, #364]	@ (8001090 <main+0x1b8>)
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	3301      	adds	r3, #1
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b59      	ldr	r3, [pc, #356]	@ (8001090 <main+0x1b8>)
 8000f2c:	801a      	strh	r2, [r3, #0]
	  	 	  tikTak2++;
 8000f2e:	4b59      	ldr	r3, [pc, #356]	@ (8001094 <main+0x1bc>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	3301      	adds	r3, #1
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	4b57      	ldr	r3, [pc, #348]	@ (8001094 <main+0x1bc>)
 8000f38:	801a      	strh	r2, [r3, #0]
	  	 	  tikTak3++;
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <main+0x1c0>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b55      	ldr	r3, [pc, #340]	@ (8001098 <main+0x1c0>)
 8000f44:	801a      	strh	r2, [r3, #0]
	  	 	  tikTak4++;
 8000f46:	4b55      	ldr	r3, [pc, #340]	@ (800109c <main+0x1c4>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b53      	ldr	r3, [pc, #332]	@ (800109c <main+0x1c4>)
 8000f50:	801a      	strh	r2, [r3, #0]
	  	 	  uwTick = 1;
 8000f52:	4b4e      	ldr	r3, [pc, #312]	@ (800108c <main+0x1b4>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	601a      	str	r2, [r3, #0]

	  	 	  HAL_ADC_Start_IT(&hadc3);
 8000f58:	4851      	ldr	r0, [pc, #324]	@ (80010a0 <main+0x1c8>)
 8000f5a:	f001 fa81 	bl	8002460 <HAL_ADC_Start_IT>
	  	 	  //////// SREDNIA DO ZADANA 9 /////////
	  	 	  //adcAvg = 0;
	  	 	  float tmpAvg = 0;
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
	  	 	  for(int i=0; i<4; i++) {
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	e027      	b.n	8000fba <main+0xe2>
	  	 		  float tmp = dmaBuffor[i];
 8000f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80010a4 <main+0x1cc>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f72:	ee07 3a90 	vmov	s15, r3
 8000f76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f7a:	edc7 7a01 	vstr	s15, [r7, #4]
	  	 		 tmpAvg += tmp / 4095.0;
 8000f7e:	68f8      	ldr	r0, [r7, #12]
 8000f80:	f7ff faa6 	bl	80004d0 <__aeabi_f2d>
 8000f84:	4604      	mov	r4, r0
 8000f86:	460d      	mov	r5, r1
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff faa1 	bl	80004d0 <__aeabi_f2d>
 8000f8e:	a33c      	add	r3, pc, #240	@ (adr r3, 8001080 <main+0x1a8>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff fc1e 	bl	80007d4 <__aeabi_ddiv>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	f7ff f938 	bl	8000214 <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f7ff fdca 	bl	8000b44 <__aeabi_d2f>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60fb      	str	r3, [r7, #12]
	  	 	  for(int i=0; i<4; i++) {
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	ddd4      	ble.n	8000f6a <main+0x92>
	  	 	  }
	  	 	 tmpAvg /= 4U;
 8000fc0:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fc4:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8000fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fcc:	edc7 7a03 	vstr	s15, [r7, #12]
	  	 	 adcAvg = tmpAvg;
 8000fd0:	4a35      	ldr	r2, [pc, #212]	@ (80010a8 <main+0x1d0>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6013      	str	r3, [r2, #0]
	  	 	  ////////////////KONIEC SREDNIA //////////
	  	  }

	  	  if((tikTak1 % 11) == 0) //co 10ms sie zmienia
 8000fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <main+0x1b8>)
 8000fd8:	8819      	ldrh	r1, [r3, #0]
 8000fda:	4b34      	ldr	r3, [pc, #208]	@ (80010ac <main+0x1d4>)
 8000fdc:	fba3 2301 	umull	r2, r3, r3, r1
 8000fe0:	08da      	lsrs	r2, r3, #3
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	4413      	add	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	1acb      	subs	r3, r1, r3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <main+0x122>
	  	  {
	  		  //HAL_GPIO_TogglePin(GPIOB, LedH4_Pin);
	  		  tikTak1 = 1;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <main+0x1b8>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if((tikTak2 % 101U) == 0) // co 100ms
 8000ffa:	4b26      	ldr	r3, [pc, #152]	@ (8001094 <main+0x1bc>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80010b0 <main+0x1d8>)
 8001000:	fba2 1203 	umull	r1, r2, r2, r3
 8001004:	1a99      	subs	r1, r3, r2
 8001006:	0849      	lsrs	r1, r1, #1
 8001008:	440a      	add	r2, r1
 800100a:	0992      	lsrs	r2, r2, #6
 800100c:	2165      	movs	r1, #101	@ 0x65
 800100e:	fb01 f202 	mul.w	r2, r1, r2
 8001012:	1a9b      	subs	r3, r3, r2
 8001014:	b29b      	uxth	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <main+0x150>
	    	  {
	  		  HAL_GPIO_TogglePin(GPIOG, LedH5_Pin);
 800101a:	2180      	movs	r1, #128	@ 0x80
 800101c:	4825      	ldr	r0, [pc, #148]	@ (80010b4 <main+0x1dc>)
 800101e:	f002 fcd6 	bl	80039ce <HAL_GPIO_TogglePin>
	  		  tikTak2 = 1;
 8001022:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <main+0x1bc>)
 8001024:	2201      	movs	r2, #1
 8001026:	801a      	strh	r2, [r3, #0]
//
//
//	  		  BSP_TS_ResetTouchData(&ts);

	  	  }
	  	  if((tikTak3 % 1001U) == 0U) //co 1000ms (1s)
 8001028:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <main+0x1c0>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	4a22      	ldr	r2, [pc, #136]	@ (80010b8 <main+0x1e0>)
 800102e:	fba2 1203 	umull	r1, r2, r2, r3
 8001032:	1a99      	subs	r1, r3, r2
 8001034:	0849      	lsrs	r1, r1, #1
 8001036:	440a      	add	r2, r1
 8001038:	0a52      	lsrs	r2, r2, #9
 800103a:	f240 31e9 	movw	r1, #1001	@ 0x3e9
 800103e:	fb01 f202 	mul.w	r2, r1, r2
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	2b00      	cmp	r3, #0
 8001048:	d106      	bne.n	8001058 <main+0x180>
	  	  {
	  	  	  HAL_GPIO_TogglePin(LedH6_GPIO_Port, LedH6_Pin);
 800104a:	2104      	movs	r1, #4
 800104c:	481b      	ldr	r0, [pc, #108]	@ (80010bc <main+0x1e4>)
 800104e:	f002 fcbe 	bl	80039ce <HAL_GPIO_TogglePin>
	  	  	  tikTak3 = 1;
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <main+0x1c0>)
 8001054:	2201      	movs	r2, #1
 8001056:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  if((tikTak4 % 10001U) == 0U) //co 10 000ms
 8001058:	4b10      	ldr	r3, [pc, #64]	@ (800109c <main+0x1c4>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	4a18      	ldr	r2, [pc, #96]	@ (80010c0 <main+0x1e8>)
 800105e:	fba2 1203 	umull	r1, r2, r2, r3
 8001062:	0b52      	lsrs	r2, r2, #13
 8001064:	f242 7111 	movw	r1, #10001	@ 0x2711
 8001068:	fb01 f202 	mul.w	r2, r1, r2
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	b29b      	uxth	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f af50 	bne.w	8000f16 <main+0x3e>
	  	  {
	  	   	  tikTak4 = 1;
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <main+0x1c4>)
 8001078:	2201      	movs	r2, #1
 800107a:	801a      	strh	r2, [r3, #0]
	  if((uwTick % 2U) == 0U) //co 1ms
 800107c:	e74b      	b.n	8000f16 <main+0x3e>
 800107e:	bf00      	nop
 8001080:	00000000 	.word	0x00000000
 8001084:	40affe00 	.word	0x40affe00
 8001088:	200001e8 	.word	0x200001e8
 800108c:	20000624 	.word	0x20000624
 8001090:	20000000 	.word	0x20000000
 8001094:	20000002 	.word	0x20000002
 8001098:	20000004 	.word	0x20000004
 800109c:	20000006 	.word	0x20000006
 80010a0:	20000034 	.word	0x20000034
 80010a4:	200002f0 	.word	0x200002f0
 80010a8:	200002f8 	.word	0x200002f8
 80010ac:	ba2e8ba3 	.word	0xba2e8ba3
 80010b0:	446f8657 	.word	0x446f8657
 80010b4:	40021800 	.word	0x40021800
 80010b8:	05e1d27b 	.word	0x05e1d27b
 80010bc:	40022000 	.word	0x40022000
 80010c0:	d1b1b919 	.word	0xd1b1b919

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	@ 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	@ 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 ffce 	bl	8007074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010e8:	f002 fff6 	bl	80040d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001198 <SystemClock_Config+0xd4>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f0:	4a29      	ldr	r2, [pc, #164]	@ (8001198 <SystemClock_Config+0xd4>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f8:	4b27      	ldr	r3, [pc, #156]	@ (8001198 <SystemClock_Config+0xd4>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	4b25      	ldr	r3, [pc, #148]	@ (800119c <SystemClock_Config+0xd8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a24      	ldr	r2, [pc, #144]	@ (800119c <SystemClock_Config+0xd8>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b22      	ldr	r3, [pc, #136]	@ (800119c <SystemClock_Config+0xd8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800111c:	2301      	movs	r3, #1
 800111e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001120:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001126:	2302      	movs	r3, #2
 8001128:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800112e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001130:	230c      	movs	r3, #12
 8001132:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001134:	23c0      	movs	r3, #192	@ 0xc0
 8001136:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001138:	2302      	movs	r3, #2
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	4618      	mov	r0, r3
 8001146:	f003 f827 	bl	8004198 <HAL_RCC_OscConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001150:	f000 fbd6 	bl	8001900 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001154:	f002 ffd0 	bl	80040f8 <HAL_PWREx_EnableOverDrive>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800115e:	f000 fbcf 	bl	8001900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001162:	230f      	movs	r3, #15
 8001164:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001166:	2302      	movs	r3, #2
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800116e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001172:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001174:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2106      	movs	r1, #6
 8001180:	4618      	mov	r0, r3
 8001182:	f003 faad 	bl	80046e0 <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800118c:	f000 fbb8 	bl	8001900 <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3750      	adds	r7, #80	@ 0x50
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40023800 	.word	0x40023800
 800119c:	40007000 	.word	0x40007000

080011a0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	@ (800123c <MX_ADC3_Init+0x9c>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011be:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011e2:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <MX_ADC3_Init+0xa0>)
 80011e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_ADC3_Init+0x98>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001200:	480d      	ldr	r0, [pc, #52]	@ (8001238 <MX_ADC3_Init+0x98>)
 8001202:	f001 f8e9 	bl	80023d8 <HAL_ADC_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 fb78 	bl	8001900 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001210:	2308      	movs	r3, #8
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2301      	movs	r3, #1
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_ADC3_Init+0x98>)
 8001222:	f001 f9f5 	bl	8002610 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800122c:	f000 fb68 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000034 	.word	0x20000034
 800123c:	40012200 	.word	0x40012200
 8001240:	0f000001 	.word	0x0f000001

08001244 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001248:	4b0d      	ldr	r3, [pc, #52]	@ (8001280 <MX_CRC_Init+0x3c>)
 800124a:	4a0e      	ldr	r2, [pc, #56]	@ (8001284 <MX_CRC_Init+0x40>)
 800124c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800124e:	4b0c      	ldr	r3, [pc, #48]	@ (8001280 <MX_CRC_Init+0x3c>)
 8001250:	2200      	movs	r2, #0
 8001252:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <MX_CRC_Init+0x3c>)
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <MX_CRC_Init+0x3c>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	@ (8001280 <MX_CRC_Init+0x3c>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <MX_CRC_Init+0x3c>)
 8001268:	2201      	movs	r2, #1
 800126a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	@ (8001280 <MX_CRC_Init+0x3c>)
 800126e:	f001 fd31 	bl	8002cd4 <HAL_CRC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001278:	f000 fb42 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200000dc 	.word	0x200000dc
 8001284:	40023000 	.word	0x40023000

08001288 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 800128e:	4a16      	ldr	r2, [pc, #88]	@ (80012e8 <MX_DMA2D_Init+0x60>)
 8001290:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012be:	f002 f8e5 	bl	800348c <HAL_DMA2D_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80012c8:	f000 fb1a 	bl	8001900 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80012cc:	2101      	movs	r1, #1
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_DMA2D_Init+0x5c>)
 80012d0:	f002 f926 	bl	8003520 <HAL_DMA2D_ConfigLayer>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80012da:	f000 fb11 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000100 	.word	0x20000100
 80012e8:	4002b000 	.word	0x4002b000

080012ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09a      	sub	sp, #104	@ 0x68
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80012f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012f6:	2234      	movs	r2, #52	@ 0x34
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f005 feba 	bl	8007074 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001300:	463b      	mov	r3, r7
 8001302:	2234      	movs	r2, #52	@ 0x34
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f005 feb4 	bl	8007074 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800130c:	4b4e      	ldr	r3, [pc, #312]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800130e:	4a4f      	ldr	r2, [pc, #316]	@ (800144c <MX_LTDC_Init+0x160>)
 8001310:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001312:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001314:	2200      	movs	r2, #0
 8001316:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001318:	4b4b      	ldr	r3, [pc, #300]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800131e:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001324:	4b48      	ldr	r3, [pc, #288]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001326:	2200      	movs	r2, #0
 8001328:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800132c:	2207      	movs	r2, #7
 800132e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001330:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001332:	2203      	movs	r2, #3
 8001334:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001336:	4b44      	ldr	r3, [pc, #272]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001338:	220e      	movs	r2, #14
 800133a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800133c:	4b42      	ldr	r3, [pc, #264]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800133e:	2205      	movs	r2, #5
 8001340:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001342:	4b41      	ldr	r3, [pc, #260]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001344:	f240 228e 	movw	r2, #654	@ 0x28e
 8001348:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800134a:	4b3f      	ldr	r3, [pc, #252]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800134c:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001352:	4b3d      	ldr	r3, [pc, #244]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001354:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800135a:	4b3b      	ldr	r3, [pc, #236]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800135c:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001360:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001362:	4b39      	ldr	r3, [pc, #228]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800136a:	4b37      	ldr	r3, [pc, #220]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001372:	4b35      	ldr	r3, [pc, #212]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800137a:	4833      	ldr	r0, [pc, #204]	@ (8001448 <MX_LTDC_Init+0x15c>)
 800137c:	f002 fb42 	bl	8003a04 <HAL_LTDC_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001386:	f000 fabb 	bl	8001900 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800138a:	2300      	movs	r3, #0
 800138c:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800139a:	2300      	movs	r3, #0
 800139c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013aa:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013ac:	2305      	movs	r3, #5
 80013ae:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013d2:	2200      	movs	r2, #0
 80013d4:	4619      	mov	r1, r3
 80013d6:	481c      	ldr	r0, [pc, #112]	@ (8001448 <MX_LTDC_Init+0x15c>)
 80013d8:	f002 fca6 	bl	8003d28 <HAL_LTDC_ConfigLayer>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80013e2:	f000 fa8d 	bl	8001900 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013f6:	2300      	movs	r3, #0
 80013f8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001406:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001408:	2305      	movs	r3, #5
 800140a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800142a:	463b      	mov	r3, r7
 800142c:	2201      	movs	r2, #1
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <MX_LTDC_Init+0x15c>)
 8001432:	f002 fc79 	bl	8003d28 <HAL_LTDC_ConfigLayer>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800143c:	f000 fa60 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3768      	adds	r7, #104	@ 0x68
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000140 	.word	0x20000140
 800144c:	40016800 	.word	0x40016800

08001450 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	@ 0x40
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
 8001480:	615a      	str	r2, [r3, #20]
 8001482:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001484:	4b32      	ldr	r3, [pc, #200]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800148a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148c:	4b30      	ldr	r3, [pc, #192]	@ (8001550 <MX_TIM2_Init+0x100>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001492:	4b2f      	ldr	r3, [pc, #188]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001494:	2220      	movs	r2, #32
 8001496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8001498:	4b2d      	ldr	r3, [pc, #180]	@ (8001550 <MX_TIM2_Init+0x100>)
 800149a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014a8:	2280      	movs	r2, #128	@ 0x80
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014ac:	4828      	ldr	r0, [pc, #160]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014ae:	f003 ff21 	bl	80052f4 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80014b8:	f000 fa22 	bl	8001900 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014bc:	4824      	ldr	r0, [pc, #144]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014be:	f003 ff70 	bl	80053a2 <HAL_TIM_PWM_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f000 fa1a 	bl	8001900 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80014d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d8:	4619      	mov	r1, r3
 80014da:	481d      	ldr	r0, [pc, #116]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014dc:	f004 fb26 	bl	8005b2c <HAL_TIM_SlaveConfigSynchro>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014e6:	f000 fa0b 	bl	8001900 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	f107 0320 	add.w	r3, r7, #32
 80014f6:	4619      	mov	r1, r3
 80014f8:	4815      	ldr	r0, [pc, #84]	@ (8001550 <MX_TIM2_Init+0x100>)
 80014fa:	f004 ffcd 	bl	8006498 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001504:	f000 f9fc 	bl	8001900 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001508:	2360      	movs	r3, #96	@ 0x60
 800150a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800150c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	480b      	ldr	r0, [pc, #44]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001522:	f004 f9ef 	bl	8005904 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 800152c:	f000 f9e8 	bl	8001900 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8001530:	4b07      	ldr	r3, [pc, #28]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	699a      	ldr	r2, [r3, #24]
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001540:	4803      	ldr	r0, [pc, #12]	@ (8001550 <MX_TIM2_Init+0x100>)
 8001542:	f000 fca3 	bl	8001e8c <HAL_TIM_MspPostInit>

}
 8001546:	bf00      	nop
 8001548:	3740      	adds	r7, #64	@ 0x40
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200001e8 	.word	0x200001e8

08001554 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001558:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 800155a:	4a15      	ldr	r2, [pc, #84]	@ (80015b0 <MX_USART1_UART_Init+0x5c>)
 800155c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800155e:	4b13      	ldr	r3, [pc, #76]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001560:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001564:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 800157a:	220c      	movs	r2, #12
 800157c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157e:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158a:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 800158c:	2200      	movs	r2, #0
 800158e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <MX_USART1_UART_Init+0x58>)
 8001598:	f005 f82a 	bl	80065f0 <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015a2:	f000 f9ad 	bl	8001900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000234 	.word	0x20000234
 80015b0:	40011000 	.word	0x40011000

080015b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_DMA_Init+0x38>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <MX_DMA_Init+0x38>)
 80015c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_DMA_Init+0x38>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2038      	movs	r0, #56	@ 0x38
 80015d8:	f001 fb45 	bl	8002c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015dc:	2038      	movs	r0, #56	@ 0x38
 80015de:	f001 fb5e 	bl	8002c9e <HAL_NVIC_EnableIRQ>

}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800

080015f0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
 8001604:	615a      	str	r2, [r3, #20]
 8001606:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <MX_FMC_Init+0x94>)
 800160a:	4a1f      	ldr	r2, [pc, #124]	@ (8001688 <MX_FMC_Init+0x98>)
 800160c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <MX_FMC_Init+0x94>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001614:	4b1b      	ldr	r3, [pc, #108]	@ (8001684 <MX_FMC_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <MX_FMC_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001620:	4b18      	ldr	r3, [pc, #96]	@ (8001684 <MX_FMC_Init+0x94>)
 8001622:	2210      	movs	r2, #16
 8001624:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <MX_FMC_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800162c:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <MX_FMC_Init+0x94>)
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001632:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <MX_FMC_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001638:	4b12      	ldr	r3, [pc, #72]	@ (8001684 <MX_FMC_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800163e:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <MX_FMC_Init+0x94>)
 8001640:	2200      	movs	r2, #0
 8001642:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001644:	4b0f      	ldr	r3, [pc, #60]	@ (8001684 <MX_FMC_Init+0x94>)
 8001646:	2200      	movs	r2, #0
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800164a:	2310      	movs	r3, #16
 800164c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800164e:	2310      	movs	r3, #16
 8001650:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001652:	2310      	movs	r3, #16
 8001654:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001656:	2310      	movs	r3, #16
 8001658:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800165a:	2310      	movs	r3, #16
 800165c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800165e:	2310      	movs	r3, #16
 8001660:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001662:	2310      	movs	r3, #16
 8001664:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4806      	ldr	r0, [pc, #24]	@ (8001684 <MX_FMC_Init+0x94>)
 800166c:	f003 fe0e 	bl	800528c <HAL_SDRAM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001676:	f000 f943 	bl	8001900 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800167a:	bf00      	nop
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200002bc 	.word	0x200002bc
 8001688:	a0000140 	.word	0xa0000140

0800168c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b090      	sub	sp, #64	@ 0x40
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016a2:	4b60      	ldr	r3, [pc, #384]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016a8:	f043 0310 	orr.w	r3, r3, #16
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a59      	ldr	r2, [pc, #356]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b57      	ldr	r3, [pc, #348]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b54      	ldr	r3, [pc, #336]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a53      	ldr	r2, [pc, #332]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b51      	ldr	r3, [pc, #324]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f6:	4b4b      	ldr	r3, [pc, #300]	@ (8001824 <MX_GPIO_Init+0x198>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001702:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a47      	ldr	r2, [pc, #284]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	4b42      	ldr	r3, [pc, #264]	@ (8001824 <MX_GPIO_Init+0x198>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a41      	ldr	r2, [pc, #260]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b3f      	ldr	r3, [pc, #252]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001732:	4b3c      	ldr	r3, [pc, #240]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a3b      	ldr	r2, [pc, #236]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800174a:	4b36      	ldr	r3, [pc, #216]	@ (8001824 <MX_GPIO_Init+0x198>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a35      	ldr	r2, [pc, #212]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b33      	ldr	r3, [pc, #204]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001762:	4b30      	ldr	r3, [pc, #192]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a2f      	ldr	r2, [pc, #188]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001768:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <MX_GPIO_Init+0x198>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a29      	ldr	r2, [pc, #164]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001780:	f043 0320 	orr.w	r3, r3, #32
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0320 	and.w	r3, r3, #32
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	4b24      	ldr	r3, [pc, #144]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <MX_GPIO_Init+0x198>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b21      	ldr	r3, [pc, #132]	@ (8001824 <MX_GPIO_Init+0x198>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH4_GPIO_Port, LedH4_Pin, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2110      	movs	r1, #16
 80017ae:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_GPIO_Init+0x19c>)
 80017b0:	f002 f8f4 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH6_GPIO_Port, LedH6_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2104      	movs	r1, #4
 80017b8:	481c      	ldr	r0, [pc, #112]	@ (800182c <MX_GPIO_Init+0x1a0>)
 80017ba:	f002 f8ef 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LedH5_GPIO_Port, LedH5_Pin, GPIO_PIN_RESET);
 80017be:	2200      	movs	r2, #0
 80017c0:	2180      	movs	r1, #128	@ 0x80
 80017c2:	481b      	ldr	r0, [pc, #108]	@ (8001830 <MX_GPIO_Init+0x1a4>)
 80017c4:	f002 f8ea 	bl	800399c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LedH4_Pin */
  GPIO_InitStruct.Pin = LedH4_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017cc:	2301      	movs	r3, #1
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH4_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017dc:	4619      	mov	r1, r3
 80017de:	4812      	ldr	r0, [pc, #72]	@ (8001828 <MX_GPIO_Init+0x19c>)
 80017e0:	f001 ff30 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedH6_Pin */
  GPIO_InitStruct.Pin = LedH6_Pin;
 80017e4:	2304      	movs	r3, #4
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ec:	2302      	movs	r3, #2
 80017ee:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH6_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017f8:	4619      	mov	r1, r3
 80017fa:	480c      	ldr	r0, [pc, #48]	@ (800182c <MX_GPIO_Init+0x1a0>)
 80017fc:	f001 ff22 	bl	8003644 <HAL_GPIO_Init>

  /*Configure GPIO pin : LedH5_Pin */
  GPIO_InitStruct.Pin = LedH5_Pin;
 8001800:	2380      	movs	r3, #128	@ 0x80
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001808:	2302      	movs	r3, #2
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LedH5_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001814:	4619      	mov	r1, r3
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <MX_GPIO_Init+0x1a4>)
 8001818:	f001 ff14 	bl	8003644 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181c:	bf00      	nop
 800181e:	3740      	adds	r7, #64	@ 0x40
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	40020400 	.word	0x40020400
 800182c:	40022000 	.word	0x40022000
 8001830:	40021800 	.word	0x40021800

08001834 <CreateSinTable>:

/* USER CODE BEGIN 4 */
static void CreateSinTable()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	float tmp = 6.28 / 200;
 800183a:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <CreateSinTable+0xbc>)
 800183c:	603b      	str	r3, [r7, #0]
	int i = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
	for(i = 0; i < 200; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	e04a      	b.n	80018de <CreateSinTable+0xaa>
	{
		sinTable[i] = 990 * (sin(tmp * i) + 1);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ee07 3a90 	vmov	s15, r3
 800184e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001852:	edd7 7a00 	vldr	s15, [r7]
 8001856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe37 	bl	80004d0 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b10 	vmov	d0, r2, r3
 800186a:	f005 fc31 	bl	80070d0 <sin>
 800186e:	ec51 0b10 	vmov	r0, r1, d0
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b1f      	ldr	r3, [pc, #124]	@ (80018f4 <CreateSinTable+0xc0>)
 8001878:	f7fe fccc 	bl	8000214 <__adddf3>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <CreateSinTable+0xc4>)
 800188a:	f7fe fe79 	bl	8000580 <__aeabi_dmul>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	f7ff f935 	bl	8000b04 <__aeabi_d2uiz>
 800189a:	4602      	mov	r2, r0
 800189c:	4917      	ldr	r1, [pc, #92]	@ (80018fc <CreateSinTable+0xc8>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		if(sinTable[i] > PWM_MAX_VALUE) { sinTable[i] = PWM_MAX_VALUE; }
 80018a4:	4a15      	ldr	r2, [pc, #84]	@ (80018fc <CreateSinTable+0xc8>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ac:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d906      	bls.n	80018c2 <CreateSinTable+0x8e>
 80018b4:	4a11      	ldr	r2, [pc, #68]	@ (80018fc <CreateSinTable+0xc8>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f240 71c6 	movw	r1, #1990	@ 0x7c6
 80018bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80018c0:	e00a      	b.n	80018d8 <CreateSinTable+0xa4>
		else if (sinTable[i] < PWM_MIN_VALUE) { sinTable[i] = PWM_MIN_VALUE; }
 80018c2:	4a0e      	ldr	r2, [pc, #56]	@ (80018fc <CreateSinTable+0xc8>)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	2b09      	cmp	r3, #9
 80018cc:	d804      	bhi.n	80018d8 <CreateSinTable+0xa4>
 80018ce:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <CreateSinTable+0xc8>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	210a      	movs	r1, #10
 80018d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(i = 0; i < 200; i++)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3301      	adds	r3, #1
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80018e2:	ddb1      	ble.n	8001848 <CreateSinTable+0x14>
	}
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	3d009d49 	.word	0x3d009d49
 80018f4:	3ff00000 	.word	0x3ff00000
 80018f8:	408ef000 	.word	0x408ef000
 80018fc:	20000300 	.word	0x20000300

08001900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001904:	b672      	cpsid	i
}
 8001906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <Error_Handler+0x8>

0800190c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_MspInit+0x44>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	4a0e      	ldr	r2, [pc, #56]	@ (8001950 <HAL_MspInit+0x44>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40
 800191e:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <HAL_MspInit+0x44>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192a:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <HAL_MspInit+0x44>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192e:	4a08      	ldr	r2, [pc, #32]	@ (8001950 <HAL_MspInit+0x44>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001934:	6453      	str	r3, [r2, #68]	@ 0x44
 8001936:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <HAL_MspInit+0x44>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40023800 	.word	0x40023800

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <HAL_ADC_MspInit+0xd8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d155      	bne.n	8001a22 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 800197c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001980:	6453      	str	r3, [r2, #68]	@ 0x44
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_ADC_MspInit+0xdc>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ac:	2303      	movs	r3, #3
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	481e      	ldr	r0, [pc, #120]	@ (8001a34 <HAL_ADC_MspInit+0xe0>)
 80019bc:	f001 fe42 	bl	8003644 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019c2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_ADC_MspInit+0xe8>)
 80019c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019c8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019cc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80019da:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019e2:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019e8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ea:	4b13      	ldr	r3, [pc, #76]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80019f2:	4b11      	ldr	r3, [pc, #68]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a00:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001a06:	480c      	ldr	r0, [pc, #48]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 8001a08:	f001 fa56 	bl	8002eb8 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8001a12:	f7ff ff75 	bl	8001900 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a07      	ldr	r2, [pc, #28]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 8001a1a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a1c:	4a06      	ldr	r2, [pc, #24]	@ (8001a38 <HAL_ADC_MspInit+0xe4>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3728      	adds	r7, #40	@ 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40012200 	.word	0x40012200
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021400 	.word	0x40021400
 8001a38:	2000007c 	.word	0x2000007c
 8001a3c:	40026410 	.word	0x40026410

08001a40 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <HAL_CRC_MspInit+0x38>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	@ (8001a7c <HAL_CRC_MspInit+0x3c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a09      	ldr	r2, [pc, #36]	@ (8001a7c <HAL_CRC_MspInit+0x3c>)
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b07      	ldr	r3, [pc, #28]	@ (8001a7c <HAL_CRC_MspInit+0x3c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023000 	.word	0x40023000
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ab8 <HAL_DMA2D_MspInit+0x38>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10b      	bne.n	8001aaa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_DMA2D_MspInit+0x3c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <HAL_DMA2D_MspInit+0x3c>)
 8001a98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <HAL_DMA2D_MspInit+0x3c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	4002b000 	.word	0x4002b000
 8001abc:	40023800 	.word	0x40023800

08001ac0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b0b4      	sub	sp, #208	@ 0xd0
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001adc:	2284      	movs	r2, #132	@ 0x84
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f005 fac7 	bl	8007074 <memset>
  if(hltdc->Instance==LTDC)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4ac6      	ldr	r2, [pc, #792]	@ (8001e04 <HAL_LTDC_MspInit+0x344>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f040 81a2 	bne.w	8001e36 <HAL_LTDC_MspInit+0x376>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001af2:	2308      	movs	r3, #8
 8001af4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001af6:	2332      	movs	r3, #50	@ 0x32
 8001af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001afe:	2302      	movs	r3, #2
 8001b00:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001b02:	2300      	movs	r3, #0
 8001b04:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b06:	2301      	movs	r3, #1
 8001b08:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b12:	4618      	mov	r0, r3
 8001b14:	f002 ffca 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_LTDC_MspInit+0x62>
    {
      Error_Handler();
 8001b1e:	f7ff feef 	bl	8001900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b22:	4bb9      	ldr	r3, [pc, #740]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	4ab8      	ldr	r2, [pc, #736]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b28:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b2e:	4bb6      	ldr	r3, [pc, #728]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b3a:	4bb3      	ldr	r3, [pc, #716]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4ab2      	ldr	r2, [pc, #712]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b40:	f043 0310 	orr.w	r3, r3, #16
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4bb0      	ldr	r3, [pc, #704]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	4bad      	ldr	r3, [pc, #692]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4aac      	ldr	r2, [pc, #688]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4baa      	ldr	r3, [pc, #680]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	4ba7      	ldr	r3, [pc, #668]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4aa6      	ldr	r2, [pc, #664]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4ba4      	ldr	r3, [pc, #656]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b82:	4ba1      	ldr	r3, [pc, #644]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4aa0      	ldr	r2, [pc, #640]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b9e      	ldr	r3, [pc, #632]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	4b9b      	ldr	r3, [pc, #620]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a9a      	ldr	r2, [pc, #616]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001ba0:	f043 0308 	orr.w	r3, r3, #8
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b98      	ldr	r3, [pc, #608]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	623b      	str	r3, [r7, #32]
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	4b95      	ldr	r3, [pc, #596]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a94      	ldr	r2, [pc, #592]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b92      	ldr	r3, [pc, #584]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bca:	4b8f      	ldr	r3, [pc, #572]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	4a8e      	ldr	r2, [pc, #568]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001be2:	4b89      	ldr	r3, [pc, #548]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be6:	4a88      	ldr	r2, [pc, #544]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bee:	4b86      	ldr	r3, [pc, #536]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001bfa:	4b83      	ldr	r3, [pc, #524]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a82      	ldr	r2, [pc, #520]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001c00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b80      	ldr	r3, [pc, #512]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0e:	613b      	str	r3, [r7, #16]
 8001c10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c12:	4b7d      	ldr	r3, [pc, #500]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a7c      	ldr	r2, [pc, #496]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e08 <HAL_LTDC_MspInit+0x348>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    PI14     ------> LTDC_CLK
    PH3     ------> LTDC_R1
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c2a:	2370      	movs	r3, #112	@ 0x70
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c42:	230e      	movs	r3, #14
 8001c44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c48:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	486f      	ldr	r0, [pc, #444]	@ (8001e0c <HAL_LTDC_MspInit+0x34c>)
 8001c50:	f001 fcf8 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c6e:	230e      	movs	r3, #14
 8001c70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c74:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4865      	ldr	r0, [pc, #404]	@ (8001e10 <HAL_LTDC_MspInit+0x350>)
 8001c7c:	f001 fce2 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_6;
 8001c80:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8001c84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c9a:	230e      	movs	r3, #14
 8001c9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485b      	ldr	r0, [pc, #364]	@ (8001e14 <HAL_LTDC_MspInit+0x354>)
 8001ca8:	f001 fccc 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ccc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4851      	ldr	r0, [pc, #324]	@ (8001e18 <HAL_LTDC_MspInit+0x358>)
 8001cd4:	f001 fcb6 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_3;
 8001cd8:	2348      	movs	r3, #72	@ 0x48
 8001cda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cf0:	230e      	movs	r3, #14
 8001cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cf6:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4847      	ldr	r0, [pc, #284]	@ (8001e1c <HAL_LTDC_MspInit+0x35c>)
 8001cfe:	f001 fca1 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d1c:	230e      	movs	r3, #14
 8001d1e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d22:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001d26:	4619      	mov	r1, r3
 8001d28:	483d      	ldr	r0, [pc, #244]	@ (8001e20 <HAL_LTDC_MspInit+0x360>)
 8001d2a:	f001 fc8b 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8001d2e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001d32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d48:	230e      	movs	r3, #14
 8001d4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001d52:	4619      	mov	r1, r3
 8001d54:	4833      	ldr	r0, [pc, #204]	@ (8001e24 <HAL_LTDC_MspInit+0x364>)
 8001d56:	f001 fc75 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8001d5a:	f244 6333 	movw	r3, #17971	@ 0x4633
 8001d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d74:	230e      	movs	r3, #14
 8001d76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d7a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4829      	ldr	r0, [pc, #164]	@ (8001e28 <HAL_LTDC_MspInit+0x368>)
 8001d82:	f001 fc5f 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d86:	2380      	movs	r3, #128	@ 0x80
 8001d88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d9e:	230e      	movs	r3, #14
 8001da0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001da4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001da8:	4619      	mov	r1, r3
 8001daa:	4820      	ldr	r0, [pc, #128]	@ (8001e2c <HAL_LTDC_MspInit+0x36c>)
 8001dac:	f001 fc4a 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001dca:	2309      	movs	r3, #9
 8001dcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dd0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480f      	ldr	r0, [pc, #60]	@ (8001e14 <HAL_LTDC_MspInit+0x354>)
 8001dd8:	f001 fc34 	bl	8003644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_9;
 8001ddc:	f24a 2308 	movw	r3, #41480	@ 0xa208
 8001de0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df6:	230e      	movs	r3, #14
 8001df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001dfc:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001e00:	4619      	mov	r1, r3
 8001e02:	e015      	b.n	8001e30 <HAL_LTDC_MspInit+0x370>
 8001e04:	40016800 	.word	0x40016800
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40021800 	.word	0x40021800
 8001e18:	40022400 	.word	0x40022400
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020000 	.word	0x40020000
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022800 	.word	0x40022800
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <HAL_LTDC_MspInit+0x380>)
 8001e32:	f001 fc07 	bl	8003644 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	37d0      	adds	r7, #208	@ 0xd0
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40021c00 	.word	0x40021c00

08001e44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e54:	d113      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e56:	4b0c      	ldr	r3, [pc, #48]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e62:	4b09      	ldr	r3, [pc, #36]	@ (8001e88 <HAL_TIM_Base_MspInit+0x44>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	201c      	movs	r0, #28
 8001e74:	f000 fef7 	bl	8002c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e78:	201c      	movs	r0, #28
 8001e7a:	f000 ff10 	bl	8002c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800

08001e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eac:	d11c      	bne.n	8001ee8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_TIM_MspPostInit+0x64>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_TIM_MspPostInit+0x64>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_TIM_MspPostInit+0x64>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4804      	ldr	r0, [pc, #16]	@ (8001ef4 <HAL_TIM_MspPostInit+0x68>)
 8001ee4:	f001 fbae 	bl	8003644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ee8:	bf00      	nop
 8001eea:	3720      	adds	r7, #32
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40020000 	.word	0x40020000

08001ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0aa      	sub	sp, #168	@ 0xa8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	2284      	movs	r2, #132	@ 0x84
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f005 f8ab 	bl	8007074 <memset>
  if(huart->Instance==USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a21      	ldr	r2, [pc, #132]	@ (8001fa8 <HAL_UART_MspInit+0xb0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d13a      	bne.n	8001f9e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f28:	2340      	movs	r3, #64	@ 0x40
 8001f2a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	4618      	mov	r0, r3
 8001f36:	f002 fdb9 	bl	8004aac <HAL_RCCEx_PeriphCLKConfig>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f40:	f7ff fcde 	bl	8001900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	4a18      	ldr	r2, [pc, #96]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f4a:	f043 0310 	orr.w	r3, r3, #16
 8001f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f50:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5c:	4b13      	ldr	r3, [pc, #76]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	4a12      	ldr	r2, [pc, #72]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_UART_MspInit+0xb4>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001f74:	23c0      	movs	r3, #192	@ 0xc0
 8001f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f8c:	2307      	movs	r3, #7
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f92:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	@ (8001fb0 <HAL_UART_MspInit+0xb8>)
 8001f9a:	f001 fb53 	bl	8003644 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	37a8      	adds	r7, #168	@ 0xa8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020400 	.word	0x40020400

08001fb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80020b4 <HAL_FMC_MspInit+0x100>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d16d      	bne.n	80020ac <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001fd0:	4b38      	ldr	r3, [pc, #224]	@ (80020b4 <HAL_FMC_MspInit+0x100>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fd6:	4b38      	ldr	r3, [pc, #224]	@ (80020b8 <HAL_FMC_MspInit+0x104>)
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fda:	4a37      	ldr	r2, [pc, #220]	@ (80020b8 <HAL_FMC_MspInit+0x104>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fe2:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <HAL_FMC_MspInit+0x104>)
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_0|GPIO_PIN_4;
 8001fee:	f248 1311 	movw	r3, #33041	@ 0x8111
 8001ff2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002000:	230c      	movs	r3, #12
 8002002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	482c      	ldr	r0, [pc, #176]	@ (80020bc <HAL_FMC_MspInit+0x108>)
 800200a:	f001 fb1b 	bl	8003644 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800200e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002012:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002020:	230c      	movs	r3, #12
 8002022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4825      	ldr	r0, [pc, #148]	@ (80020c0 <HAL_FMC_MspInit+0x10c>)
 800202a:	f001 fb0b 	bl	8003644 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800202e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002032:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002040:	230c      	movs	r3, #12
 8002042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	481e      	ldr	r0, [pc, #120]	@ (80020c4 <HAL_FMC_MspInit+0x110>)
 800204a:	f001 fafb 	bl	8003644 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2;
 800204e:	2324      	movs	r3, #36	@ 0x24
 8002050:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800205e:	230c      	movs	r3, #12
 8002060:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4818      	ldr	r0, [pc, #96]	@ (80020c8 <HAL_FMC_MspInit+0x114>)
 8002068:	f001 faec 	bl	8003644 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800206c:	2304      	movs	r3, #4
 800206e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002070:	2302      	movs	r3, #2
 8002072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800207c:	230c      	movs	r3, #12
 800207e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4811      	ldr	r0, [pc, #68]	@ (80020cc <HAL_FMC_MspInit+0x118>)
 8002086:	f001 fadd 	bl	8003644 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 800208a:	f64f 7380 	movw	r3, #65408	@ 0xff80
 800208e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800209c:	230c      	movs	r3, #12
 800209e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	4619      	mov	r1, r3
 80020a4:	480a      	ldr	r0, [pc, #40]	@ (80020d0 <HAL_FMC_MspInit+0x11c>)
 80020a6:	f001 facd 	bl	8003644 <HAL_GPIO_Init>
 80020aa:	e000      	b.n	80020ae <HAL_FMC_MspInit+0xfa>
    return;
 80020ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000620 	.word	0x20000620
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40021800 	.word	0x40021800
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	40021400 	.word	0x40021400
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40020800 	.word	0x40020800
 80020d0:	40021000 	.word	0x40021000

080020d4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80020dc:	f7ff ff6a 	bl	8001fb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <NMI_Handler+0x4>

080020f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <HardFault_Handler+0x4>

080020f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <MemManage_Handler+0x4>

08002100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <UsageFault_Handler+0x4>

08002110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213e:	f000 f92b 	bl	8002398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	uint32_t tmpPulse;
	if(tim2IntTimes > 4999)
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <TIM2_IRQHandler+0x124>)
 8002150:	881b      	ldrh	r3, [r3, #0]
 8002152:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002156:	4293      	cmp	r3, r2
 8002158:	d902      	bls.n	8002160 <TIM2_IRQHandler+0x18>
	{
		tim2IntTimes = 0;
 800215a:	4b44      	ldr	r3, [pc, #272]	@ (800226c <TIM2_IRQHandler+0x124>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
	}
	if((tim2IntTimes % 2) == 0)
 8002160:	4b42      	ldr	r3, [pc, #264]	@ (800226c <TIM2_IRQHandler+0x124>)
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d12d      	bne.n	80021ca <TIM2_IRQHandler+0x82>
	{
		tmpPulse = 990 /* * A1*/ * (sin(SinPeriodOffset * tim2IntTimes) + 1);
 800216e:	4b3f      	ldr	r3, [pc, #252]	@ (800226c <TIM2_IRQHandler+0x124>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800217a:	4b3d      	ldr	r3, [pc, #244]	@ (8002270 <TIM2_IRQHandler+0x128>)
 800217c:	edd3 7a00 	vldr	s15, [r3]
 8002180:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002184:	ee17 0a90 	vmov	r0, s15
 8002188:	f7fe f9a2 	bl	80004d0 <__aeabi_f2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	ec43 2b10 	vmov	d0, r2, r3
 8002194:	f004 ff9c 	bl	80070d0 <sin>
 8002198:	ec51 0b10 	vmov	r0, r1, d0
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <TIM2_IRQHandler+0x12c>)
 80021a2:	f7fe f837 	bl	8000214 <__adddf3>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	4b31      	ldr	r3, [pc, #196]	@ (8002278 <TIM2_IRQHandler+0x130>)
 80021b4:	f7fe f9e4 	bl	8000580 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fca0 	bl	8000b04 <__aeabi_d2uiz>
 80021c4:	4603      	mov	r3, r0
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	e030      	b.n	800222c <TIM2_IRQHandler+0xe4>
	}
	else
	{
		tmpPulse = 990 /* * A2*/ * (sin(3 * (SinPeriodOffset * tim2IntTimes)) + 1);
 80021ca:	4b28      	ldr	r3, [pc, #160]	@ (800226c <TIM2_IRQHandler+0x124>)
 80021cc:	881b      	ldrh	r3, [r3, #0]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d6:	4b26      	ldr	r3, [pc, #152]	@ (8002270 <TIM2_IRQHandler+0x128>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021e8:	ee17 0a90 	vmov	r0, s15
 80021ec:	f7fe f970 	bl	80004d0 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	ec43 2b10 	vmov	d0, r2, r3
 80021f8:	f004 ff6a 	bl	80070d0 <sin>
 80021fc:	ec51 0b10 	vmov	r0, r1, d0
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <TIM2_IRQHandler+0x12c>)
 8002206:	f7fe f805 	bl	8000214 <__adddf3>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	4b18      	ldr	r3, [pc, #96]	@ (8002278 <TIM2_IRQHandler+0x130>)
 8002218:	f7fe f9b2 	bl	8000580 <__aeabi_dmul>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fc6e 	bl	8000b04 <__aeabi_d2uiz>
 8002228:	4603      	mov	r3, r0
 800222a:	607b      	str	r3, [r7, #4]
	}

	if(tmpPulse > PWM_MAX_VALUE) { tmpPulse = PWM_MAX_VALUE; }
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8002232:	4293      	cmp	r3, r2
 8002234:	d903      	bls.n	800223e <TIM2_IRQHandler+0xf6>
 8002236:	f240 73c6 	movw	r3, #1990	@ 0x7c6
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	e004      	b.n	8002248 <TIM2_IRQHandler+0x100>
	else if (tmpPulse < PWM_MIN_VALUE) { tmpPulse = PWM_MIN_VALUE; }
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b09      	cmp	r3, #9
 8002242:	d801      	bhi.n	8002248 <TIM2_IRQHandler+0x100>
 8002244:	230a      	movs	r3, #10
 8002246:	607b      	str	r3, [r7, #4]

	TIM2->CCR1 = tmpPulse;
 8002248:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6353      	str	r3, [r2, #52]	@ 0x34
	tim2IntTimes++;
 8002250:	4b06      	ldr	r3, [pc, #24]	@ (800226c <TIM2_IRQHandler+0x124>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	3301      	adds	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <TIM2_IRQHandler+0x124>)
 800225a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800225c:	4807      	ldr	r0, [pc, #28]	@ (800227c <TIM2_IRQHandler+0x134>)
 800225e:	f003 fa49 	bl	80056f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	200002fc 	.word	0x200002fc
 8002270:	20000008 	.word	0x20000008
 8002274:	3ff00000 	.word	0x3ff00000
 8002278:	408ef000 	.word	0x408ef000
 800227c:	200001e8 	.word	0x200001e8

08002280 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002284:	4802      	ldr	r0, [pc, #8]	@ (8002290 <DMA2_Stream0_IRQHandler+0x10>)
 8002286:	f000 fec5 	bl	8003014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000007c 	.word	0x2000007c

08002294 <LTDC_IRQHandler>:

/* USER CODE BEGIN 1 */
void LTDC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	HAL_LTDC_IRQHandler(&hLtdcHandler);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <LTDC_IRQHandler+0x10>)
 800229a:	f001 fc83 	bl	8003ba4 <HAL_LTDC_IRQHandler>
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000628 	.word	0x20000628

080022a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ac:	4b06      	ldr	r3, [pc, #24]	@ (80022c8 <SystemInit+0x20>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b2:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <SystemInit+0x20>)
 80022b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d0:	f7ff ffea 	bl	80022a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022d6:	490d      	ldr	r1, [pc, #52]	@ (800230c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80022fa:	f004 fec3 	bl	8007084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022fe:	f7fe fdeb 	bl	8000ed8 <main>
  bx  lr    
 8002302:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002304:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002310:	08008350 	.word	0x08008350
  ldr r2, =_sbss
 8002314:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002318:	200006d0 	.word	0x200006d0

0800231c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC_IRQHandler>

0800231e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002322:	2003      	movs	r0, #3
 8002324:	f000 fc94 	bl	8002c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002328:	200f      	movs	r0, #15
 800232a:	f000 f805 	bl	8002338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800232e:	f7ff faed 	bl	800190c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002340:	4b12      	ldr	r3, [pc, #72]	@ (800238c <HAL_InitTick+0x54>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b12      	ldr	r3, [pc, #72]	@ (8002390 <HAL_InitTick+0x58>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fcaf 	bl	8002cba <HAL_SYSTICK_Config>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00e      	b.n	8002384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b0f      	cmp	r3, #15
 800236a:	d80a      	bhi.n	8002382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800236c:	2200      	movs	r2, #0
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f000 fc77 	bl	8002c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002378:	4a06      	ldr	r2, [pc, #24]	@ (8002394 <HAL_InitTick+0x5c>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	e000      	b.n	8002384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	2000000c 	.word	0x2000000c
 8002390:	20000014 	.word	0x20000014
 8002394:	20000010 	.word	0x20000010

08002398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800239c:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <HAL_IncTick+0x20>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b06      	ldr	r3, [pc, #24]	@ (80023bc <HAL_IncTick+0x24>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_IncTick+0x24>)
 80023aa:	6013      	str	r3, [r2, #0]
}
 80023ac:	bf00      	nop
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000014 	.word	0x20000014
 80023bc:	20000624 	.word	0x20000624

080023c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return uwTick;
 80023c4:	4b03      	ldr	r3, [pc, #12]	@ (80023d4 <HAL_GetTick+0x14>)
 80023c6:	681b      	ldr	r3, [r3, #0]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000624 	.word	0x20000624

080023d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e031      	b.n	8002452 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d109      	bne.n	800240a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff faac 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d116      	bne.n	8002444 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_ADC_Init+0x84>)
 800241c:	4013      	ands	r3, r2
 800241e:	f043 0202 	orr.w	r2, r3, #2
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 fa48 	bl	80028bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	f043 0201 	orr.w	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40
 8002442:	e001      	b.n	8002448 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	ffffeefd 	.word	0xffffeefd

08002460 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADC_Start_IT+0x1a>
 8002476:	2302      	movs	r3, #2
 8002478:	e0b5      	b.n	80025e6 <HAL_ADC_Start_IT+0x186>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d018      	beq.n	80024c2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024a0:	4b54      	ldr	r3, [pc, #336]	@ (80025f4 <HAL_ADC_Start_IT+0x194>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_ADC_Start_IT+0x198>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d17d      	bne.n	80025cc <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d4:	4b49      	ldr	r3, [pc, #292]	@ (80025fc <HAL_ADC_Start_IT+0x19c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250a:	d106      	bne.n	800251a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f023 0206 	bic.w	r2, r3, #6
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
 8002518:	e002      	b.n	8002520 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002530:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4b30      	ldr	r3, [pc, #192]	@ (8002600 <HAL_ADC_Start_IT+0x1a0>)
 800253e:	430b      	orrs	r3, r1
 8002540:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002542:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_ADC_Start_IT+0x1a4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d143      	bne.n	80025e4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e03a      	b.n	80025e4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a25      	ldr	r2, [pc, #148]	@ (8002608 <HAL_ADC_Start_IT+0x1a8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d10e      	bne.n	8002596 <HAL_ADC_Start_IT+0x136>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002594:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002596:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_ADC_Start_IT+0x1a4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d120      	bne.n	80025e4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a19      	ldr	r2, [pc, #100]	@ (800260c <HAL_ADC_Start_IT+0x1ac>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11b      	bne.n	80025e4 <HAL_ADC_Start_IT+0x184>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d114      	bne.n	80025e4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025c8:	609a      	str	r2, [r3, #8]
 80025ca:	e00b      	b.n	80025e4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	f043 0210 	orr.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025dc:	f043 0201 	orr.w	r2, r3, #1
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	2000000c 	.word	0x2000000c
 80025f8:	431bde83 	.word	0x431bde83
 80025fc:	fffff8fe 	.word	0xfffff8fe
 8002600:	04000020 	.word	0x04000020
 8002604:	40012300 	.word	0x40012300
 8002608:	40012000 	.word	0x40012000
 800260c:	40012200 	.word	0x40012200

08002610 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002624:	2b01      	cmp	r3, #1
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1c>
 8002628:	2302      	movs	r3, #2
 800262a:	e136      	b.n	800289a <HAL_ADC_ConfigChannel+0x28a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b09      	cmp	r3, #9
 800263a:	d93a      	bls.n	80026b2 <HAL_ADC_ConfigChannel+0xa2>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002644:	d035      	beq.n	80026b2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68d9      	ldr	r1, [r3, #12]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b29b      	uxth	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	3b1e      	subs	r3, #30
 800265c:	2207      	movs	r2, #7
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	400a      	ands	r2, r1
 800266a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a8d      	ldr	r2, [pc, #564]	@ (80028a8 <HAL_ADC_ConfigChannel+0x298>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10a      	bne.n	800268c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	061a      	lsls	r2, r3, #24
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800268a:	e035      	b.n	80026f8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	4403      	add	r3, r0
 80026a4:	3b1e      	subs	r3, #30
 80026a6:	409a      	lsls	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026b0:	e022      	b.n	80026f8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	b29b      	uxth	r3, r3
 80026be:	461a      	mov	r2, r3
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	2207      	movs	r2, #7
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43da      	mvns	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	400a      	ands	r2, r1
 80026d4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6919      	ldr	r1, [r3, #16]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	4618      	mov	r0, r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4403      	add	r3, r0
 80026ee:	409a      	lsls	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b06      	cmp	r3, #6
 80026fe:	d824      	bhi.n	800274a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	4613      	mov	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	3b05      	subs	r3, #5
 8002712:	221f      	movs	r2, #31
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43da      	mvns	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	400a      	ands	r2, r1
 8002720:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b29b      	uxth	r3, r3
 800272e:	4618      	mov	r0, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	3b05      	subs	r3, #5
 800273c:	fa00 f203 	lsl.w	r2, r0, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	635a      	str	r2, [r3, #52]	@ 0x34
 8002748:	e04c      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b0c      	cmp	r3, #12
 8002750:	d824      	bhi.n	800279c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	3b23      	subs	r3, #35	@ 0x23
 8002764:	221f      	movs	r2, #31
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	400a      	ands	r2, r1
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4618      	mov	r0, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	3b23      	subs	r3, #35	@ 0x23
 800278e:	fa00 f203 	lsl.w	r2, r0, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	631a      	str	r2, [r3, #48]	@ 0x30
 800279a:	e023      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b41      	subs	r3, #65	@ 0x41
 80027ae:	221f      	movs	r2, #31
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43da      	mvns	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	400a      	ands	r2, r1
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	4618      	mov	r0, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3b41      	subs	r3, #65	@ 0x41
 80027d8:	fa00 f203 	lsl.w	r2, r0, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	430a      	orrs	r2, r1
 80027e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a30      	ldr	r2, [pc, #192]	@ (80028ac <HAL_ADC_ConfigChannel+0x29c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10a      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1f4>
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027f6:	d105      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027f8:	4b2d      	ldr	r3, [pc, #180]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a2c      	ldr	r2, [pc, #176]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002802:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a28      	ldr	r2, [pc, #160]	@ (80028ac <HAL_ADC_ConfigChannel+0x29c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d10f      	bne.n	800282e <HAL_ADC_ConfigChannel+0x21e>
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b12      	cmp	r3, #18
 8002814:	d10b      	bne.n	800282e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002816:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4a25      	ldr	r2, [pc, #148]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800281c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002820:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002822:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a22      	ldr	r2, [pc, #136]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002828:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800282c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a1e      	ldr	r2, [pc, #120]	@ (80028ac <HAL_ADC_ConfigChannel+0x29c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d12b      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x280>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <HAL_ADC_ConfigChannel+0x298>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d003      	beq.n	800284a <HAL_ADC_ConfigChannel+0x23a>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b11      	cmp	r3, #17
 8002848:	d122      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800284a:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002850:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002854:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002856:	4b16      	ldr	r3, [pc, #88]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a15      	ldr	r2, [pc, #84]	@ (80028b0 <HAL_ADC_ConfigChannel+0x2a0>)
 800285c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002860:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_ADC_ConfigChannel+0x298>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d111      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800286c:	4b11      	ldr	r3, [pc, #68]	@ (80028b4 <HAL_ADC_ConfigChannel+0x2a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a11      	ldr	r2, [pc, #68]	@ (80028b8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002872:	fba2 2303 	umull	r2, r3, r2, r3
 8002876:	0c9a      	lsrs	r2, r3, #18
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002882:	e002      	b.n	800288a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3b01      	subs	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f9      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	10000012 	.word	0x10000012
 80028ac:	40012000 	.word	0x40012000
 80028b0:	40012300 	.word	0x40012300
 80028b4:	2000000c 	.word	0x2000000c
 80028b8:	431bde83 	.word	0x431bde83

080028bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80028c4:	4b78      	ldr	r3, [pc, #480]	@ (8002aa8 <ADC_Init+0x1ec>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4a77      	ldr	r2, [pc, #476]	@ (8002aa8 <ADC_Init+0x1ec>)
 80028ca:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80028ce:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028d0:	4b75      	ldr	r3, [pc, #468]	@ (8002aa8 <ADC_Init+0x1ec>)
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4973      	ldr	r1, [pc, #460]	@ (8002aa8 <ADC_Init+0x1ec>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	021a      	lsls	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002932:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	4a58      	ldr	r2, [pc, #352]	@ (8002aac <ADC_Init+0x1f0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d022      	beq.n	8002996 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800295e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6899      	ldr	r1, [r3, #8]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	430a      	orrs	r2, r1
 8002970:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	e00f      	b.n	80029b6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0202 	bic.w	r2, r2, #2
 80029c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	005a      	lsls	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6859      	ldr	r1, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	035a      	lsls	r2, r3, #13
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	e007      	b.n	8002a2c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	051a      	lsls	r2, r3, #20
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a6e:	025a      	lsls	r2, r3, #9
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	029a      	lsls	r2, r3, #10
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40012300 	.word	0x40012300
 8002aac:	0f000001 	.word	0x0f000001

08002ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002acc:	4013      	ands	r3, r2
 8002ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ad8:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ade:	4a04      	ldr	r2, [pc, #16]	@ (8002af0 <__NVIC_SetPriorityGrouping+0x40>)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	60d3      	str	r3, [r2, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	e000ed00 	.word	0xe000ed00
 8002af4:	05fa0000 	.word	0x05fa0000

08002af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002afc:	4b04      	ldr	r3, [pc, #16]	@ (8002b10 <__NVIC_GetPriorityGrouping+0x18>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0a1b      	lsrs	r3, r3, #8
 8002b02:	f003 0307 	and.w	r3, r3, #7
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	db0b      	blt.n	8002b3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	f003 021f 	and.w	r2, r3, #31
 8002b2c:	4907      	ldr	r1, [pc, #28]	@ (8002b4c <__NVIC_EnableIRQ+0x38>)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2001      	movs	r0, #1
 8002b36:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3b01      	subs	r3, #1
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1c:	d301      	bcc.n	8002c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e00f      	b.n	8002c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c22:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <SysTick_Config+0x40>)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c2a:	210f      	movs	r1, #15
 8002c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c30:	f7ff ff8e 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <SysTick_Config+0x40>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c3a:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <SysTick_Config+0x40>)
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	e000e010 	.word	0xe000e010

08002c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f7ff ff29 	bl	8002ab0 <__NVIC_SetPriorityGrouping>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b086      	sub	sp, #24
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	60b9      	str	r1, [r7, #8]
 8002c70:	607a      	str	r2, [r7, #4]
 8002c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c78:	f7ff ff3e 	bl	8002af8 <__NVIC_GetPriorityGrouping>
 8002c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68b9      	ldr	r1, [r7, #8]
 8002c82:	6978      	ldr	r0, [r7, #20]
 8002c84:	f7ff ff8e 	bl	8002ba4 <NVIC_EncodePriority>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8e:	4611      	mov	r1, r2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff5d 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c96:	bf00      	nop
 8002c98:	3718      	adds	r7, #24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff31 	bl	8002b14 <__NVIC_EnableIRQ>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffa2 	bl	8002c0c <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e054      	b.n	8002d90 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7f5b      	ldrb	r3, [r3, #29]
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d105      	bne.n	8002cfc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fea2 	bl	8001a40 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	791b      	ldrb	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	@ (8002d98 <HAL_CRC_Init+0xc4>)
 8002d10:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0218 	bic.w	r2, r2, #24
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	e00c      	b.n	8002d3e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6899      	ldr	r1, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f834 	bl	8002d9c <HAL_CRCEx_Polynomial_Set>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e028      	b.n	8002d90 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	795b      	ldrb	r3, [r3, #5]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d105      	bne.n	8002d52 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d4e:	611a      	str	r2, [r3, #16]
 8002d50:	e004      	b.n	8002d5c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6912      	ldr	r2, [r2, #16]
 8002d5a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	04c11db7 	.word	0x04c11db7

08002d9c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002dac:	231f      	movs	r3, #31
 8002dae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d102      	bne.n	8002dc0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
 8002dbe:	e063      	b.n	8002e88 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002dc0:	bf00      	nop
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1e5a      	subs	r2, r3, #1
 8002dc6:	613a      	str	r2, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d009      	beq.n	8002de0 <HAL_CRCEx_Polynomial_Set+0x44>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	d846      	bhi.n	8002e74 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002de6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <HAL_CRCEx_Polynomial_Set+0x50>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e7b 	.word	0x08002e7b
 8002df0:	08002e75 	.word	0x08002e75
 8002df4:	08002e75 	.word	0x08002e75
 8002df8:	08002e75 	.word	0x08002e75
 8002dfc:	08002e75 	.word	0x08002e75
 8002e00:	08002e75 	.word	0x08002e75
 8002e04:	08002e75 	.word	0x08002e75
 8002e08:	08002e75 	.word	0x08002e75
 8002e0c:	08002e69 	.word	0x08002e69
 8002e10:	08002e75 	.word	0x08002e75
 8002e14:	08002e75 	.word	0x08002e75
 8002e18:	08002e75 	.word	0x08002e75
 8002e1c:	08002e75 	.word	0x08002e75
 8002e20:	08002e75 	.word	0x08002e75
 8002e24:	08002e75 	.word	0x08002e75
 8002e28:	08002e75 	.word	0x08002e75
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e75 	.word	0x08002e75
 8002e34:	08002e75 	.word	0x08002e75
 8002e38:	08002e75 	.word	0x08002e75
 8002e3c:	08002e75 	.word	0x08002e75
 8002e40:	08002e75 	.word	0x08002e75
 8002e44:	08002e75 	.word	0x08002e75
 8002e48:	08002e75 	.word	0x08002e75
 8002e4c:	08002e51 	.word	0x08002e51
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d913      	bls.n	8002e7e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002e5a:	e010      	b.n	8002e7e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	2b07      	cmp	r3, #7
 8002e60:	d90f      	bls.n	8002e82 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002e66:	e00c      	b.n	8002e82 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	d90b      	bls.n	8002e86 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002e72:	e008      	b.n	8002e86 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
        break;
 8002e78:	e006      	b.n	8002e88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002e7a:	bf00      	nop
 8002e7c:	e004      	b.n	8002e88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e002      	b.n	8002e88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002e82:	bf00      	nop
 8002e84:	e000      	b.n	8002e88 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002e86:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10d      	bne.n	8002eaa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 0118 	bic.w	r1, r3, #24
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	371c      	adds	r7, #28
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ec4:	f7ff fa7c 	bl	80023c0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e099      	b.n	8003008 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef4:	e00f      	b.n	8002f16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ef6:	f7ff fa63 	bl	80023c0 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b05      	cmp	r3, #5
 8002f02:	d908      	bls.n	8002f16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2220      	movs	r2, #32
 8002f08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e078      	b.n	8003008 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e8      	bne.n	8002ef6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <HAL_DMA_Init+0x158>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f023 0307 	bic.w	r3, r3, #7
 8002f96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d117      	bne.n	8002fda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00e      	beq.n	8002fda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f9e9 	bl	8003394 <DMA_CheckFifoParam>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2240      	movs	r2, #64	@ 0x40
 8002fcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e016      	b.n	8003008 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9a0 	bl	8003328 <DMA_CalcBaseAndBitshift>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	223f      	movs	r2, #63	@ 0x3f
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	f010803f 	.word	0xf010803f

08003014 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003020:	4b8e      	ldr	r3, [pc, #568]	@ (800325c <HAL_DMA_IRQHandler+0x248>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a8e      	ldr	r2, [pc, #568]	@ (8003260 <HAL_DMA_IRQHandler+0x24c>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0a9b      	lsrs	r3, r3, #10
 800302c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003032:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2208      	movs	r2, #8
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01a      	beq.n	8003080 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d013      	beq.n	8003080 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0204 	bic.w	r2, r2, #4
 8003066:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800306c:	2208      	movs	r2, #8
 800306e:	409a      	lsls	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003084:	2201      	movs	r2, #1
 8003086:	409a      	lsls	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a2:	2201      	movs	r2, #1
 80030a4:	409a      	lsls	r2, r3
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ae:	f043 0202 	orr.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ba:	2204      	movs	r2, #4
 80030bc:	409a      	lsls	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d012      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00b      	beq.n	80030ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d8:	2204      	movs	r2, #4
 80030da:	409a      	lsls	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f0:	2210      	movs	r2, #16
 80030f2:	409a      	lsls	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d043      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03c      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310e:	2210      	movs	r2, #16
 8003110:	409a      	lsls	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d018      	beq.n	8003156 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d024      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
 8003142:	e01f      	b.n	8003184 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	4798      	blx	r3
 8003154:	e016      	b.n	8003184 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0208 	bic.w	r2, r2, #8
 8003172:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003188:	2220      	movs	r2, #32
 800318a:	409a      	lsls	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4013      	ands	r3, r2
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 808f 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8087 	beq.w	80032b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031aa:	2220      	movs	r2, #32
 80031ac:	409a      	lsls	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b05      	cmp	r3, #5
 80031bc:	d136      	bne.n	800322c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 0216 	bic.w	r2, r2, #22
 80031cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	695a      	ldr	r2, [r3, #20]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d103      	bne.n	80031ee <HAL_DMA_IRQHandler+0x1da>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0208 	bic.w	r2, r2, #8
 80031fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003202:	223f      	movs	r2, #63	@ 0x3f
 8003204:	409a      	lsls	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800321e:	2b00      	cmp	r3, #0
 8003220:	d07e      	beq.n	8003320 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	4798      	blx	r3
        }
        return;
 800322a:	e079      	b.n	8003320 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10d      	bne.n	8003264 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324c:	2b00      	cmp	r3, #0
 800324e:	d031      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	4798      	blx	r3
 8003258:	e02c      	b.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
 800325a:	bf00      	nop
 800325c:	2000000c 	.word	0x2000000c
 8003260:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d023      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e01e      	b.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10f      	bne.n	80032a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d032      	beq.n	8003322 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d022      	beq.n	800330e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2205      	movs	r2, #5
 80032cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d307      	bcc.n	80032fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f2      	bne.n	80032e0 <HAL_DMA_IRQHandler+0x2cc>
 80032fa:	e000      	b.n	80032fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
 800331e:	e000      	b.n	8003322 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003320:	bf00      	nop
    }
  }
}
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3b10      	subs	r3, #16
 8003338:	4a13      	ldr	r2, [pc, #76]	@ (8003388 <DMA_CalcBaseAndBitshift+0x60>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003342:	4a12      	ldr	r2, [pc, #72]	@ (800338c <DMA_CalcBaseAndBitshift+0x64>)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	461a      	mov	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d908      	bls.n	8003368 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	461a      	mov	r2, r3
 800335c:	4b0c      	ldr	r3, [pc, #48]	@ (8003390 <DMA_CalcBaseAndBitshift+0x68>)
 800335e:	4013      	ands	r3, r2
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	659a      	str	r2, [r3, #88]	@ 0x58
 8003366:	e006      	b.n	8003376 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <DMA_CalcBaseAndBitshift+0x68>)
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	aaaaaaab 	.word	0xaaaaaaab
 800338c:	08008160 	.word	0x08008160
 8003390:	fffffc00 	.word	0xfffffc00

08003394 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d11f      	bne.n	80033ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b03      	cmp	r3, #3
 80033b2:	d856      	bhi.n	8003462 <DMA_CheckFifoParam+0xce>
 80033b4:	a201      	add	r2, pc, #4	@ (adr r2, 80033bc <DMA_CheckFifoParam+0x28>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033df 	.word	0x080033df
 80033c4:	080033cd 	.word	0x080033cd
 80033c8:	08003463 	.word	0x08003463
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d046      	beq.n	8003466 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033dc:	e043      	b.n	8003466 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033e6:	d140      	bne.n	800346a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ec:	e03d      	b.n	800346a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033f6:	d121      	bne.n	800343c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d837      	bhi.n	800346e <DMA_CheckFifoParam+0xda>
 80033fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <DMA_CheckFifoParam+0x70>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	08003415 	.word	0x08003415
 8003408:	0800341b 	.word	0x0800341b
 800340c:	08003415 	.word	0x08003415
 8003410:	0800342d 	.word	0x0800342d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
      break;
 8003418:	e030      	b.n	800347c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d025      	beq.n	8003472 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800342a:	e022      	b.n	8003472 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003430:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003434:	d11f      	bne.n	8003476 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800343a:	e01c      	b.n	8003476 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d903      	bls.n	800344a <DMA_CheckFifoParam+0xb6>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b03      	cmp	r3, #3
 8003446:	d003      	beq.n	8003450 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003448:	e018      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	73fb      	strb	r3, [r7, #15]
      break;
 800344e:	e015      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00e      	beq.n	800347a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	73fb      	strb	r3, [r7, #15]
      break;
 8003460:	e00b      	b.n	800347a <DMA_CheckFifoParam+0xe6>
      break;
 8003462:	bf00      	nop
 8003464:	e00a      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;
 8003466:	bf00      	nop
 8003468:	e008      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;
 800346a:	bf00      	nop
 800346c:	e006      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;
 800346e:	bf00      	nop
 8003470:	e004      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;
 8003472:	bf00      	nop
 8003474:	e002      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;   
 8003476:	bf00      	nop
 8003478:	e000      	b.n	800347c <DMA_CheckFifoParam+0xe8>
      break;
 800347a:	bf00      	nop
    }
  } 
  
  return status; 
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop

0800348c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e039      	b.n	8003512 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fae4 	bl	8001a80 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034dc:	f023 0107 	bic.w	r1, r3, #7
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <HAL_DMA2D_Init+0x90>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	68d1      	ldr	r1, [r2, #12]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	430b      	orrs	r3, r1
 8003500:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	ffffc000 	.word	0xffffc000

08003520 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003538:	2b01      	cmp	r3, #1
 800353a:	d101      	bne.n	8003540 <HAL_DMA2D_ConfigLayer+0x20>
 800353c:	2302      	movs	r3, #2
 800353e:	e079      	b.n	8003634 <HAL_DMA2D_ConfigLayer+0x114>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	3318      	adds	r3, #24
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	041b      	lsls	r3, r3, #16
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800356a:	4b35      	ldr	r3, [pc, #212]	@ (8003640 <HAL_DMA2D_ConfigLayer+0x120>)
 800356c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b0a      	cmp	r3, #10
 8003574:	d003      	beq.n	800357e <HAL_DMA2D_ConfigLayer+0x5e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b09      	cmp	r3, #9
 800357c:	d107      	bne.n	800358e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	e005      	b.n	800359a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4313      	orrs	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d120      	bne.n	80035e2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	43db      	mvns	r3, r3
 80035aa:	ea02 0103 	and.w	r1, r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b0a      	cmp	r3, #10
 80035c8:	d003      	beq.n	80035d2 <HAL_DMA2D_ConfigLayer+0xb2>
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b09      	cmp	r3, #9
 80035d0:	d127      	bne.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e0:	e01f      	b.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	43db      	mvns	r3, r3
 80035ec:	ea02 0103 	and.w	r1, r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b0a      	cmp	r3, #10
 800360a:	d003      	beq.n	8003614 <HAL_DMA2D_ConfigLayer+0xf4>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b09      	cmp	r3, #9
 8003612:	d106      	bne.n	8003622 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003620:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	ff03000f 	.word	0xff03000f

08003644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	@ 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003656:	2300      	movs	r3, #0
 8003658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800365a:	2300      	movs	r3, #0
 800365c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
 8003662:	e175      	b.n	8003950 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003664:	2201      	movs	r2, #1
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4013      	ands	r3, r2
 8003676:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	429a      	cmp	r2, r3
 800367e:	f040 8164 	bne.w	800394a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f003 0303 	and.w	r3, r3, #3
 800368a:	2b01      	cmp	r3, #1
 800368c:	d005      	beq.n	800369a <HAL_GPIO_Init+0x56>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d130      	bne.n	80036fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	2203      	movs	r2, #3
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4013      	ands	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036d0:	2201      	movs	r2, #1
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 0201 	and.w	r2, r3, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	2b03      	cmp	r3, #3
 8003706:	d017      	beq.n	8003738 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	2203      	movs	r2, #3
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	69ba      	ldr	r2, [r7, #24]
 800371c:	4013      	ands	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 0303 	and.w	r3, r3, #3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d123      	bne.n	800378c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f003 0307 	and.w	r3, r3, #7
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4313      	orrs	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	08da      	lsrs	r2, r3, #3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	3208      	adds	r2, #8
 8003786:	69b9      	ldr	r1, [r7, #24]
 8003788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f003 0203 	and.w	r2, r3, #3
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80be 	beq.w	800394a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ce:	4b66      	ldr	r3, [pc, #408]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	4a65      	ldr	r2, [pc, #404]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80037da:	4b63      	ldr	r3, [pc, #396]	@ (8003968 <HAL_GPIO_Init+0x324>)
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037e6:	4a61      	ldr	r2, [pc, #388]	@ (800396c <HAL_GPIO_Init+0x328>)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	089b      	lsrs	r3, r3, #2
 80037ec:	3302      	adds	r3, #2
 80037ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	f003 0303 	and.w	r3, r3, #3
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	220f      	movs	r2, #15
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43db      	mvns	r3, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4013      	ands	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a58      	ldr	r2, [pc, #352]	@ (8003970 <HAL_GPIO_Init+0x32c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d037      	beq.n	8003882 <HAL_GPIO_Init+0x23e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a57      	ldr	r2, [pc, #348]	@ (8003974 <HAL_GPIO_Init+0x330>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_GPIO_Init+0x23a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a56      	ldr	r2, [pc, #344]	@ (8003978 <HAL_GPIO_Init+0x334>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02b      	beq.n	800387a <HAL_GPIO_Init+0x236>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a55      	ldr	r2, [pc, #340]	@ (800397c <HAL_GPIO_Init+0x338>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d025      	beq.n	8003876 <HAL_GPIO_Init+0x232>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a54      	ldr	r2, [pc, #336]	@ (8003980 <HAL_GPIO_Init+0x33c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <HAL_GPIO_Init+0x22e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a53      	ldr	r2, [pc, #332]	@ (8003984 <HAL_GPIO_Init+0x340>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d019      	beq.n	800386e <HAL_GPIO_Init+0x22a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a52      	ldr	r2, [pc, #328]	@ (8003988 <HAL_GPIO_Init+0x344>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d013      	beq.n	800386a <HAL_GPIO_Init+0x226>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a51      	ldr	r2, [pc, #324]	@ (800398c <HAL_GPIO_Init+0x348>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d00d      	beq.n	8003866 <HAL_GPIO_Init+0x222>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a50      	ldr	r2, [pc, #320]	@ (8003990 <HAL_GPIO_Init+0x34c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d007      	beq.n	8003862 <HAL_GPIO_Init+0x21e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4f      	ldr	r2, [pc, #316]	@ (8003994 <HAL_GPIO_Init+0x350>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d101      	bne.n	800385e <HAL_GPIO_Init+0x21a>
 800385a:	2309      	movs	r3, #9
 800385c:	e012      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800385e:	230a      	movs	r3, #10
 8003860:	e010      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003862:	2308      	movs	r3, #8
 8003864:	e00e      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003866:	2307      	movs	r3, #7
 8003868:	e00c      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800386a:	2306      	movs	r3, #6
 800386c:	e00a      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800386e:	2305      	movs	r3, #5
 8003870:	e008      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003872:	2304      	movs	r3, #4
 8003874:	e006      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003876:	2303      	movs	r3, #3
 8003878:	e004      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800387a:	2302      	movs	r3, #2
 800387c:	e002      	b.n	8003884 <HAL_GPIO_Init+0x240>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_GPIO_Init+0x240>
 8003882:	2300      	movs	r3, #0
 8003884:	69fa      	ldr	r2, [r7, #28]
 8003886:	f002 0203 	and.w	r2, r2, #3
 800388a:	0092      	lsls	r2, r2, #2
 800388c:	4093      	lsls	r3, r2
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4313      	orrs	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003894:	4935      	ldr	r1, [pc, #212]	@ (800396c <HAL_GPIO_Init+0x328>)
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	3302      	adds	r3, #2
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_GPIO_Init+0x354>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	43db      	mvns	r3, r3
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	4013      	ands	r3, r2
 80038b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038c6:	4a34      	ldr	r2, [pc, #208]	@ (8003998 <HAL_GPIO_Init+0x354>)
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_GPIO_Init+0x354>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4013      	ands	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038f0:	4a29      	ldr	r2, [pc, #164]	@ (8003998 <HAL_GPIO_Init+0x354>)
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038f6:	4b28      	ldr	r3, [pc, #160]	@ (8003998 <HAL_GPIO_Init+0x354>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800391a:	4a1f      	ldr	r2, [pc, #124]	@ (8003998 <HAL_GPIO_Init+0x354>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003920:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_GPIO_Init+0x354>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003944:	4a14      	ldr	r2, [pc, #80]	@ (8003998 <HAL_GPIO_Init+0x354>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	3301      	adds	r3, #1
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	f67f ae86 	bls.w	8003664 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3724      	adds	r7, #36	@ 0x24
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	40013800 	.word	0x40013800
 8003970:	40020000 	.word	0x40020000
 8003974:	40020400 	.word	0x40020400
 8003978:	40020800 	.word	0x40020800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40021000 	.word	0x40021000
 8003984:	40021400 	.word	0x40021400
 8003988:	40021800 	.word	0x40021800
 800398c:	40021c00 	.word	0x40021c00
 8003990:	40022000 	.word	0x40022000
 8003994:	40022400 	.word	0x40022400
 8003998:	40013c00 	.word	0x40013c00

0800399c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
 80039a8:	4613      	mov	r3, r2
 80039aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80039ac:	787b      	ldrb	r3, [r7, #1]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80039b8:	e003      	b.n	80039c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80039ba:	887b      	ldrh	r3, [r7, #2]
 80039bc:	041a      	lsls	r2, r3, #16
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	619a      	str	r2, [r3, #24]
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039e0:	887a      	ldrh	r2, [r7, #2]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4013      	ands	r3, r2
 80039e6:	041a      	lsls	r2, r3, #16
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43d9      	mvns	r1, r3
 80039ec:	887b      	ldrh	r3, [r7, #2]
 80039ee:	400b      	ands	r3, r1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	619a      	str	r2, [r3, #24]
}
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
	...

08003a04 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e0bf      	b.n	8003b96 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d106      	bne.n	8003a30 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fe f848 	bl	8001ac0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003a46:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6999      	ldr	r1, [r3, #24]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a5c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_LTDC_Init+0x19c>)
 8003a78:	400b      	ands	r3, r1
 8003a7a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68d9      	ldr	r1, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba0 <HAL_LTDC_Init+0x19c>)
 8003aa6:	400b      	ands	r3, r1
 8003aa8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	041b      	lsls	r3, r3, #16
 8003ab0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6919      	ldr	r1, [r3, #16]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b33      	ldr	r3, [pc, #204]	@ (8003ba0 <HAL_LTDC_Init+0x19c>)
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	041b      	lsls	r3, r3, #16
 8003ade:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6919      	ldr	r1, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6959      	ldr	r1, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	4b27      	ldr	r3, [pc, #156]	@ (8003ba0 <HAL_LTDC_Init+0x19c>)
 8003b02:	400b      	ands	r3, r1
 8003b04:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0a:	041b      	lsls	r3, r3, #16
 8003b0c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6959      	ldr	r1, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003b46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0206 	orr.w	r2, r2, #6
 8003b72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0201 	orr.w	r2, r2, #1
 8003b82:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	f000f800 	.word	0xf000f800

08003ba4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d023      	beq.n	8003c0e <HAL_LTDC_IRQHandler+0x6a>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01e      	beq.n	8003c0e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0204 	bic.w	r2, r2, #4
 8003bde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2204      	movs	r2, #4
 8003be6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003bee:	f043 0201 	orr.w	r2, r3, #1
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f86f 	bl	8003cec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d023      	beq.n	8003c60 <HAL_LTDC_IRQHandler+0xbc>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d01e      	beq.n	8003c60 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0202 	bic.w	r2, r2, #2
 8003c30:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2202      	movs	r2, #2
 8003c38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c40:	f043 0202 	orr.w	r2, r3, #2
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2204      	movs	r2, #4
 8003c4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f846 	bl	8003cec <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d01b      	beq.n	8003ca2 <HAL_LTDC_IRQHandler+0xfe>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d016      	beq.n	8003ca2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f82f 	bl	8003d00 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d01b      	beq.n	8003ce4 <HAL_LTDC_IRQHandler+0x140>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0308 	and.w	r3, r3, #8
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0208 	bic.w	r2, r2, #8
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2208      	movs	r2, #8
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f818 	bl	8003d14 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d28:	b5b0      	push	{r4, r5, r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d101      	bne.n	8003d42 <HAL_LTDC_ConfigLayer+0x1a>
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e02c      	b.n	8003d9c <HAL_LTDC_ConfigLayer+0x74>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2134      	movs	r1, #52	@ 0x34
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 f811 	bl	8003da4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2201      	movs	r2, #1
 8003d88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bdb0      	pop	{r4, r5, r7, pc}

08003da4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b089      	sub	sp, #36	@ 0x24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	0c1b      	lsrs	r3, r3, #16
 8003dbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc0:	4413      	add	r3, r2
 8003dc2:	041b      	lsls	r3, r3, #16
 8003dc4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	01db      	lsls	r3, r3, #7
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3384      	adds	r3, #132	@ 0x84
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	01d2      	lsls	r2, r2, #7
 8003de0:	440a      	add	r2, r1
 8003de2:	3284      	adds	r2, #132	@ 0x84
 8003de4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003de8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dfa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dfc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	01db      	lsls	r3, r3, #7
 8003e08:	440b      	add	r3, r1
 8003e0a:	3384      	adds	r3, #132	@ 0x84
 8003e0c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e12:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e22:	4413      	add	r3, r2
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	01db      	lsls	r3, r3, #7
 8003e32:	4413      	add	r3, r2
 8003e34:	3384      	adds	r3, #132	@ 0x84
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	4611      	mov	r1, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	01d2      	lsls	r2, r2, #7
 8003e42:	440a      	add	r2, r1
 8003e44:	3284      	adds	r2, #132	@ 0x84
 8003e46:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e4a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5a:	4413      	add	r3, r2
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	01db      	lsls	r3, r3, #7
 8003e68:	440b      	add	r3, r1
 8003e6a:	3384      	adds	r3, #132	@ 0x84
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	01db      	lsls	r3, r3, #7
 8003e7e:	4413      	add	r3, r2
 8003e80:	3384      	adds	r3, #132	@ 0x84
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	4611      	mov	r1, r2
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	01d2      	lsls	r2, r2, #7
 8003e8e:	440a      	add	r2, r1
 8003e90:	3284      	adds	r2, #132	@ 0x84
 8003e92:	f023 0307 	bic.w	r3, r3, #7
 8003e96:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	01db      	lsls	r3, r3, #7
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3384      	adds	r3, #132	@ 0x84
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003ebe:	041b      	lsls	r3, r3, #16
 8003ec0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	061b      	lsls	r3, r3, #24
 8003ec8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	01db      	lsls	r3, r3, #7
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3384      	adds	r3, #132	@ 0x84
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	01db      	lsls	r3, r3, #7
 8003ee4:	4413      	add	r3, r2
 8003ee6:	3384      	adds	r3, #132	@ 0x84
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2300      	movs	r3, #0
 8003eec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	01db      	lsls	r3, r3, #7
 8003f08:	440b      	add	r3, r1
 8003f0a:	3384      	adds	r3, #132	@ 0x84
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	01db      	lsls	r3, r3, #7
 8003f1e:	4413      	add	r3, r2
 8003f20:	3384      	adds	r3, #132	@ 0x84
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	01d2      	lsls	r2, r2, #7
 8003f2e:	440a      	add	r2, r1
 8003f30:	3284      	adds	r2, #132	@ 0x84
 8003f32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	01db      	lsls	r3, r3, #7
 8003f42:	4413      	add	r3, r2
 8003f44:	3384      	adds	r3, #132	@ 0x84
 8003f46:	461a      	mov	r2, r3
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	01db      	lsls	r3, r3, #7
 8003f58:	4413      	add	r3, r2
 8003f5a:	3384      	adds	r3, #132	@ 0x84
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4619      	mov	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	01db      	lsls	r3, r3, #7
 8003f68:	440b      	add	r3, r1
 8003f6a:	3384      	adds	r3, #132	@ 0x84
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4b58      	ldr	r3, [pc, #352]	@ (80040d0 <LTDC_SetConfig+0x32c>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	6809      	ldr	r1, [r1, #0]
 8003f80:	4608      	mov	r0, r1
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	01c9      	lsls	r1, r1, #7
 8003f86:	4401      	add	r1, r0
 8003f88:	3184      	adds	r1, #132	@ 0x84
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	461a      	mov	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	01db      	lsls	r3, r3, #7
 8003f98:	4413      	add	r3, r2
 8003f9a:	3384      	adds	r3, #132	@ 0x84
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	4413      	add	r3, r2
 8003faa:	3384      	adds	r3, #132	@ 0x84
 8003fac:	461a      	mov	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3384      	adds	r3, #132	@ 0x84
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	e01b      	b.n	800400e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	e014      	b.n	800400e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2b04      	cmp	r3, #4
 8003fea:	d00b      	beq.n	8004004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d007      	beq.n	8004004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d003      	beq.n	8004004 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004000:	2b07      	cmp	r3, #7
 8004002:	d102      	bne.n	800400a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004004:	2302      	movs	r3, #2
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	e001      	b.n	800400e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800400a:	2301      	movs	r3, #1
 800400c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	4413      	add	r3, r2
 800401a:	3384      	adds	r3, #132	@ 0x84
 800401c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6812      	ldr	r2, [r2, #0]
 8004022:	4611      	mov	r1, r2
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	01d2      	lsls	r2, r2, #7
 8004028:	440a      	add	r2, r1
 800402a:	3284      	adds	r2, #132	@ 0x84
 800402c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004030:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	fb02 f303 	mul.w	r3, r2, r3
 800403c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6859      	ldr	r1, [r3, #4]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	1acb      	subs	r3, r1, r3
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	6809      	ldr	r1, [r1, #0]
 8004054:	4608      	mov	r0, r1
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	01c9      	lsls	r1, r1, #7
 800405a:	4401      	add	r1, r0
 800405c:	3184      	adds	r1, #132	@ 0x84
 800405e:	4313      	orrs	r3, r2
 8004060:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	01db      	lsls	r3, r3, #7
 800406c:	4413      	add	r3, r2
 800406e:	3384      	adds	r3, #132	@ 0x84
 8004070:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	01db      	lsls	r3, r3, #7
 800407c:	440b      	add	r3, r1
 800407e:	3384      	adds	r3, #132	@ 0x84
 8004080:	4619      	mov	r1, r3
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <LTDC_SetConfig+0x330>)
 8004084:	4013      	ands	r3, r2
 8004086:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	461a      	mov	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	4413      	add	r3, r2
 8004094:	3384      	adds	r3, #132	@ 0x84
 8004096:	461a      	mov	r2, r3
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	01db      	lsls	r3, r3, #7
 80040a8:	4413      	add	r3, r2
 80040aa:	3384      	adds	r3, #132	@ 0x84
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	4611      	mov	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	01d2      	lsls	r2, r2, #7
 80040b8:	440a      	add	r2, r1
 80040ba:	3284      	adds	r2, #132	@ 0x84
 80040bc:	f043 0301 	orr.w	r3, r3, #1
 80040c0:	6013      	str	r3, [r2, #0]
}
 80040c2:	bf00      	nop
 80040c4:	3724      	adds	r7, #36	@ 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	fffff8f8 	.word	0xfffff8f8
 80040d4:	fffff800 	.word	0xfffff800

080040d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040e6:	6013      	str	r3, [r2, #0]
}
 80040e8:	bf00      	nop
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40007000 	.word	0x40007000

080040f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004102:	4b23      	ldr	r3, [pc, #140]	@ (8004190 <HAL_PWREx_EnableOverDrive+0x98>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	4a22      	ldr	r2, [pc, #136]	@ (8004190 <HAL_PWREx_EnableOverDrive+0x98>)
 8004108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800410c:	6413      	str	r3, [r2, #64]	@ 0x40
 800410e:	4b20      	ldr	r3, [pc, #128]	@ (8004190 <HAL_PWREx_EnableOverDrive+0x98>)
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004116:	603b      	str	r3, [r7, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800411a:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1d      	ldr	r2, [pc, #116]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004120:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004124:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004126:	f7fe f94b 	bl	80023c0 <HAL_GetTick>
 800412a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800412c:	e009      	b.n	8004142 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800412e:	f7fe f947 	bl	80023c0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800413c:	d901      	bls.n	8004142 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e022      	b.n	8004188 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414e:	d1ee      	bne.n	800412e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0f      	ldr	r2, [pc, #60]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004156:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800415a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800415c:	f7fe f930 	bl	80023c0 <HAL_GetTick>
 8004160:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004162:	e009      	b.n	8004178 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004164:	f7fe f92c 	bl	80023c0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004172:	d901      	bls.n	8004178 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e007      	b.n	8004188 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_PWREx_EnableOverDrive+0x9c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004180:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004184:	d1ee      	bne.n	8004164 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80041a0:	2300      	movs	r3, #0
 80041a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e291      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8087 	beq.w	80042ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	4b96      	ldr	r3, [pc, #600]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c8:	4b93      	ldr	r3, [pc, #588]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x62>
 80041d4:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041e0:	d10b      	bne.n	80041fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d06c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x130>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e26b      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x7a>
 8004204:	4b84      	ldr	r3, [pc, #528]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a83      	ldr	r2, [pc, #524]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0xd8>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x9c>
 800421a:	4b7f      	ldr	r3, [pc, #508]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7e      	ldr	r2, [pc, #504]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b7c      	ldr	r3, [pc, #496]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a7b      	ldr	r2, [pc, #492]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xd8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0xc0>
 800423e:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b73      	ldr	r3, [pc, #460]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a72      	ldr	r2, [pc, #456]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xd8>
 8004258:	4b6f      	ldr	r3, [pc, #444]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6e      	ldr	r2, [pc, #440]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b6c      	ldr	r3, [pc, #432]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6b      	ldr	r2, [pc, #428]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004278:	f7fe f8a2 	bl	80023c0 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fe f89e 	bl	80023c0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	@ 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e21f      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b61      	ldr	r3, [pc, #388]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xe8>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a0:	f7fe f88e 	bl	80023c0 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fe f88a 	bl	80023c0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	@ 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e20b      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b57      	ldr	r3, [pc, #348]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x110>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d069      	beq.n	80043aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d6:	4b50      	ldr	r3, [pc, #320]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b4d      	ldr	r3, [pc, #308]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x190>
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b47      	ldr	r3, [pc, #284]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x17a>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1df      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	493d      	ldr	r1, [pc, #244]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e040      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d023      	beq.n	8004378 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b39      	ldr	r3, [pc, #228]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a38      	ldr	r2, [pc, #224]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004336:	f043 0301 	orr.w	r3, r3, #1
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe f840 	bl	80023c0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004344:	f7fe f83c 	bl	80023c0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e1bd      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004362:	4b2d      	ldr	r3, [pc, #180]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4929      	ldr	r1, [pc, #164]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
 8004376:	e018      	b.n	80043aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004378:	4b27      	ldr	r3, [pc, #156]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a26      	ldr	r2, [pc, #152]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fe f81c 	bl	80023c0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800438c:	f7fe f818 	bl	80023c0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e199      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1e      	ldr	r3, [pc, #120]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d038      	beq.n	8004428 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d019      	beq.n	80043f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b16      	ldr	r3, [pc, #88]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043c2:	4a15      	ldr	r2, [pc, #84]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ca:	f7fd fff9 	bl	80023c0 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043d2:	f7fd fff5 	bl	80023c0 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e176      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x23a>
 80043f0:	e01a      	b.n	8004428 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f2:	4b09      	ldr	r3, [pc, #36]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f6:	4a08      	ldr	r2, [pc, #32]	@ (8004418 <HAL_RCC_OscConfig+0x280>)
 80043f8:	f023 0301 	bic.w	r3, r3, #1
 80043fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fd ffdf 	bl	80023c0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd ffdb 	bl	80023c0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d903      	bls.n	800441c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e15c      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
 8004418:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800441c:	4b91      	ldr	r3, [pc, #580]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 800441e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a4 	beq.w	800457e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b8b      	ldr	r3, [pc, #556]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10d      	bne.n	800445e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	4b88      	ldr	r3, [pc, #544]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	4a87      	ldr	r2, [pc, #540]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444c:	6413      	str	r3, [r2, #64]	@ 0x40
 800444e:	4b85      	ldr	r3, [pc, #532]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800445e:	4b82      	ldr	r3, [pc, #520]	@ (8004668 <HAL_RCC_OscConfig+0x4d0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004466:	2b00      	cmp	r3, #0
 8004468:	d118      	bne.n	800449c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800446a:	4b7f      	ldr	r3, [pc, #508]	@ (8004668 <HAL_RCC_OscConfig+0x4d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a7e      	ldr	r2, [pc, #504]	@ (8004668 <HAL_RCC_OscConfig+0x4d0>)
 8004470:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004474:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004476:	f7fd ffa3 	bl	80023c0 <HAL_GetTick>
 800447a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447e:	f7fd ff9f 	bl	80023c0 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b64      	cmp	r3, #100	@ 0x64
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e120      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004490:	4b75      	ldr	r3, [pc, #468]	@ (8004668 <HAL_RCC_OscConfig+0x4d0>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f0      	beq.n	800447e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d106      	bne.n	80044b2 <HAL_RCC_OscConfig+0x31a>
 80044a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a8:	4a6e      	ldr	r2, [pc, #440]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b0:	e02d      	b.n	800450e <HAL_RCC_OscConfig+0x376>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x33c>
 80044ba:	4b6a      	ldr	r3, [pc, #424]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	4a69      	ldr	r2, [pc, #420]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c6:	4b67      	ldr	r3, [pc, #412]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ca:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044cc:	f023 0304 	bic.w	r3, r3, #4
 80044d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d2:	e01c      	b.n	800450e <HAL_RCC_OscConfig+0x376>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b05      	cmp	r3, #5
 80044da:	d10c      	bne.n	80044f6 <HAL_RCC_OscConfig+0x35e>
 80044dc:	4b61      	ldr	r3, [pc, #388]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e0:	4a60      	ldr	r2, [pc, #384]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044e2:	f043 0304 	orr.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e8:	4b5e      	ldr	r3, [pc, #376]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f4:	e00b      	b.n	800450e <HAL_RCC_OscConfig+0x376>
 80044f6:	4b5b      	ldr	r3, [pc, #364]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fa:	4a5a      	ldr	r2, [pc, #360]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	f023 0301 	bic.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	@ 0x70
 8004502:	4b58      	ldr	r3, [pc, #352]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	4a57      	ldr	r2, [pc, #348]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004508:	f023 0304 	bic.w	r3, r3, #4
 800450c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d015      	beq.n	8004542 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fd ff53 	bl	80023c0 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd ff4f 	bl	80023c0 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0ce      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	4b4b      	ldr	r3, [pc, #300]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0ee      	beq.n	800451e <HAL_RCC_OscConfig+0x386>
 8004540:	e014      	b.n	800456c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004542:	f7fd ff3d 	bl	80023c0 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fd ff39 	bl	80023c0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	4b40      	ldr	r3, [pc, #256]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1ee      	bne.n	800454a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800456c:	7dfb      	ldrb	r3, [r7, #23]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004572:	4b3c      	ldr	r3, [pc, #240]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	4a3b      	ldr	r2, [pc, #236]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004578:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800457c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 80a4 	beq.w	80046d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004588:	4b36      	ldr	r3, [pc, #216]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b08      	cmp	r3, #8
 8004592:	d06b      	beq.n	800466c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d149      	bne.n	8004630 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459c:	4b31      	ldr	r3, [pc, #196]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a30      	ldr	r2, [pc, #192]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a8:	f7fd ff0a 	bl	80023c0 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fd ff06 	bl	80023c0 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e087      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c2:	4b28      	ldr	r3, [pc, #160]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1f0      	bne.n	80045b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	69da      	ldr	r2, [r3, #28]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	019b      	lsls	r3, r3, #6
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	431a      	orrs	r2, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4313      	orrs	r3, r2
 80045f4:	4a1b      	ldr	r2, [pc, #108]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80045f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80045fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045fc:	4b19      	ldr	r3, [pc, #100]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a18      	ldr	r2, [pc, #96]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004602:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fd feda 	bl	80023c0 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fed6 	bl	80023c0 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e057      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x478>
 800462e:	e04f      	b.n	80046d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004630:	4b0c      	ldr	r3, [pc, #48]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a0b      	ldr	r2, [pc, #44]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004636:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800463a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463c:	f7fd fec0 	bl	80023c0 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004644:	f7fd febc 	bl	80023c0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e03d      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	4b03      	ldr	r3, [pc, #12]	@ (8004664 <HAL_RCC_OscConfig+0x4cc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f0      	bne.n	8004644 <HAL_RCC_OscConfig+0x4ac>
 8004662:	e035      	b.n	80046d0 <HAL_RCC_OscConfig+0x538>
 8004664:	40023800 	.word	0x40023800
 8004668:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800466c:	4b1b      	ldr	r3, [pc, #108]	@ (80046dc <HAL_RCC_OscConfig+0x544>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d028      	beq.n	80046cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004684:	429a      	cmp	r2, r3
 8004686:	d121      	bne.n	80046cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004692:	429a      	cmp	r2, r3
 8004694:	d11a      	bne.n	80046cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800469c:	4013      	ands	r3, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d111      	bne.n	80046cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	085b      	lsrs	r3, r3, #1
 80046b4:	3b01      	subs	r3, #1
 80046b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023800 	.word	0x40023800

080046e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d101      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0d0      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046f8:	4b6a      	ldr	r3, [pc, #424]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 030f 	and.w	r3, r3, #15
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d910      	bls.n	8004728 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004706:	4b67      	ldr	r3, [pc, #412]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f023 020f 	bic.w	r2, r3, #15
 800470e:	4965      	ldr	r1, [pc, #404]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	4313      	orrs	r3, r2
 8004714:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d040      	beq.n	8004804 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d115      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a2:	4b41      	ldr	r3, [pc, #260]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d109      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e073      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b2:	4b3d      	ldr	r3, [pc, #244]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e06b      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047c2:	4b39      	ldr	r3, [pc, #228]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 0203 	bic.w	r2, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	4936      	ldr	r1, [pc, #216]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd fdf4 	bl	80023c0 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	e00a      	b.n	80047f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fd fdf0 	bl	80023c0 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e053      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f2:	4b2d      	ldr	r3, [pc, #180]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 020c 	and.w	r2, r3, #12
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	429a      	cmp	r2, r3
 8004802:	d1eb      	bne.n	80047dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 030f 	and.w	r3, r3, #15
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	429a      	cmp	r2, r3
 8004810:	d210      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004812:	4b24      	ldr	r3, [pc, #144]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f023 020f 	bic.w	r2, r3, #15
 800481a:	4922      	ldr	r1, [pc, #136]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	4313      	orrs	r3, r2
 8004820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800485e:	4b12      	ldr	r3, [pc, #72]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_ClockConfig+0x1c8>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	@ (80048ac <HAL_RCC_ClockConfig+0x1cc>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <HAL_RCC_ClockConfig+0x1d0>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_ClockConfig+0x1d4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd fd50 	bl	8002338 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08008148 	.word	0x08008148
 80048b0:	2000000c 	.word	0x2000000c
 80048b4:	20000010 	.word	0x20000010

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048bc:	b090      	sub	sp, #64	@ 0x40
 80048be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048c0:	2300      	movs	r3, #0
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c4:	2300      	movs	r3, #0
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048c8:	2300      	movs	r3, #0
 80048ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048d0:	4b59      	ldr	r3, [pc, #356]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d00d      	beq.n	80048f8 <HAL_RCC_GetSysClockFreq+0x40>
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f200 80a1 	bhi.w	8004a24 <HAL_RCC_GetSysClockFreq+0x16c>
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_GetSysClockFreq+0x34>
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d003      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ea:	e09b      	b.n	8004a24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ec:	4b53      	ldr	r3, [pc, #332]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x184>)
 80048ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048f0:	e09b      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f2:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 80048f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048f6:	e098      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004900:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004902:	4b4d      	ldr	r3, [pc, #308]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d028      	beq.n	8004960 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490e:	4b4a      	ldr	r3, [pc, #296]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	099b      	lsrs	r3, r3, #6
 8004914:	2200      	movs	r2, #0
 8004916:	623b      	str	r3, [r7, #32]
 8004918:	627a      	str	r2, [r7, #36]	@ 0x24
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004920:	2100      	movs	r1, #0
 8004922:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004924:	fb03 f201 	mul.w	r2, r3, r1
 8004928:	2300      	movs	r3, #0
 800492a:	fb00 f303 	mul.w	r3, r0, r3
 800492e:	4413      	add	r3, r2
 8004930:	4a43      	ldr	r2, [pc, #268]	@ (8004a40 <HAL_RCC_GetSysClockFreq+0x188>)
 8004932:	fba0 1202 	umull	r1, r2, r0, r2
 8004936:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004938:	460a      	mov	r2, r1
 800493a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800493c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493e:	4413      	add	r3, r2
 8004940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004944:	2200      	movs	r2, #0
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	61fa      	str	r2, [r7, #28]
 800494a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800494e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004952:	f7fc f947 	bl	8000be4 <__aeabi_uldivmod>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4613      	mov	r3, r2
 800495c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800495e:	e053      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004960:	4b35      	ldr	r3, [pc, #212]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	2200      	movs	r2, #0
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	617a      	str	r2, [r7, #20]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004972:	f04f 0b00 	mov.w	fp, #0
 8004976:	4652      	mov	r2, sl
 8004978:	465b      	mov	r3, fp
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	ebb2 080a 	subs.w	r8, r2, sl
 8004992:	eb63 090b 	sbc.w	r9, r3, fp
 8004996:	f04f 0200 	mov.w	r2, #0
 800499a:	f04f 0300 	mov.w	r3, #0
 800499e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80049a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80049a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80049aa:	ebb2 0408 	subs.w	r4, r2, r8
 80049ae:	eb63 0509 	sbc.w	r5, r3, r9
 80049b2:	f04f 0200 	mov.w	r2, #0
 80049b6:	f04f 0300 	mov.w	r3, #0
 80049ba:	00eb      	lsls	r3, r5, #3
 80049bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c0:	00e2      	lsls	r2, r4, #3
 80049c2:	4614      	mov	r4, r2
 80049c4:	461d      	mov	r5, r3
 80049c6:	eb14 030a 	adds.w	r3, r4, sl
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	eb45 030b 	adc.w	r3, r5, fp
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049de:	4629      	mov	r1, r5
 80049e0:	028b      	lsls	r3, r1, #10
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049e8:	4621      	mov	r1, r4
 80049ea:	028a      	lsls	r2, r1, #10
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	2200      	movs	r2, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	60fa      	str	r2, [r7, #12]
 80049f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049fc:	f7fc f8f2 	bl	8000be4 <__aeabi_uldivmod>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	4613      	mov	r3, r2
 8004a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	0c1b      	lsrs	r3, r3, #16
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	3301      	adds	r3, #1
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a22:	e002      	b.n	8004a2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b05      	ldr	r3, [pc, #20]	@ (8004a3c <HAL_RCC_GetSysClockFreq+0x184>)
 8004a26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3740      	adds	r7, #64	@ 0x40
 8004a30:	46bd      	mov	sp, r7
 8004a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	00f42400 	.word	0x00f42400
 8004a40:	017d7840 	.word	0x017d7840

08004a44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a48:	4b03      	ldr	r3, [pc, #12]	@ (8004a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	2000000c 	.word	0x2000000c

08004a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a60:	f7ff fff0 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a64:	4602      	mov	r2, r0
 8004a66:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	0a9b      	lsrs	r3, r3, #10
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	4903      	ldr	r1, [pc, #12]	@ (8004a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a72:	5ccb      	ldrb	r3, [r1, r3]
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	08008158 	.word	0x08008158

08004a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a88:	f7ff ffdc 	bl	8004a44 <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b05      	ldr	r3, [pc, #20]	@ (8004aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0b5b      	lsrs	r3, r3, #13
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4903      	ldr	r1, [pc, #12]	@ (8004aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	08008158 	.word	0x08008158

08004aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004abc:	2300      	movs	r3, #0
 8004abe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d012      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ad4:	4b69      	ldr	r3, [pc, #420]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a68      	ldr	r2, [pc, #416]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004ade:	6093      	str	r3, [r2, #8]
 8004ae0:	4b66      	ldr	r3, [pc, #408]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae2:	689a      	ldr	r2, [r3, #8]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae8:	4964      	ldr	r1, [pc, #400]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d017      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b06:	4b5d      	ldr	r3, [pc, #372]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b0c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	4959      	ldr	r1, [pc, #356]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b24:	d101      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b26:	2301      	movs	r3, #1
 8004b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b32:	2301      	movs	r3, #1
 8004b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d017      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b42:	4b4e      	ldr	r3, [pc, #312]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b48:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	494a      	ldr	r1, [pc, #296]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b60:	d101      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b62:	2301      	movs	r3, #1
 8004b64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 808b 	beq.w	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b90:	4b3a      	ldr	r3, [pc, #232]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	4a39      	ldr	r2, [pc, #228]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b9c:	4b37      	ldr	r3, [pc, #220]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ba8:	4b35      	ldr	r3, [pc, #212]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a34      	ldr	r2, [pc, #208]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb4:	f7fd fc04 	bl	80023c0 <HAL_GetTick>
 8004bb8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bbc:	f7fd fc00 	bl	80023c0 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b64      	cmp	r3, #100	@ 0x64
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e357      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bce:	4b2c      	ldr	r3, [pc, #176]	@ (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bda:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004be2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d035      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d02e      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf8:	4b20      	ldr	r3, [pc, #128]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c02:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c06:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c12:	4a1a      	ldr	r2, [pc, #104]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c18:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c1a:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c20:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d114      	bne.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd fbc8 	bl	80023c0 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd fbc4 	bl	80023c0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e319      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ee      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c62:	d111      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004c70:	4b04      	ldr	r3, [pc, #16]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c72:	400b      	ands	r3, r1
 8004c74:	4901      	ldr	r1, [pc, #4]	@ (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	608b      	str	r3, [r1, #8]
 8004c7a:	e00b      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	0ffffcff 	.word	0x0ffffcff
 8004c88:	4baa      	ldr	r3, [pc, #680]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4aa9      	ldr	r2, [pc, #676]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c8e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004c92:	6093      	str	r3, [r2, #8]
 8004c94:	4ba7      	ldr	r3, [pc, #668]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	49a4      	ldr	r1, [pc, #656]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d010      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cb2:	4ba0      	ldr	r3, [pc, #640]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb8:	4a9e      	ldr	r2, [pc, #632]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	4999      	ldr	r1, [pc, #612]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00a      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ce0:	4b94      	ldr	r3, [pc, #592]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cee:	4991      	ldr	r1, [pc, #580]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d02:	4b8c      	ldr	r3, [pc, #560]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004d10:	4988      	ldr	r1, [pc, #544]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d24:	4b83      	ldr	r3, [pc, #524]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d32:	4980      	ldr	r1, [pc, #512]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d46:	4b7b      	ldr	r3, [pc, #492]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4977      	ldr	r1, [pc, #476]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d68:	4b72      	ldr	r3, [pc, #456]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	496f      	ldr	r1, [pc, #444]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d90:	f023 020c 	bic.w	r2, r3, #12
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d98:	4966      	ldr	r1, [pc, #408]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dac:	4b61      	ldr	r3, [pc, #388]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004db2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dba:	495e      	ldr	r1, [pc, #376]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004dce:	4b59      	ldr	r3, [pc, #356]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dd4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	4955      	ldr	r1, [pc, #340]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004df0:	4b50      	ldr	r3, [pc, #320]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004df6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfe:	494d      	ldr	r1, [pc, #308]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004e12:	4b48      	ldr	r3, [pc, #288]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e18:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e20:	4944      	ldr	r1, [pc, #272]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e34:	4b3f      	ldr	r3, [pc, #252]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e42:	493c      	ldr	r1, [pc, #240]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e56:	4b37      	ldr	r3, [pc, #220]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e64:	4933      	ldr	r1, [pc, #204]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e78:	4b2e      	ldr	r3, [pc, #184]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e86:	492b      	ldr	r1, [pc, #172]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d011      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e9a:	4b26      	ldr	r3, [pc, #152]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ea8:	4922      	ldr	r1, [pc, #136]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eb8:	d101      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004eda:	4b16      	ldr	r3, [pc, #88]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ee8:	4912      	ldr	r1, [pc, #72]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00b      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0c:	4909      	ldr	r1, [pc, #36]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d006      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80d9 	beq.w	80050da <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f28:	4b02      	ldr	r3, [pc, #8]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a01      	ldr	r2, [pc, #4]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f32:	e001      	b.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3a:	f7fd fa41 	bl	80023c0 <HAL_GetTick>
 8004f3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f42:	f7fd fa3d 	bl	80023c0 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b64      	cmp	r3, #100	@ 0x64
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e194      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f54:	4b6c      	ldr	r3, [pc, #432]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d021      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d11d      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f74:	4b64      	ldr	r3, [pc, #400]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f7a:	0c1b      	lsrs	r3, r3, #16
 8004f7c:	f003 0303 	and.w	r3, r3, #3
 8004f80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f82:	4b61      	ldr	r3, [pc, #388]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f88:	0e1b      	lsrs	r3, r3, #24
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	019a      	lsls	r2, r3, #6
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	041b      	lsls	r3, r3, #16
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	061b      	lsls	r3, r3, #24
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	071b      	lsls	r3, r3, #28
 8004fa8:	4957      	ldr	r1, [pc, #348]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02e      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fda:	d129      	bne.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fe2:	0c1b      	lsrs	r3, r3, #16
 8004fe4:	f003 0303 	and.w	r3, r3, #3
 8004fe8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fea:	4b47      	ldr	r3, [pc, #284]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ff0:	0f1b      	lsrs	r3, r3, #28
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	019a      	lsls	r2, r3, #6
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	041b      	lsls	r3, r3, #16
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	061b      	lsls	r3, r3, #24
 800500a:	431a      	orrs	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	071b      	lsls	r3, r3, #28
 8005010:	493d      	ldr	r1, [pc, #244]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005018:	4b3b      	ldr	r3, [pc, #236]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800501e:	f023 021f 	bic.w	r2, r3, #31
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005026:	3b01      	subs	r3, #1
 8005028:	4937      	ldr	r1, [pc, #220]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d01d      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800503c:	4b32      	ldr	r3, [pc, #200]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005042:	0e1b      	lsrs	r3, r3, #24
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800504a:	4b2f      	ldr	r3, [pc, #188]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005050:	0f1b      	lsrs	r3, r3, #28
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	019a      	lsls	r2, r3, #6
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	431a      	orrs	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	071b      	lsls	r3, r3, #28
 8005070:	4925      	ldr	r1, [pc, #148]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005072:	4313      	orrs	r3, r2
 8005074:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d011      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	019a      	lsls	r2, r3, #6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	041b      	lsls	r3, r3, #16
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	071b      	lsls	r3, r3, #28
 80050a0:	4919      	ldr	r1, [pc, #100]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050a8:	4b17      	ldr	r3, [pc, #92]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a16      	ldr	r2, [pc, #88]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80050b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b4:	f7fd f984 	bl	80023c0 <HAL_GetTick>
 80050b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ba:	e008      	b.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050bc:	f7fd f980 	bl	80023c0 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b64      	cmp	r3, #100	@ 0x64
 80050c8:	d901      	bls.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e0d7      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d0f0      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	f040 80cd 	bne.w	800527c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80050e2:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a08      	ldr	r2, [pc, #32]	@ (8005108 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ee:	f7fd f967 	bl	80023c0 <HAL_GetTick>
 80050f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050f4:	e00a      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80050f6:	f7fd f963 	bl	80023c0 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b64      	cmp	r3, #100	@ 0x64
 8005102:	d903      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e0ba      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005108:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800510c:	4b5e      	ldr	r3, [pc, #376]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005118:	d0ed      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005136:	2b00      	cmp	r3, #0
 8005138:	d02e      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d12a      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005142:	4b51      	ldr	r3, [pc, #324]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005150:	4b4d      	ldr	r3, [pc, #308]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005156:	0f1b      	lsrs	r3, r3, #28
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	041b      	lsls	r3, r3, #16
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	4944      	ldr	r1, [pc, #272]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800517e:	4b42      	ldr	r3, [pc, #264]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005180:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005184:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	3b01      	subs	r3, #1
 800518e:	021b      	lsls	r3, r3, #8
 8005190:	493d      	ldr	r1, [pc, #244]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d022      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ac:	d11d      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051ae:	4b36      	ldr	r3, [pc, #216]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b4:	0e1b      	lsrs	r3, r3, #24
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051bc:	4b32      	ldr	r3, [pc, #200]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	0f1b      	lsrs	r3, r3, #28
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	019a      	lsls	r2, r3, #6
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	431a      	orrs	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	061b      	lsls	r3, r3, #24
 80051dc:	431a      	orrs	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	071b      	lsls	r3, r3, #28
 80051e2:	4929      	ldr	r1, [pc, #164]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d028      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051f6:	4b24      	ldr	r3, [pc, #144]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051fc:	0e1b      	lsrs	r3, r3, #24
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005204:	4b20      	ldr	r3, [pc, #128]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520a:	0c1b      	lsrs	r3, r3, #16
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	019a      	lsls	r2, r3, #6
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	041b      	lsls	r3, r3, #16
 800521c:	431a      	orrs	r2, r3
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	061b      	lsls	r3, r3, #24
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	071b      	lsls	r3, r3, #28
 800522a:	4917      	ldr	r1, [pc, #92]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800522c:	4313      	orrs	r3, r2
 800522e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005232:	4b15      	ldr	r3, [pc, #84]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005234:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005238:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	4911      	ldr	r1, [pc, #68]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005248:	4b0f      	ldr	r3, [pc, #60]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0e      	ldr	r2, [pc, #56]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800524e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005254:	f7fd f8b4 	bl	80023c0 <HAL_GetTick>
 8005258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800525a:	e008      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800525c:	f7fd f8b0 	bl	80023c0 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b64      	cmp	r3, #100	@ 0x64
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e007      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800526e:	4b06      	ldr	r3, [pc, #24]	@ (8005288 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800527a:	d1ef      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3720      	adds	r7, #32
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e025      	b.n	80052ec <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fc ff0d 	bl	80020d4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	3304      	adds	r3, #4
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f001 fe0b 	bl	8006ee8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	461a      	mov	r2, r3
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	f001 fe5f 	bl	8006fa0 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e049      	b.n	800539a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fd92 	bl	8001e44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3304      	adds	r3, #4
 8005330:	4619      	mov	r1, r3
 8005332:	4610      	mov	r0, r2
 8005334:	f000 fc6e 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b082      	sub	sp, #8
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e049      	b.n	8005448 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d106      	bne.n	80053ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f841 	bl	8005450 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	4619      	mov	r1, r3
 80053e0:	4610      	mov	r0, r2
 80053e2:	f000 fc17 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d109      	bne.n	800548c <HAL_TIM_PWM_Start_IT+0x28>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	bf14      	ite	ne
 8005484:	2301      	movne	r3, #1
 8005486:	2300      	moveq	r3, #0
 8005488:	b2db      	uxtb	r3, r3
 800548a:	e03c      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0xa2>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b04      	cmp	r3, #4
 8005490:	d109      	bne.n	80054a6 <HAL_TIM_PWM_Start_IT+0x42>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b01      	cmp	r3, #1
 800549c:	bf14      	ite	ne
 800549e:	2301      	movne	r3, #1
 80054a0:	2300      	moveq	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	e02f      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0xa2>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	d109      	bne.n	80054c0 <HAL_TIM_PWM_Start_IT+0x5c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	bf14      	ite	ne
 80054b8:	2301      	movne	r3, #1
 80054ba:	2300      	moveq	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	e022      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0xa2>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d109      	bne.n	80054da <HAL_TIM_PWM_Start_IT+0x76>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	bf14      	ite	ne
 80054d2:	2301      	movne	r3, #1
 80054d4:	2300      	moveq	r3, #0
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	e015      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0xa2>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b10      	cmp	r3, #16
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start_IT+0x90>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e008      	b.n	8005506 <HAL_TIM_PWM_Start_IT+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e0dd      	b.n	80056ca <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <HAL_TIM_PWM_Start_IT+0xba>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800551c:	e023      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x102>
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d104      	bne.n	800552e <HAL_TIM_PWM_Start_IT+0xca>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800552c:	e01b      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x102>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d104      	bne.n	800553e <HAL_TIM_PWM_Start_IT+0xda>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800553c:	e013      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x102>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	d104      	bne.n	800554e <HAL_TIM_PWM_Start_IT+0xea>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800554c:	e00b      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x102>
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	2b10      	cmp	r3, #16
 8005552:	d104      	bne.n	800555e <HAL_TIM_PWM_Start_IT+0xfa>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555c:	e003      	b.n	8005566 <HAL_TIM_PWM_Start_IT+0x102>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d841      	bhi.n	80055f0 <HAL_TIM_PWM_Start_IT+0x18c>
 800556c:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <HAL_TIM_PWM_Start_IT+0x110>)
 800556e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005572:	bf00      	nop
 8005574:	080055a9 	.word	0x080055a9
 8005578:	080055f1 	.word	0x080055f1
 800557c:	080055f1 	.word	0x080055f1
 8005580:	080055f1 	.word	0x080055f1
 8005584:	080055bb 	.word	0x080055bb
 8005588:	080055f1 	.word	0x080055f1
 800558c:	080055f1 	.word	0x080055f1
 8005590:	080055f1 	.word	0x080055f1
 8005594:	080055cd 	.word	0x080055cd
 8005598:	080055f1 	.word	0x080055f1
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	080055f1 	.word	0x080055f1
 80055a4:	080055df 	.word	0x080055df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68da      	ldr	r2, [r3, #12]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0202 	orr.w	r2, r2, #2
 80055b6:	60da      	str	r2, [r3, #12]
      break;
 80055b8:	e01d      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0204 	orr.w	r2, r2, #4
 80055c8:	60da      	str	r2, [r3, #12]
      break;
 80055ca:	e014      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f042 0208 	orr.w	r2, r2, #8
 80055da:	60da      	str	r2, [r3, #12]
      break;
 80055dc:	e00b      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0210 	orr.w	r2, r2, #16
 80055ec:	60da      	str	r2, [r3, #12]
      break;
 80055ee:	e002      	b.n	80055f6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	73fb      	strb	r3, [r7, #15]
      break;
 80055f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d165      	bne.n	80056c8 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2201      	movs	r2, #1
 8005602:	6839      	ldr	r1, [r7, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 ff22 	bl	800644e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a31      	ldr	r2, [pc, #196]	@ (80056d4 <HAL_TIM_PWM_Start_IT+0x270>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d004      	beq.n	800561e <HAL_TIM_PWM_Start_IT+0x1ba>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <HAL_TIM_PWM_Start_IT+0x274>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d101      	bne.n	8005622 <HAL_TIM_PWM_Start_IT+0x1be>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <HAL_TIM_PWM_Start_IT+0x1c0>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d007      	beq.n	8005638 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a25      	ldr	r2, [pc, #148]	@ (80056d4 <HAL_TIM_PWM_Start_IT+0x270>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d022      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564a:	d01d      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a22      	ldr	r2, [pc, #136]	@ (80056dc <HAL_TIM_PWM_Start_IT+0x278>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d018      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a21      	ldr	r2, [pc, #132]	@ (80056e0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d013      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1f      	ldr	r2, [pc, #124]	@ (80056e4 <HAL_TIM_PWM_Start_IT+0x280>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d00e      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1a      	ldr	r2, [pc, #104]	@ (80056d8 <HAL_TIM_PWM_Start_IT+0x274>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d009      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1b      	ldr	r2, [pc, #108]	@ (80056e8 <HAL_TIM_PWM_Start_IT+0x284>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_TIM_PWM_Start_IT+0x224>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1a      	ldr	r2, [pc, #104]	@ (80056ec <HAL_TIM_PWM_Start_IT+0x288>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d115      	bne.n	80056b4 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689a      	ldr	r2, [r3, #8]
 800568e:	4b18      	ldr	r3, [pc, #96]	@ (80056f0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b06      	cmp	r3, #6
 8005698:	d015      	beq.n	80056c6 <HAL_TIM_PWM_Start_IT+0x262>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056a0:	d011      	beq.n	80056c6 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f042 0201 	orr.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b2:	e008      	b.n	80056c6 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	e000      	b.n	80056c8 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40001800 	.word	0x40001800
 80056f0:	00010007 	.word	0x00010007

080056f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d020      	beq.n	8005758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01b      	beq.n	8005758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0202 	mvn.w	r2, #2
 8005728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2201      	movs	r2, #1
 800572e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fa4a 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005744:	e005      	b.n	8005752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa3c 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fa4d 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	d020      	beq.n	80057a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0204 	mvn.w	r2, #4
 8005774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2202      	movs	r2, #2
 800577a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa24 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005790:	e005      	b.n	800579e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa16 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa27 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d020      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f003 0308 	and.w	r3, r3, #8
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01b      	beq.n	80057f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f06f 0208 	mvn.w	r2, #8
 80057c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2204      	movs	r2, #4
 80057c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f003 0303 	and.w	r3, r3, #3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d003      	beq.n	80057de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9fe 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80057dc:	e005      	b.n	80057ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9f0 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa01 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f003 0310 	and.w	r3, r3, #16
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01b      	beq.n	800583c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f06f 0210 	mvn.w	r2, #16
 800580c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2208      	movs	r2, #8
 8005812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f9d8 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005828:	e005      	b.n	8005836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f9ca 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9db 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00c      	beq.n	8005860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f06f 0201 	mvn.w	r2, #1
 8005858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9a8 	bl	8005bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fe9d 	bl	80065c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00c      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fe95 	bl	80065dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00c      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f995 	bl	8005c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00c      	beq.n	80058fa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d007      	beq.n	80058fa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f06f 0220 	mvn.w	r2, #32
 80058f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fe5d 	bl	80065b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005910:	2300      	movs	r3, #0
 8005912:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800591e:	2302      	movs	r3, #2
 8005920:	e0ff      	b.n	8005b22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b14      	cmp	r3, #20
 800592e:	f200 80f0 	bhi.w	8005b12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005932:	a201      	add	r2, pc, #4	@ (adr r2, 8005938 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005938:	0800598d 	.word	0x0800598d
 800593c:	08005b13 	.word	0x08005b13
 8005940:	08005b13 	.word	0x08005b13
 8005944:	08005b13 	.word	0x08005b13
 8005948:	080059cd 	.word	0x080059cd
 800594c:	08005b13 	.word	0x08005b13
 8005950:	08005b13 	.word	0x08005b13
 8005954:	08005b13 	.word	0x08005b13
 8005958:	08005a0f 	.word	0x08005a0f
 800595c:	08005b13 	.word	0x08005b13
 8005960:	08005b13 	.word	0x08005b13
 8005964:	08005b13 	.word	0x08005b13
 8005968:	08005a4f 	.word	0x08005a4f
 800596c:	08005b13 	.word	0x08005b13
 8005970:	08005b13 	.word	0x08005b13
 8005974:	08005b13 	.word	0x08005b13
 8005978:	08005a91 	.word	0x08005a91
 800597c:	08005b13 	.word	0x08005b13
 8005980:	08005b13 	.word	0x08005b13
 8005984:	08005b13 	.word	0x08005b13
 8005988:	08005ad1 	.word	0x08005ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f9ea 	bl	8005d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0208 	orr.w	r2, r2, #8
 80059a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	619a      	str	r2, [r3, #24]
      break;
 80059ca:	e0a5      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa3c 	bl	8005e50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6999      	ldr	r1, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	021a      	lsls	r2, r3, #8
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	619a      	str	r2, [r3, #24]
      break;
 8005a0c:	e084      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fa93 	bl	8005f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0208 	orr.w	r2, r2, #8
 8005a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0204 	bic.w	r2, r2, #4
 8005a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	61da      	str	r2, [r3, #28]
      break;
 8005a4c:	e064      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fae9 	bl	800602c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69d9      	ldr	r1, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	021a      	lsls	r2, r3, #8
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	61da      	str	r2, [r3, #28]
      break;
 8005a8e:	e043      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fb20 	bl	80060dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0208 	orr.w	r2, r2, #8
 8005aaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	691a      	ldr	r2, [r3, #16]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ace:	e023      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68b9      	ldr	r1, [r7, #8]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fb52 	bl	8006180 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005afa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	021a      	lsls	r2, r3, #8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	430a      	orrs	r2, r1
 8005b0e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b10:	e002      	b.n	8005b18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	75fb      	strb	r3, [r7, #23]
      break;
 8005b16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e031      	b.n	8005ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fb66 	bl	8006228 <TIM_SlaveTimer_SetConfig>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d009      	beq.n	8005b76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e018      	b.n	8005ba8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a46      	ldr	r2, [pc, #280]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a43      	ldr	r2, [pc, #268]	@ (8005d44 <TIM_Base_SetConfig+0x130>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a42      	ldr	r2, [pc, #264]	@ (8005d48 <TIM_Base_SetConfig+0x134>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a41      	ldr	r2, [pc, #260]	@ (8005d4c <TIM_Base_SetConfig+0x138>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a40      	ldr	r2, [pc, #256]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a35      	ldr	r2, [pc, #212]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c74:	d027      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a32      	ldr	r2, [pc, #200]	@ (8005d44 <TIM_Base_SetConfig+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d023      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a31      	ldr	r2, [pc, #196]	@ (8005d48 <TIM_Base_SetConfig+0x134>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a30      	ldr	r2, [pc, #192]	@ (8005d4c <TIM_Base_SetConfig+0x138>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a2f      	ldr	r2, [pc, #188]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a2e      	ldr	r2, [pc, #184]	@ (8005d54 <TIM_Base_SetConfig+0x140>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8005d58 <TIM_Base_SetConfig+0x144>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d5c <TIM_Base_SetConfig+0x148>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a2b      	ldr	r2, [pc, #172]	@ (8005d60 <TIM_Base_SetConfig+0x14c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	@ (8005d64 <TIM_Base_SetConfig+0x150>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a29      	ldr	r2, [pc, #164]	@ (8005d68 <TIM_Base_SetConfig+0x154>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a10      	ldr	r2, [pc, #64]	@ (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a12      	ldr	r2, [pc, #72]	@ (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d105      	bne.n	8005d32 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f023 0201 	bic.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	611a      	str	r2, [r3, #16]
  }
}
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	40010000 	.word	0x40010000
 8005d44:	40000400 	.word	0x40000400
 8005d48:	40000800 	.word	0x40000800
 8005d4c:	40000c00 	.word	0x40000c00
 8005d50:	40010400 	.word	0x40010400
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800
 8005d60:	40001800 	.word	0x40001800
 8005d64:	40001c00 	.word	0x40001c00
 8005d68:	40002000 	.word	0x40002000

08005d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f023 0201 	bic.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	4b2b      	ldr	r3, [pc, #172]	@ (8005e44 <TIM_OC1_SetConfig+0xd8>)
 8005d98:	4013      	ands	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0303 	bic.w	r3, r3, #3
 8005da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f023 0302 	bic.w	r3, r3, #2
 8005db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a21      	ldr	r2, [pc, #132]	@ (8005e48 <TIM_OC1_SetConfig+0xdc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC1_SetConfig+0x64>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a20      	ldr	r2, [pc, #128]	@ (8005e4c <TIM_OC1_SetConfig+0xe0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10c      	bne.n	8005dea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0308 	bic.w	r3, r3, #8
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f023 0304 	bic.w	r3, r3, #4
 8005de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <TIM_OC1_SetConfig+0xdc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_OC1_SetConfig+0x8e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a15      	ldr	r2, [pc, #84]	@ (8005e4c <TIM_OC1_SetConfig+0xe0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	fffeff8f 	.word	0xfffeff8f
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400

08005e50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f023 0210 	bic.w	r2, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4b2e      	ldr	r3, [pc, #184]	@ (8005f34 <TIM_OC2_SetConfig+0xe4>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	f023 0320 	bic.w	r3, r3, #32
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a23      	ldr	r2, [pc, #140]	@ (8005f38 <TIM_OC2_SetConfig+0xe8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d003      	beq.n	8005eb8 <TIM_OC2_SetConfig+0x68>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a22      	ldr	r2, [pc, #136]	@ (8005f3c <TIM_OC2_SetConfig+0xec>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10d      	bne.n	8005ed4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <TIM_OC2_SetConfig+0xe8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC2_SetConfig+0x94>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a17      	ldr	r2, [pc, #92]	@ (8005f3c <TIM_OC2_SetConfig+0xec>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d113      	bne.n	8005f0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	621a      	str	r2, [r3, #32]
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	feff8fff 	.word	0xfeff8fff
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8006020 <TIM_OC3_SetConfig+0xe0>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0303 	bic.w	r3, r3, #3
 8005f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a22      	ldr	r2, [pc, #136]	@ (8006024 <TIM_OC3_SetConfig+0xe4>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d003      	beq.n	8005fa6 <TIM_OC3_SetConfig+0x66>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a21      	ldr	r2, [pc, #132]	@ (8006028 <TIM_OC3_SetConfig+0xe8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d10d      	bne.n	8005fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a17      	ldr	r2, [pc, #92]	@ (8006024 <TIM_OC3_SetConfig+0xe4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d003      	beq.n	8005fd2 <TIM_OC3_SetConfig+0x92>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a16      	ldr	r2, [pc, #88]	@ (8006028 <TIM_OC3_SetConfig+0xe8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d113      	bne.n	8005ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	621a      	str	r2, [r3, #32]
}
 8006014:	bf00      	nop
 8006016:	371c      	adds	r7, #28
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	fffeff8f 	.word	0xfffeff8f
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400

0800602c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4b1e      	ldr	r3, [pc, #120]	@ (80060d0 <TIM_OC4_SetConfig+0xa4>)
 8006058:	4013      	ands	r3, r2
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	021b      	lsls	r3, r3, #8
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4313      	orrs	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	031b      	lsls	r3, r3, #12
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a13      	ldr	r2, [pc, #76]	@ (80060d4 <TIM_OC4_SetConfig+0xa8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d003      	beq.n	8006094 <TIM_OC4_SetConfig+0x68>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a12      	ldr	r2, [pc, #72]	@ (80060d8 <TIM_OC4_SetConfig+0xac>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d109      	bne.n	80060a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800609a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	019b      	lsls	r3, r3, #6
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	621a      	str	r2, [r3, #32]
}
 80060c2:	bf00      	nop
 80060c4:	371c      	adds	r7, #28
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	feff8fff 	.word	0xfeff8fff
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40010400 	.word	0x40010400

080060dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	4b1b      	ldr	r3, [pc, #108]	@ (8006174 <TIM_OC5_SetConfig+0x98>)
 8006108:	4013      	ands	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800611c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a12      	ldr	r2, [pc, #72]	@ (8006178 <TIM_OC5_SetConfig+0x9c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC5_SetConfig+0x5e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a11      	ldr	r2, [pc, #68]	@ (800617c <TIM_OC5_SetConfig+0xa0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d109      	bne.n	800614e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006140:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	621a      	str	r2, [r3, #32]
}
 8006168:	bf00      	nop
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr
 8006174:	fffeff8f 	.word	0xfffeff8f
 8006178:	40010000 	.word	0x40010000
 800617c:	40010400 	.word	0x40010400

08006180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a1b      	ldr	r3, [r3, #32]
 8006194:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4b1c      	ldr	r3, [pc, #112]	@ (800621c <TIM_OC6_SetConfig+0x9c>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	021b      	lsls	r3, r3, #8
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	051b      	lsls	r3, r3, #20
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a13      	ldr	r2, [pc, #76]	@ (8006220 <TIM_OC6_SetConfig+0xa0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC6_SetConfig+0x60>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a12      	ldr	r2, [pc, #72]	@ (8006224 <TIM_OC6_SetConfig+0xa4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d109      	bne.n	80061f4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	feff8fff 	.word	0xfeff8fff
 8006220:	40010000 	.word	0x40010000
 8006224:	40010400 	.word	0x40010400

08006228 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006244:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4b3e      	ldr	r3, [pc, #248]	@ (800634c <TIM_SlaveTimer_SetConfig+0x124>)
 8006254:	4013      	ands	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b70      	cmp	r3, #112	@ 0x70
 8006270:	d01a      	beq.n	80062a8 <TIM_SlaveTimer_SetConfig+0x80>
 8006272:	2b70      	cmp	r3, #112	@ 0x70
 8006274:	d860      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 8006276:	2b60      	cmp	r3, #96	@ 0x60
 8006278:	d054      	beq.n	8006324 <TIM_SlaveTimer_SetConfig+0xfc>
 800627a:	2b60      	cmp	r3, #96	@ 0x60
 800627c:	d85c      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 800627e:	2b50      	cmp	r3, #80	@ 0x50
 8006280:	d046      	beq.n	8006310 <TIM_SlaveTimer_SetConfig+0xe8>
 8006282:	2b50      	cmp	r3, #80	@ 0x50
 8006284:	d858      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 8006286:	2b40      	cmp	r3, #64	@ 0x40
 8006288:	d019      	beq.n	80062be <TIM_SlaveTimer_SetConfig+0x96>
 800628a:	2b40      	cmp	r3, #64	@ 0x40
 800628c:	d854      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 800628e:	2b30      	cmp	r3, #48	@ 0x30
 8006290:	d055      	beq.n	800633e <TIM_SlaveTimer_SetConfig+0x116>
 8006292:	2b30      	cmp	r3, #48	@ 0x30
 8006294:	d850      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d051      	beq.n	800633e <TIM_SlaveTimer_SetConfig+0x116>
 800629a:	2b20      	cmp	r3, #32
 800629c:	d84c      	bhi.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d04d      	beq.n	800633e <TIM_SlaveTimer_SetConfig+0x116>
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d04b      	beq.n	800633e <TIM_SlaveTimer_SetConfig+0x116>
 80062a6:	e047      	b.n	8006338 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80062b8:	f000 f8a9 	bl	800640e <TIM_ETR_SetConfig>
      break;
 80062bc:	e040      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d101      	bne.n	80062ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e03b      	b.n	8006342 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 0201 	bic.w	r2, r2, #1
 80062e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	621a      	str	r2, [r3, #32]
      break;
 800630e:	e017      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800631c:	461a      	mov	r2, r3
 800631e:	f000 f817 	bl	8006350 <TIM_TI1_ConfigInputStage>
      break;
 8006322:	e00d      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006330:	461a      	mov	r2, r3
 8006332:	f000 f83c 	bl	80063ae <TIM_TI2_ConfigInputStage>
      break;
 8006336:	e003      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	75fb      	strb	r3, [r7, #23]
      break;
 800633c:	e000      	b.n	8006340 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800633e:	bf00      	nop
  }

  return status;
 8006340:	7dfb      	ldrb	r3, [r7, #23]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	fffefff8 	.word	0xfffefff8

08006350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006350:	b480      	push	{r7}
 8006352:	b087      	sub	sp, #28
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800637a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 030a 	bic.w	r3, r3, #10
 800638c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	4313      	orrs	r3, r2
 8006394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	621a      	str	r2, [r3, #32]
}
 80063a2:	bf00      	nop
 80063a4:	371c      	adds	r7, #28
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b087      	sub	sp, #28
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	60f8      	str	r0, [r7, #12]
 80063b6:	60b9      	str	r1, [r7, #8]
 80063b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	f023 0210 	bic.w	r2, r3, #16
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	011b      	lsls	r3, r3, #4
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800640e:	b480      	push	{r7}
 8006410:	b087      	sub	sp, #28
 8006412:	af00      	add	r7, sp, #0
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	607a      	str	r2, [r7, #4]
 800641a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006428:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	021a      	lsls	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	431a      	orrs	r2, r3
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4313      	orrs	r3, r2
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	609a      	str	r2, [r3, #8]
}
 8006442:	bf00      	nop
 8006444:	371c      	adds	r7, #28
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800644e:	b480      	push	{r7}
 8006450:	b087      	sub	sp, #28
 8006452:	af00      	add	r7, sp, #0
 8006454:	60f8      	str	r0, [r7, #12]
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	2201      	movs	r2, #1
 8006462:	fa02 f303 	lsl.w	r3, r2, r3
 8006466:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	43db      	mvns	r3, r3
 8006470:	401a      	ands	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f003 031f 	and.w	r3, r3, #31
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	fa01 f303 	lsl.w	r3, r1, r3
 8006486:	431a      	orrs	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	621a      	str	r2, [r3, #32]
}
 800648c:	bf00      	nop
 800648e:	371c      	adds	r7, #28
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e06d      	b.n	800658c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a30      	ldr	r2, [pc, #192]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d004      	beq.n	80064e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2f      	ldr	r2, [pc, #188]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d108      	bne.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80064ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	4313      	orrs	r3, r2
 8006506:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a20      	ldr	r2, [pc, #128]	@ (8006598 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d022      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006522:	d01d      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a1d      	ldr	r2, [pc, #116]	@ (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d018      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a1c      	ldr	r2, [pc, #112]	@ (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d013      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a1a      	ldr	r2, [pc, #104]	@ (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00e      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a15      	ldr	r2, [pc, #84]	@ (800659c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d009      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a16      	ldr	r2, [pc, #88]	@ (80065ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a15      	ldr	r2, [pc, #84]	@ (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d10c      	bne.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006566:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	4313      	orrs	r3, r2
 8006570:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	40010000 	.word	0x40010000
 800659c:	40010400 	.word	0x40010400
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40014000 	.word	0x40014000
 80065b0:	40001800 	.word	0x40001800

080065b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e040      	b.n	8006684 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb fc70 	bl	8001ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2224      	movs	r2, #36	@ 0x24
 800661c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 fa8c 	bl	8006b54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f825 	bl	800668c <UART_SetConfig>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e01b      	b.n	8006684 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800665a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689a      	ldr	r2, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800666a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f042 0201 	orr.w	r2, r2, #1
 800667a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fb0b 	bl	8006c98 <UART_CheckIdleState>
 8006682:	4603      	mov	r3, r0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b088      	sub	sp, #32
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689a      	ldr	r2, [r3, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4ba6      	ldr	r3, [pc, #664]	@ (8006950 <UART_SetConfig+0x2c4>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	6979      	ldr	r1, [r7, #20]
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	697a      	ldr	r2, [r7, #20]
 80066fa:	430a      	orrs	r2, r1
 80066fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a94      	ldr	r2, [pc, #592]	@ (8006954 <UART_SetConfig+0x2c8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d120      	bne.n	800674a <UART_SetConfig+0xbe>
 8006708:	4b93      	ldr	r3, [pc, #588]	@ (8006958 <UART_SetConfig+0x2cc>)
 800670a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b03      	cmp	r3, #3
 8006714:	d816      	bhi.n	8006744 <UART_SetConfig+0xb8>
 8006716:	a201      	add	r2, pc, #4	@ (adr r2, 800671c <UART_SetConfig+0x90>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	0800672d 	.word	0x0800672d
 8006720:	08006739 	.word	0x08006739
 8006724:	08006733 	.word	0x08006733
 8006728:	0800673f 	.word	0x0800673f
 800672c:	2301      	movs	r3, #1
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e150      	b.n	80069d4 <UART_SetConfig+0x348>
 8006732:	2302      	movs	r3, #2
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e14d      	b.n	80069d4 <UART_SetConfig+0x348>
 8006738:	2304      	movs	r3, #4
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e14a      	b.n	80069d4 <UART_SetConfig+0x348>
 800673e:	2308      	movs	r3, #8
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e147      	b.n	80069d4 <UART_SetConfig+0x348>
 8006744:	2310      	movs	r3, #16
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e144      	b.n	80069d4 <UART_SetConfig+0x348>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a83      	ldr	r2, [pc, #524]	@ (800695c <UART_SetConfig+0x2d0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d132      	bne.n	80067ba <UART_SetConfig+0x12e>
 8006754:	4b80      	ldr	r3, [pc, #512]	@ (8006958 <UART_SetConfig+0x2cc>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800675a:	f003 030c 	and.w	r3, r3, #12
 800675e:	2b0c      	cmp	r3, #12
 8006760:	d828      	bhi.n	80067b4 <UART_SetConfig+0x128>
 8006762:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <UART_SetConfig+0xdc>)
 8006764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006768:	0800679d 	.word	0x0800679d
 800676c:	080067b5 	.word	0x080067b5
 8006770:	080067b5 	.word	0x080067b5
 8006774:	080067b5 	.word	0x080067b5
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067b5 	.word	0x080067b5
 8006780:	080067b5 	.word	0x080067b5
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067a3 	.word	0x080067a3
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067b5 	.word	0x080067b5
 8006798:	080067af 	.word	0x080067af
 800679c:	2300      	movs	r3, #0
 800679e:	77fb      	strb	r3, [r7, #31]
 80067a0:	e118      	b.n	80069d4 <UART_SetConfig+0x348>
 80067a2:	2302      	movs	r3, #2
 80067a4:	77fb      	strb	r3, [r7, #31]
 80067a6:	e115      	b.n	80069d4 <UART_SetConfig+0x348>
 80067a8:	2304      	movs	r3, #4
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e112      	b.n	80069d4 <UART_SetConfig+0x348>
 80067ae:	2308      	movs	r3, #8
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e10f      	b.n	80069d4 <UART_SetConfig+0x348>
 80067b4:	2310      	movs	r3, #16
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e10c      	b.n	80069d4 <UART_SetConfig+0x348>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a68      	ldr	r2, [pc, #416]	@ (8006960 <UART_SetConfig+0x2d4>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d120      	bne.n	8006806 <UART_SetConfig+0x17a>
 80067c4:	4b64      	ldr	r3, [pc, #400]	@ (8006958 <UART_SetConfig+0x2cc>)
 80067c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067ce:	2b30      	cmp	r3, #48	@ 0x30
 80067d0:	d013      	beq.n	80067fa <UART_SetConfig+0x16e>
 80067d2:	2b30      	cmp	r3, #48	@ 0x30
 80067d4:	d814      	bhi.n	8006800 <UART_SetConfig+0x174>
 80067d6:	2b20      	cmp	r3, #32
 80067d8:	d009      	beq.n	80067ee <UART_SetConfig+0x162>
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d810      	bhi.n	8006800 <UART_SetConfig+0x174>
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d002      	beq.n	80067e8 <UART_SetConfig+0x15c>
 80067e2:	2b10      	cmp	r3, #16
 80067e4:	d006      	beq.n	80067f4 <UART_SetConfig+0x168>
 80067e6:	e00b      	b.n	8006800 <UART_SetConfig+0x174>
 80067e8:	2300      	movs	r3, #0
 80067ea:	77fb      	strb	r3, [r7, #31]
 80067ec:	e0f2      	b.n	80069d4 <UART_SetConfig+0x348>
 80067ee:	2302      	movs	r3, #2
 80067f0:	77fb      	strb	r3, [r7, #31]
 80067f2:	e0ef      	b.n	80069d4 <UART_SetConfig+0x348>
 80067f4:	2304      	movs	r3, #4
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e0ec      	b.n	80069d4 <UART_SetConfig+0x348>
 80067fa:	2308      	movs	r3, #8
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e0e9      	b.n	80069d4 <UART_SetConfig+0x348>
 8006800:	2310      	movs	r3, #16
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e0e6      	b.n	80069d4 <UART_SetConfig+0x348>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a56      	ldr	r2, [pc, #344]	@ (8006964 <UART_SetConfig+0x2d8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d120      	bne.n	8006852 <UART_SetConfig+0x1c6>
 8006810:	4b51      	ldr	r3, [pc, #324]	@ (8006958 <UART_SetConfig+0x2cc>)
 8006812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006816:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800681a:	2bc0      	cmp	r3, #192	@ 0xc0
 800681c:	d013      	beq.n	8006846 <UART_SetConfig+0x1ba>
 800681e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006820:	d814      	bhi.n	800684c <UART_SetConfig+0x1c0>
 8006822:	2b80      	cmp	r3, #128	@ 0x80
 8006824:	d009      	beq.n	800683a <UART_SetConfig+0x1ae>
 8006826:	2b80      	cmp	r3, #128	@ 0x80
 8006828:	d810      	bhi.n	800684c <UART_SetConfig+0x1c0>
 800682a:	2b00      	cmp	r3, #0
 800682c:	d002      	beq.n	8006834 <UART_SetConfig+0x1a8>
 800682e:	2b40      	cmp	r3, #64	@ 0x40
 8006830:	d006      	beq.n	8006840 <UART_SetConfig+0x1b4>
 8006832:	e00b      	b.n	800684c <UART_SetConfig+0x1c0>
 8006834:	2300      	movs	r3, #0
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e0cc      	b.n	80069d4 <UART_SetConfig+0x348>
 800683a:	2302      	movs	r3, #2
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e0c9      	b.n	80069d4 <UART_SetConfig+0x348>
 8006840:	2304      	movs	r3, #4
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0c6      	b.n	80069d4 <UART_SetConfig+0x348>
 8006846:	2308      	movs	r3, #8
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e0c3      	b.n	80069d4 <UART_SetConfig+0x348>
 800684c:	2310      	movs	r3, #16
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e0c0      	b.n	80069d4 <UART_SetConfig+0x348>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a44      	ldr	r2, [pc, #272]	@ (8006968 <UART_SetConfig+0x2dc>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d125      	bne.n	80068a8 <UART_SetConfig+0x21c>
 800685c:	4b3e      	ldr	r3, [pc, #248]	@ (8006958 <UART_SetConfig+0x2cc>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800686a:	d017      	beq.n	800689c <UART_SetConfig+0x210>
 800686c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006870:	d817      	bhi.n	80068a2 <UART_SetConfig+0x216>
 8006872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006876:	d00b      	beq.n	8006890 <UART_SetConfig+0x204>
 8006878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800687c:	d811      	bhi.n	80068a2 <UART_SetConfig+0x216>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <UART_SetConfig+0x1fe>
 8006882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006886:	d006      	beq.n	8006896 <UART_SetConfig+0x20a>
 8006888:	e00b      	b.n	80068a2 <UART_SetConfig+0x216>
 800688a:	2300      	movs	r3, #0
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0a1      	b.n	80069d4 <UART_SetConfig+0x348>
 8006890:	2302      	movs	r3, #2
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e09e      	b.n	80069d4 <UART_SetConfig+0x348>
 8006896:	2304      	movs	r3, #4
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e09b      	b.n	80069d4 <UART_SetConfig+0x348>
 800689c:	2308      	movs	r3, #8
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e098      	b.n	80069d4 <UART_SetConfig+0x348>
 80068a2:	2310      	movs	r3, #16
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e095      	b.n	80069d4 <UART_SetConfig+0x348>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a2f      	ldr	r2, [pc, #188]	@ (800696c <UART_SetConfig+0x2e0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d125      	bne.n	80068fe <UART_SetConfig+0x272>
 80068b2:	4b29      	ldr	r3, [pc, #164]	@ (8006958 <UART_SetConfig+0x2cc>)
 80068b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80068bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068c0:	d017      	beq.n	80068f2 <UART_SetConfig+0x266>
 80068c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80068c6:	d817      	bhi.n	80068f8 <UART_SetConfig+0x26c>
 80068c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068cc:	d00b      	beq.n	80068e6 <UART_SetConfig+0x25a>
 80068ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068d2:	d811      	bhi.n	80068f8 <UART_SetConfig+0x26c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d003      	beq.n	80068e0 <UART_SetConfig+0x254>
 80068d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068dc:	d006      	beq.n	80068ec <UART_SetConfig+0x260>
 80068de:	e00b      	b.n	80068f8 <UART_SetConfig+0x26c>
 80068e0:	2301      	movs	r3, #1
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e076      	b.n	80069d4 <UART_SetConfig+0x348>
 80068e6:	2302      	movs	r3, #2
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e073      	b.n	80069d4 <UART_SetConfig+0x348>
 80068ec:	2304      	movs	r3, #4
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e070      	b.n	80069d4 <UART_SetConfig+0x348>
 80068f2:	2308      	movs	r3, #8
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e06d      	b.n	80069d4 <UART_SetConfig+0x348>
 80068f8:	2310      	movs	r3, #16
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e06a      	b.n	80069d4 <UART_SetConfig+0x348>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a1b      	ldr	r2, [pc, #108]	@ (8006970 <UART_SetConfig+0x2e4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d138      	bne.n	800697a <UART_SetConfig+0x2ee>
 8006908:	4b13      	ldr	r3, [pc, #76]	@ (8006958 <UART_SetConfig+0x2cc>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006912:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006916:	d017      	beq.n	8006948 <UART_SetConfig+0x2bc>
 8006918:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800691c:	d82a      	bhi.n	8006974 <UART_SetConfig+0x2e8>
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006922:	d00b      	beq.n	800693c <UART_SetConfig+0x2b0>
 8006924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006928:	d824      	bhi.n	8006974 <UART_SetConfig+0x2e8>
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <UART_SetConfig+0x2aa>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006932:	d006      	beq.n	8006942 <UART_SetConfig+0x2b6>
 8006934:	e01e      	b.n	8006974 <UART_SetConfig+0x2e8>
 8006936:	2300      	movs	r3, #0
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e04b      	b.n	80069d4 <UART_SetConfig+0x348>
 800693c:	2302      	movs	r3, #2
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e048      	b.n	80069d4 <UART_SetConfig+0x348>
 8006942:	2304      	movs	r3, #4
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e045      	b.n	80069d4 <UART_SetConfig+0x348>
 8006948:	2308      	movs	r3, #8
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e042      	b.n	80069d4 <UART_SetConfig+0x348>
 800694e:	bf00      	nop
 8006950:	efff69f3 	.word	0xefff69f3
 8006954:	40011000 	.word	0x40011000
 8006958:	40023800 	.word	0x40023800
 800695c:	40004400 	.word	0x40004400
 8006960:	40004800 	.word	0x40004800
 8006964:	40004c00 	.word	0x40004c00
 8006968:	40005000 	.word	0x40005000
 800696c:	40011400 	.word	0x40011400
 8006970:	40007800 	.word	0x40007800
 8006974:	2310      	movs	r3, #16
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e02c      	b.n	80069d4 <UART_SetConfig+0x348>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a72      	ldr	r2, [pc, #456]	@ (8006b48 <UART_SetConfig+0x4bc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d125      	bne.n	80069d0 <UART_SetConfig+0x344>
 8006984:	4b71      	ldr	r3, [pc, #452]	@ (8006b4c <UART_SetConfig+0x4c0>)
 8006986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800698a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800698e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006992:	d017      	beq.n	80069c4 <UART_SetConfig+0x338>
 8006994:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006998:	d817      	bhi.n	80069ca <UART_SetConfig+0x33e>
 800699a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800699e:	d00b      	beq.n	80069b8 <UART_SetConfig+0x32c>
 80069a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069a4:	d811      	bhi.n	80069ca <UART_SetConfig+0x33e>
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <UART_SetConfig+0x326>
 80069aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069ae:	d006      	beq.n	80069be <UART_SetConfig+0x332>
 80069b0:	e00b      	b.n	80069ca <UART_SetConfig+0x33e>
 80069b2:	2300      	movs	r3, #0
 80069b4:	77fb      	strb	r3, [r7, #31]
 80069b6:	e00d      	b.n	80069d4 <UART_SetConfig+0x348>
 80069b8:	2302      	movs	r3, #2
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e00a      	b.n	80069d4 <UART_SetConfig+0x348>
 80069be:	2304      	movs	r3, #4
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e007      	b.n	80069d4 <UART_SetConfig+0x348>
 80069c4:	2308      	movs	r3, #8
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e004      	b.n	80069d4 <UART_SetConfig+0x348>
 80069ca:	2310      	movs	r3, #16
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e001      	b.n	80069d4 <UART_SetConfig+0x348>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069dc:	d15b      	bne.n	8006a96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069de:	7ffb      	ldrb	r3, [r7, #31]
 80069e0:	2b08      	cmp	r3, #8
 80069e2:	d828      	bhi.n	8006a36 <UART_SetConfig+0x3aa>
 80069e4:	a201      	add	r2, pc, #4	@ (adr r2, 80069ec <UART_SetConfig+0x360>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a11 	.word	0x08006a11
 80069f0:	08006a19 	.word	0x08006a19
 80069f4:	08006a21 	.word	0x08006a21
 80069f8:	08006a37 	.word	0x08006a37
 80069fc:	08006a27 	.word	0x08006a27
 8006a00:	08006a37 	.word	0x08006a37
 8006a04:	08006a37 	.word	0x08006a37
 8006a08:	08006a37 	.word	0x08006a37
 8006a0c:	08006a2f 	.word	0x08006a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a10:	f7fe f824 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 8006a14:	61b8      	str	r0, [r7, #24]
        break;
 8006a16:	e013      	b.n	8006a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a18:	f7fe f834 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 8006a1c:	61b8      	str	r0, [r7, #24]
        break;
 8006a1e:	e00f      	b.n	8006a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a20:	4b4b      	ldr	r3, [pc, #300]	@ (8006b50 <UART_SetConfig+0x4c4>)
 8006a22:	61bb      	str	r3, [r7, #24]
        break;
 8006a24:	e00c      	b.n	8006a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a26:	f7fd ff47 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006a2a:	61b8      	str	r0, [r7, #24]
        break;
 8006a2c:	e008      	b.n	8006a40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a32:	61bb      	str	r3, [r7, #24]
        break;
 8006a34:	e004      	b.n	8006a40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d074      	beq.n	8006b30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	005a      	lsls	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	441a      	add	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b0f      	cmp	r3, #15
 8006a60:	d916      	bls.n	8006a90 <UART_SetConfig+0x404>
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a68:	d212      	bcs.n	8006a90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f023 030f 	bic.w	r3, r3, #15
 8006a72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	89fb      	ldrh	r3, [r7, #14]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	89fa      	ldrh	r2, [r7, #14]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	e04f      	b.n	8006b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	77bb      	strb	r3, [r7, #30]
 8006a94:	e04c      	b.n	8006b30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a96:	7ffb      	ldrb	r3, [r7, #31]
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d828      	bhi.n	8006aee <UART_SetConfig+0x462>
 8006a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa4 <UART_SetConfig+0x418>)
 8006a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa2:	bf00      	nop
 8006aa4:	08006ac9 	.word	0x08006ac9
 8006aa8:	08006ad1 	.word	0x08006ad1
 8006aac:	08006ad9 	.word	0x08006ad9
 8006ab0:	08006aef 	.word	0x08006aef
 8006ab4:	08006adf 	.word	0x08006adf
 8006ab8:	08006aef 	.word	0x08006aef
 8006abc:	08006aef 	.word	0x08006aef
 8006ac0:	08006aef 	.word	0x08006aef
 8006ac4:	08006ae7 	.word	0x08006ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ac8:	f7fd ffc8 	bl	8004a5c <HAL_RCC_GetPCLK1Freq>
 8006acc:	61b8      	str	r0, [r7, #24]
        break;
 8006ace:	e013      	b.n	8006af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ad0:	f7fd ffd8 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 8006ad4:	61b8      	str	r0, [r7, #24]
        break;
 8006ad6:	e00f      	b.n	8006af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8006b50 <UART_SetConfig+0x4c4>)
 8006ada:	61bb      	str	r3, [r7, #24]
        break;
 8006adc:	e00c      	b.n	8006af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ade:	f7fd feeb 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8006ae2:	61b8      	str	r0, [r7, #24]
        break;
 8006ae4:	e008      	b.n	8006af8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006aea:	61bb      	str	r3, [r7, #24]
        break;
 8006aec:	e004      	b.n	8006af8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	77bb      	strb	r3, [r7, #30]
        break;
 8006af6:	bf00      	nop
    }

    if (pclk != 0U)
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d018      	beq.n	8006b30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	085a      	lsrs	r2, r3, #1
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	441a      	add	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	2b0f      	cmp	r3, #15
 8006b16:	d909      	bls.n	8006b2c <UART_SetConfig+0x4a0>
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b1e:	d205      	bcs.n	8006b2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e001      	b.n	8006b30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006b3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3720      	adds	r7, #32
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	40007c00 	.word	0x40007c00
 8006b4c:	40023800 	.word	0x40023800
 8006b50:	00f42400 	.word	0x00f42400

08006b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	f003 0308 	and.w	r3, r3, #8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00a      	beq.n	8006b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00a      	beq.n	8006ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc6:	f003 0304 	and.w	r3, r3, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00a      	beq.n	8006be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00a      	beq.n	8006c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	430a      	orrs	r2, r1
 8006c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0a:	f003 0320 	and.w	r3, r3, #32
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00a      	beq.n	8006c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	430a      	orrs	r2, r1
 8006c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d01a      	beq.n	8006c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c52:	d10a      	bne.n	8006c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08c      	sub	sp, #48	@ 0x30
 8006c9c:	af02      	add	r7, sp, #8
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca8:	f7fb fb8a 	bl	80023c0 <HAL_GetTick>
 8006cac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0308 	and.w	r3, r3, #8
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d12e      	bne.n	8006d1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f83b 	bl	8006d46 <UART_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d021      	beq.n	8006d1a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cea:	623b      	str	r3, [r7, #32]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	69b9      	ldr	r1, [r7, #24]
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	617b      	str	r3, [r7, #20]
   return(result);
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e011      	b.n	8006d3e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	@ 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	603b      	str	r3, [r7, #0]
 8006d52:	4613      	mov	r3, r2
 8006d54:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d56:	e04f      	b.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d5e:	d04b      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d60:	f7fb fb2e 	bl	80023c0 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d302      	bcc.n	8006d76 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	e04e      	b.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0304 	and.w	r3, r3, #4
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d037      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2b80      	cmp	r3, #128	@ 0x80
 8006d8c:	d034      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d031      	beq.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	d110      	bne.n	8006dc4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2208      	movs	r2, #8
 8006da8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f000 f838 	bl	8006e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2208      	movs	r2, #8
 8006db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e029      	b.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dd2:	d111      	bne.n	8006df8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ddc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f81e 	bl	8006e20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e00f      	b.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	69da      	ldr	r2, [r3, #28]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	4013      	ands	r3, r2
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	bf0c      	ite	eq
 8006e08:	2301      	moveq	r3, #1
 8006e0a:	2300      	movne	r3, #0
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	461a      	mov	r2, r3
 8006e10:	79fb      	ldrb	r3, [r7, #7]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d0a0      	beq.n	8006d58 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b095      	sub	sp, #84	@ 0x54
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	461a      	mov	r2, r3
 8006e44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e6      	bne.n	8006e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	f023 0301 	bic.w	r3, r3, #1
 8006e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3308      	adds	r3, #8
 8006e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e5      	bne.n	8006e5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d118      	bne.n	8006ec8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0310 	bic.w	r3, r3, #16
 8006eaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e6      	bne.n	8006e96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006edc:	bf00      	nop
 8006ede:	3754      	adds	r7, #84	@ 0x54
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d121      	bne.n	8006f3e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681a      	ldr	r2, [r3, #0]
 8006efe:	4b27      	ldr	r3, [pc, #156]	@ (8006f9c <FMC_SDRAM_Init+0xb4>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	6851      	ldr	r1, [r2, #4]
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	6892      	ldr	r2, [r2, #8]
 8006f0a:	4311      	orrs	r1, r2
 8006f0c:	683a      	ldr	r2, [r7, #0]
 8006f0e:	68d2      	ldr	r2, [r2, #12]
 8006f10:	4311      	orrs	r1, r2
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	6912      	ldr	r2, [r2, #16]
 8006f16:	4311      	orrs	r1, r2
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	6952      	ldr	r2, [r2, #20]
 8006f1c:	4311      	orrs	r1, r2
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	6992      	ldr	r2, [r2, #24]
 8006f22:	4311      	orrs	r1, r2
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	69d2      	ldr	r2, [r2, #28]
 8006f28:	4311      	orrs	r1, r2
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	6a12      	ldr	r2, [r2, #32]
 8006f2e:	4311      	orrs	r1, r2
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f34:	430a      	orrs	r2, r1
 8006f36:	431a      	orrs	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	601a      	str	r2, [r3, #0]
 8006f3c:	e026      	b.n	8006f8c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	69d9      	ldr	r1, [r3, #28]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	4319      	orrs	r1, r3
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f54:	430b      	orrs	r3, r1
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	4b0e      	ldr	r3, [pc, #56]	@ (8006f9c <FMC_SDRAM_Init+0xb4>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	6851      	ldr	r1, [r2, #4]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	6892      	ldr	r2, [r2, #8]
 8006f6c:	4311      	orrs	r1, r2
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	68d2      	ldr	r2, [r2, #12]
 8006f72:	4311      	orrs	r1, r2
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	6912      	ldr	r2, [r2, #16]
 8006f78:	4311      	orrs	r1, r2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	6952      	ldr	r2, [r2, #20]
 8006f7e:	4311      	orrs	r1, r2
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	6992      	ldr	r2, [r2, #24]
 8006f84:	430a      	orrs	r2, r1
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	ffff8000 	.word	0xffff8000

08006fa0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d128      	bne.n	8007004 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	1e59      	subs	r1, r3, #1
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	011b      	lsls	r3, r3, #4
 8006fc8:	4319      	orrs	r1, r3
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	4319      	orrs	r1, r3
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	031b      	lsls	r3, r3, #12
 8006fdc:	4319      	orrs	r1, r3
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	4319      	orrs	r1, r3
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	051b      	lsls	r3, r3, #20
 8006ff0:	4319      	orrs	r1, r3
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	3b01      	subs	r3, #1
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	430b      	orrs	r3, r1
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	609a      	str	r2, [r3, #8]
 8007002:	e02d      	b.n	8007060 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	4b19      	ldr	r3, [pc, #100]	@ (8007070 <FMC_SDRAM_Timing_Init+0xd0>)
 800700a:	4013      	ands	r3, r2
 800700c:	68ba      	ldr	r2, [r7, #8]
 800700e:	68d2      	ldr	r2, [r2, #12]
 8007010:	3a01      	subs	r2, #1
 8007012:	0311      	lsls	r1, r2, #12
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	6952      	ldr	r2, [r2, #20]
 8007018:	3a01      	subs	r2, #1
 800701a:	0512      	lsls	r2, r2, #20
 800701c:	430a      	orrs	r2, r1
 800701e:	431a      	orrs	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	1e59      	subs	r1, r3, #1
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	3b01      	subs	r3, #1
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	4319      	orrs	r1, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	3b01      	subs	r3, #1
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	4319      	orrs	r1, r3
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	3b01      	subs	r3, #1
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	4319      	orrs	r1, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	3b01      	subs	r3, #1
 8007056:	061b      	lsls	r3, r3, #24
 8007058:	430b      	orrs	r3, r1
 800705a:	431a      	orrs	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	ff0f0fff 	.word	0xff0f0fff

08007074 <memset>:
 8007074:	4402      	add	r2, r0
 8007076:	4603      	mov	r3, r0
 8007078:	4293      	cmp	r3, r2
 800707a:	d100      	bne.n	800707e <memset+0xa>
 800707c:	4770      	bx	lr
 800707e:	f803 1b01 	strb.w	r1, [r3], #1
 8007082:	e7f9      	b.n	8007078 <memset+0x4>

08007084 <__libc_init_array>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	4d0d      	ldr	r5, [pc, #52]	@ (80070bc <__libc_init_array+0x38>)
 8007088:	4c0d      	ldr	r4, [pc, #52]	@ (80070c0 <__libc_init_array+0x3c>)
 800708a:	1b64      	subs	r4, r4, r5
 800708c:	10a4      	asrs	r4, r4, #2
 800708e:	2600      	movs	r6, #0
 8007090:	42a6      	cmp	r6, r4
 8007092:	d109      	bne.n	80070a8 <__libc_init_array+0x24>
 8007094:	4d0b      	ldr	r5, [pc, #44]	@ (80070c4 <__libc_init_array+0x40>)
 8007096:	4c0c      	ldr	r4, [pc, #48]	@ (80070c8 <__libc_init_array+0x44>)
 8007098:	f001 f84a 	bl	8008130 <_init>
 800709c:	1b64      	subs	r4, r4, r5
 800709e:	10a4      	asrs	r4, r4, #2
 80070a0:	2600      	movs	r6, #0
 80070a2:	42a6      	cmp	r6, r4
 80070a4:	d105      	bne.n	80070b2 <__libc_init_array+0x2e>
 80070a6:	bd70      	pop	{r4, r5, r6, pc}
 80070a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070ac:	4798      	blx	r3
 80070ae:	3601      	adds	r6, #1
 80070b0:	e7ee      	b.n	8007090 <__libc_init_array+0xc>
 80070b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b6:	4798      	blx	r3
 80070b8:	3601      	adds	r6, #1
 80070ba:	e7f2      	b.n	80070a2 <__libc_init_array+0x1e>
 80070bc:	08008348 	.word	0x08008348
 80070c0:	08008348 	.word	0x08008348
 80070c4:	08008348 	.word	0x08008348
 80070c8:	0800834c 	.word	0x0800834c
 80070cc:	00000000 	.word	0x00000000

080070d0 <sin>:
 80070d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070d2:	ec53 2b10 	vmov	r2, r3, d0
 80070d6:	4826      	ldr	r0, [pc, #152]	@ (8007170 <sin+0xa0>)
 80070d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80070dc:	4281      	cmp	r1, r0
 80070de:	d807      	bhi.n	80070f0 <sin+0x20>
 80070e0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8007168 <sin+0x98>
 80070e4:	2000      	movs	r0, #0
 80070e6:	b005      	add	sp, #20
 80070e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80070ec:	f000 b90c 	b.w	8007308 <__kernel_sin>
 80070f0:	4820      	ldr	r0, [pc, #128]	@ (8007174 <sin+0xa4>)
 80070f2:	4281      	cmp	r1, r0
 80070f4:	d908      	bls.n	8007108 <sin+0x38>
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	f7f9 f889 	bl	8000210 <__aeabi_dsub>
 80070fe:	ec41 0b10 	vmov	d0, r0, r1
 8007102:	b005      	add	sp, #20
 8007104:	f85d fb04 	ldr.w	pc, [sp], #4
 8007108:	4668      	mov	r0, sp
 800710a:	f000 f9b9 	bl	8007480 <__ieee754_rem_pio2>
 800710e:	f000 0003 	and.w	r0, r0, #3
 8007112:	2801      	cmp	r0, #1
 8007114:	d00c      	beq.n	8007130 <sin+0x60>
 8007116:	2802      	cmp	r0, #2
 8007118:	d011      	beq.n	800713e <sin+0x6e>
 800711a:	b9e8      	cbnz	r0, 8007158 <sin+0x88>
 800711c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007120:	ed9d 0b00 	vldr	d0, [sp]
 8007124:	2001      	movs	r0, #1
 8007126:	f000 f8ef 	bl	8007308 <__kernel_sin>
 800712a:	ec51 0b10 	vmov	r0, r1, d0
 800712e:	e7e6      	b.n	80070fe <sin+0x2e>
 8007130:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007134:	ed9d 0b00 	vldr	d0, [sp]
 8007138:	f000 f81e 	bl	8007178 <__kernel_cos>
 800713c:	e7f5      	b.n	800712a <sin+0x5a>
 800713e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007142:	ed9d 0b00 	vldr	d0, [sp]
 8007146:	2001      	movs	r0, #1
 8007148:	f000 f8de 	bl	8007308 <__kernel_sin>
 800714c:	ec53 2b10 	vmov	r2, r3, d0
 8007150:	4610      	mov	r0, r2
 8007152:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007156:	e7d2      	b.n	80070fe <sin+0x2e>
 8007158:	ed9d 1b02 	vldr	d1, [sp, #8]
 800715c:	ed9d 0b00 	vldr	d0, [sp]
 8007160:	f000 f80a 	bl	8007178 <__kernel_cos>
 8007164:	e7f2      	b.n	800714c <sin+0x7c>
 8007166:	bf00      	nop
	...
 8007170:	3fe921fb 	.word	0x3fe921fb
 8007174:	7fefffff 	.word	0x7fefffff

08007178 <__kernel_cos>:
 8007178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717c:	ec57 6b10 	vmov	r6, r7, d0
 8007180:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007184:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007188:	ed8d 1b00 	vstr	d1, [sp]
 800718c:	d206      	bcs.n	800719c <__kernel_cos+0x24>
 800718e:	4630      	mov	r0, r6
 8007190:	4639      	mov	r1, r7
 8007192:	f7f9 fc8f 	bl	8000ab4 <__aeabi_d2iz>
 8007196:	2800      	cmp	r0, #0
 8007198:	f000 8088 	beq.w	80072ac <__kernel_cos+0x134>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 f9ec 	bl	8000580 <__aeabi_dmul>
 80071a8:	4b51      	ldr	r3, [pc, #324]	@ (80072f0 <__kernel_cos+0x178>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	4604      	mov	r4, r0
 80071ae:	460d      	mov	r5, r1
 80071b0:	f7f9 f9e6 	bl	8000580 <__aeabi_dmul>
 80071b4:	a340      	add	r3, pc, #256	@ (adr r3, 80072b8 <__kernel_cos+0x140>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	4682      	mov	sl, r0
 80071bc:	468b      	mov	fp, r1
 80071be:	4620      	mov	r0, r4
 80071c0:	4629      	mov	r1, r5
 80071c2:	f7f9 f9dd 	bl	8000580 <__aeabi_dmul>
 80071c6:	a33e      	add	r3, pc, #248	@ (adr r3, 80072c0 <__kernel_cos+0x148>)
 80071c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071cc:	f7f9 f822 	bl	8000214 <__adddf3>
 80071d0:	4622      	mov	r2, r4
 80071d2:	462b      	mov	r3, r5
 80071d4:	f7f9 f9d4 	bl	8000580 <__aeabi_dmul>
 80071d8:	a33b      	add	r3, pc, #236	@ (adr r3, 80072c8 <__kernel_cos+0x150>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f817 	bl	8000210 <__aeabi_dsub>
 80071e2:	4622      	mov	r2, r4
 80071e4:	462b      	mov	r3, r5
 80071e6:	f7f9 f9cb 	bl	8000580 <__aeabi_dmul>
 80071ea:	a339      	add	r3, pc, #228	@ (adr r3, 80072d0 <__kernel_cos+0x158>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 f810 	bl	8000214 <__adddf3>
 80071f4:	4622      	mov	r2, r4
 80071f6:	462b      	mov	r3, r5
 80071f8:	f7f9 f9c2 	bl	8000580 <__aeabi_dmul>
 80071fc:	a336      	add	r3, pc, #216	@ (adr r3, 80072d8 <__kernel_cos+0x160>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 f805 	bl	8000210 <__aeabi_dsub>
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	f7f9 f9b9 	bl	8000580 <__aeabi_dmul>
 800720e:	a334      	add	r3, pc, #208	@ (adr r3, 80072e0 <__kernel_cos+0x168>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f8 fffe 	bl	8000214 <__adddf3>
 8007218:	4622      	mov	r2, r4
 800721a:	462b      	mov	r3, r5
 800721c:	f7f9 f9b0 	bl	8000580 <__aeabi_dmul>
 8007220:	4622      	mov	r2, r4
 8007222:	462b      	mov	r3, r5
 8007224:	f7f9 f9ac 	bl	8000580 <__aeabi_dmul>
 8007228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800722c:	4604      	mov	r4, r0
 800722e:	460d      	mov	r5, r1
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f9 f9a4 	bl	8000580 <__aeabi_dmul>
 8007238:	460b      	mov	r3, r1
 800723a:	4602      	mov	r2, r0
 800723c:	4629      	mov	r1, r5
 800723e:	4620      	mov	r0, r4
 8007240:	f7f8 ffe6 	bl	8000210 <__aeabi_dsub>
 8007244:	4b2b      	ldr	r3, [pc, #172]	@ (80072f4 <__kernel_cos+0x17c>)
 8007246:	4598      	cmp	r8, r3
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	d810      	bhi.n	8007270 <__kernel_cos+0xf8>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4650      	mov	r0, sl
 8007254:	4659      	mov	r1, fp
 8007256:	f7f8 ffdb 	bl	8000210 <__aeabi_dsub>
 800725a:	460b      	mov	r3, r1
 800725c:	4926      	ldr	r1, [pc, #152]	@ (80072f8 <__kernel_cos+0x180>)
 800725e:	4602      	mov	r2, r0
 8007260:	2000      	movs	r0, #0
 8007262:	f7f8 ffd5 	bl	8000210 <__aeabi_dsub>
 8007266:	ec41 0b10 	vmov	d0, r0, r1
 800726a:	b003      	add	sp, #12
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	4b22      	ldr	r3, [pc, #136]	@ (80072fc <__kernel_cos+0x184>)
 8007272:	4921      	ldr	r1, [pc, #132]	@ (80072f8 <__kernel_cos+0x180>)
 8007274:	4598      	cmp	r8, r3
 8007276:	bf8c      	ite	hi
 8007278:	4d21      	ldrhi	r5, [pc, #132]	@ (8007300 <__kernel_cos+0x188>)
 800727a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800727e:	2400      	movs	r4, #0
 8007280:	4622      	mov	r2, r4
 8007282:	462b      	mov	r3, r5
 8007284:	2000      	movs	r0, #0
 8007286:	f7f8 ffc3 	bl	8000210 <__aeabi_dsub>
 800728a:	4622      	mov	r2, r4
 800728c:	4680      	mov	r8, r0
 800728e:	4689      	mov	r9, r1
 8007290:	462b      	mov	r3, r5
 8007292:	4650      	mov	r0, sl
 8007294:	4659      	mov	r1, fp
 8007296:	f7f8 ffbb 	bl	8000210 <__aeabi_dsub>
 800729a:	4632      	mov	r2, r6
 800729c:	463b      	mov	r3, r7
 800729e:	f7f8 ffb7 	bl	8000210 <__aeabi_dsub>
 80072a2:	4602      	mov	r2, r0
 80072a4:	460b      	mov	r3, r1
 80072a6:	4640      	mov	r0, r8
 80072a8:	4649      	mov	r1, r9
 80072aa:	e7da      	b.n	8007262 <__kernel_cos+0xea>
 80072ac:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80072e8 <__kernel_cos+0x170>
 80072b0:	e7db      	b.n	800726a <__kernel_cos+0xf2>
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	be8838d4 	.word	0xbe8838d4
 80072bc:	bda8fae9 	.word	0xbda8fae9
 80072c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80072c4:	3e21ee9e 	.word	0x3e21ee9e
 80072c8:	809c52ad 	.word	0x809c52ad
 80072cc:	3e927e4f 	.word	0x3e927e4f
 80072d0:	19cb1590 	.word	0x19cb1590
 80072d4:	3efa01a0 	.word	0x3efa01a0
 80072d8:	16c15177 	.word	0x16c15177
 80072dc:	3f56c16c 	.word	0x3f56c16c
 80072e0:	5555554c 	.word	0x5555554c
 80072e4:	3fa55555 	.word	0x3fa55555
 80072e8:	00000000 	.word	0x00000000
 80072ec:	3ff00000 	.word	0x3ff00000
 80072f0:	3fe00000 	.word	0x3fe00000
 80072f4:	3fd33332 	.word	0x3fd33332
 80072f8:	3ff00000 	.word	0x3ff00000
 80072fc:	3fe90000 	.word	0x3fe90000
 8007300:	3fd20000 	.word	0x3fd20000
 8007304:	00000000 	.word	0x00000000

08007308 <__kernel_sin>:
 8007308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730c:	ec55 4b10 	vmov	r4, r5, d0
 8007310:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007314:	b085      	sub	sp, #20
 8007316:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800731a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800731e:	4680      	mov	r8, r0
 8007320:	d205      	bcs.n	800732e <__kernel_sin+0x26>
 8007322:	4620      	mov	r0, r4
 8007324:	4629      	mov	r1, r5
 8007326:	f7f9 fbc5 	bl	8000ab4 <__aeabi_d2iz>
 800732a:	2800      	cmp	r0, #0
 800732c:	d052      	beq.n	80073d4 <__kernel_sin+0xcc>
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f9 f923 	bl	8000580 <__aeabi_dmul>
 800733a:	4682      	mov	sl, r0
 800733c:	468b      	mov	fp, r1
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	4620      	mov	r0, r4
 8007344:	4629      	mov	r1, r5
 8007346:	f7f9 f91b 	bl	8000580 <__aeabi_dmul>
 800734a:	a342      	add	r3, pc, #264	@ (adr r3, 8007454 <__kernel_sin+0x14c>)
 800734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007350:	e9cd 0100 	strd	r0, r1, [sp]
 8007354:	4650      	mov	r0, sl
 8007356:	4659      	mov	r1, fp
 8007358:	f7f9 f912 	bl	8000580 <__aeabi_dmul>
 800735c:	a33f      	add	r3, pc, #252	@ (adr r3, 800745c <__kernel_sin+0x154>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	f7f8 ff55 	bl	8000210 <__aeabi_dsub>
 8007366:	4652      	mov	r2, sl
 8007368:	465b      	mov	r3, fp
 800736a:	f7f9 f909 	bl	8000580 <__aeabi_dmul>
 800736e:	a33d      	add	r3, pc, #244	@ (adr r3, 8007464 <__kernel_sin+0x15c>)
 8007370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007374:	f7f8 ff4e 	bl	8000214 <__adddf3>
 8007378:	4652      	mov	r2, sl
 800737a:	465b      	mov	r3, fp
 800737c:	f7f9 f900 	bl	8000580 <__aeabi_dmul>
 8007380:	a33a      	add	r3, pc, #232	@ (adr r3, 800746c <__kernel_sin+0x164>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f8 ff43 	bl	8000210 <__aeabi_dsub>
 800738a:	4652      	mov	r2, sl
 800738c:	465b      	mov	r3, fp
 800738e:	f7f9 f8f7 	bl	8000580 <__aeabi_dmul>
 8007392:	a338      	add	r3, pc, #224	@ (adr r3, 8007474 <__kernel_sin+0x16c>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f8 ff3c 	bl	8000214 <__adddf3>
 800739c:	4606      	mov	r6, r0
 800739e:	460f      	mov	r7, r1
 80073a0:	f1b8 0f00 	cmp.w	r8, #0
 80073a4:	d11b      	bne.n	80073de <__kernel_sin+0xd6>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	4650      	mov	r0, sl
 80073ac:	4659      	mov	r1, fp
 80073ae:	f7f9 f8e7 	bl	8000580 <__aeabi_dmul>
 80073b2:	a325      	add	r3, pc, #148	@ (adr r3, 8007448 <__kernel_sin+0x140>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	f7f8 ff2a 	bl	8000210 <__aeabi_dsub>
 80073bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073c0:	f7f9 f8de 	bl	8000580 <__aeabi_dmul>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4620      	mov	r0, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	f7f8 ff22 	bl	8000214 <__adddf3>
 80073d0:	4604      	mov	r4, r0
 80073d2:	460d      	mov	r5, r1
 80073d4:	ec45 4b10 	vmov	d0, r4, r5
 80073d8:	b005      	add	sp, #20
 80073da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007450 <__kernel_sin+0x148>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	f7f9 f8cb 	bl	8000580 <__aeabi_dmul>
 80073ea:	4632      	mov	r2, r6
 80073ec:	4680      	mov	r8, r0
 80073ee:	4689      	mov	r9, r1
 80073f0:	463b      	mov	r3, r7
 80073f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073f6:	f7f9 f8c3 	bl	8000580 <__aeabi_dmul>
 80073fa:	4602      	mov	r2, r0
 80073fc:	460b      	mov	r3, r1
 80073fe:	4640      	mov	r0, r8
 8007400:	4649      	mov	r1, r9
 8007402:	f7f8 ff05 	bl	8000210 <__aeabi_dsub>
 8007406:	4652      	mov	r2, sl
 8007408:	465b      	mov	r3, fp
 800740a:	f7f9 f8b9 	bl	8000580 <__aeabi_dmul>
 800740e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007412:	f7f8 fefd 	bl	8000210 <__aeabi_dsub>
 8007416:	a30c      	add	r3, pc, #48	@ (adr r3, 8007448 <__kernel_sin+0x140>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007424:	f7f9 f8ac 	bl	8000580 <__aeabi_dmul>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4630      	mov	r0, r6
 800742e:	4639      	mov	r1, r7
 8007430:	f7f8 fef0 	bl	8000214 <__adddf3>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f8 fee8 	bl	8000210 <__aeabi_dsub>
 8007440:	e7c6      	b.n	80073d0 <__kernel_sin+0xc8>
 8007442:	bf00      	nop
 8007444:	f3af 8000 	nop.w
 8007448:	55555549 	.word	0x55555549
 800744c:	3fc55555 	.word	0x3fc55555
 8007450:	3fe00000 	.word	0x3fe00000
 8007454:	5acfd57c 	.word	0x5acfd57c
 8007458:	3de5d93a 	.word	0x3de5d93a
 800745c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007460:	3e5ae5e6 	.word	0x3e5ae5e6
 8007464:	57b1fe7d 	.word	0x57b1fe7d
 8007468:	3ec71de3 	.word	0x3ec71de3
 800746c:	19c161d5 	.word	0x19c161d5
 8007470:	3f2a01a0 	.word	0x3f2a01a0
 8007474:	1110f8a6 	.word	0x1110f8a6
 8007478:	3f811111 	.word	0x3f811111
 800747c:	00000000 	.word	0x00000000

08007480 <__ieee754_rem_pio2>:
 8007480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007484:	ec57 6b10 	vmov	r6, r7, d0
 8007488:	4bc5      	ldr	r3, [pc, #788]	@ (80077a0 <__ieee754_rem_pio2+0x320>)
 800748a:	b08d      	sub	sp, #52	@ 0x34
 800748c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007490:	4598      	cmp	r8, r3
 8007492:	4604      	mov	r4, r0
 8007494:	9704      	str	r7, [sp, #16]
 8007496:	d807      	bhi.n	80074a8 <__ieee754_rem_pio2+0x28>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	ed80 0b00 	vstr	d0, [r0]
 80074a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80074a4:	2500      	movs	r5, #0
 80074a6:	e028      	b.n	80074fa <__ieee754_rem_pio2+0x7a>
 80074a8:	4bbe      	ldr	r3, [pc, #760]	@ (80077a4 <__ieee754_rem_pio2+0x324>)
 80074aa:	4598      	cmp	r8, r3
 80074ac:	d878      	bhi.n	80075a0 <__ieee754_rem_pio2+0x120>
 80074ae:	9b04      	ldr	r3, [sp, #16]
 80074b0:	4dbd      	ldr	r5, [pc, #756]	@ (80077a8 <__ieee754_rem_pio2+0x328>)
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	4630      	mov	r0, r6
 80074b6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007768 <__ieee754_rem_pio2+0x2e8>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	4639      	mov	r1, r7
 80074be:	dd38      	ble.n	8007532 <__ieee754_rem_pio2+0xb2>
 80074c0:	f7f8 fea6 	bl	8000210 <__aeabi_dsub>
 80074c4:	45a8      	cmp	r8, r5
 80074c6:	4606      	mov	r6, r0
 80074c8:	460f      	mov	r7, r1
 80074ca:	d01a      	beq.n	8007502 <__ieee754_rem_pio2+0x82>
 80074cc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007770 <__ieee754_rem_pio2+0x2f0>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 fe9d 	bl	8000210 <__aeabi_dsub>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4680      	mov	r8, r0
 80074dc:	4689      	mov	r9, r1
 80074de:	4630      	mov	r0, r6
 80074e0:	4639      	mov	r1, r7
 80074e2:	f7f8 fe95 	bl	8000210 <__aeabi_dsub>
 80074e6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007770 <__ieee754_rem_pio2+0x2f0>)
 80074e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ec:	f7f8 fe90 	bl	8000210 <__aeabi_dsub>
 80074f0:	e9c4 8900 	strd	r8, r9, [r4]
 80074f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074f8:	2501      	movs	r5, #1
 80074fa:	4628      	mov	r0, r5
 80074fc:	b00d      	add	sp, #52	@ 0x34
 80074fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007502:	a39d      	add	r3, pc, #628	@ (adr r3, 8007778 <__ieee754_rem_pio2+0x2f8>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f8 fe82 	bl	8000210 <__aeabi_dsub>
 800750c:	a39c      	add	r3, pc, #624	@ (adr r3, 8007780 <__ieee754_rem_pio2+0x300>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	f7f8 fe7b 	bl	8000210 <__aeabi_dsub>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4680      	mov	r8, r0
 8007520:	4689      	mov	r9, r1
 8007522:	4630      	mov	r0, r6
 8007524:	4639      	mov	r1, r7
 8007526:	f7f8 fe73 	bl	8000210 <__aeabi_dsub>
 800752a:	a395      	add	r3, pc, #596	@ (adr r3, 8007780 <__ieee754_rem_pio2+0x300>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	e7dc      	b.n	80074ec <__ieee754_rem_pio2+0x6c>
 8007532:	f7f8 fe6f 	bl	8000214 <__adddf3>
 8007536:	45a8      	cmp	r8, r5
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	d018      	beq.n	8007570 <__ieee754_rem_pio2+0xf0>
 800753e:	a38c      	add	r3, pc, #560	@ (adr r3, 8007770 <__ieee754_rem_pio2+0x2f0>)
 8007540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007544:	f7f8 fe66 	bl	8000214 <__adddf3>
 8007548:	4602      	mov	r2, r0
 800754a:	460b      	mov	r3, r1
 800754c:	4680      	mov	r8, r0
 800754e:	4689      	mov	r9, r1
 8007550:	4630      	mov	r0, r6
 8007552:	4639      	mov	r1, r7
 8007554:	f7f8 fe5c 	bl	8000210 <__aeabi_dsub>
 8007558:	a385      	add	r3, pc, #532	@ (adr r3, 8007770 <__ieee754_rem_pio2+0x2f0>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	f7f8 fe59 	bl	8000214 <__adddf3>
 8007562:	f04f 35ff 	mov.w	r5, #4294967295
 8007566:	e9c4 8900 	strd	r8, r9, [r4]
 800756a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800756e:	e7c4      	b.n	80074fa <__ieee754_rem_pio2+0x7a>
 8007570:	a381      	add	r3, pc, #516	@ (adr r3, 8007778 <__ieee754_rem_pio2+0x2f8>)
 8007572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007576:	f7f8 fe4d 	bl	8000214 <__adddf3>
 800757a:	a381      	add	r3, pc, #516	@ (adr r3, 8007780 <__ieee754_rem_pio2+0x300>)
 800757c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007580:	4606      	mov	r6, r0
 8007582:	460f      	mov	r7, r1
 8007584:	f7f8 fe46 	bl	8000214 <__adddf3>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4680      	mov	r8, r0
 800758e:	4689      	mov	r9, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fe3c 	bl	8000210 <__aeabi_dsub>
 8007598:	a379      	add	r3, pc, #484	@ (adr r3, 8007780 <__ieee754_rem_pio2+0x300>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	e7de      	b.n	800755e <__ieee754_rem_pio2+0xde>
 80075a0:	4b82      	ldr	r3, [pc, #520]	@ (80077ac <__ieee754_rem_pio2+0x32c>)
 80075a2:	4598      	cmp	r8, r3
 80075a4:	f200 80d1 	bhi.w	800774a <__ieee754_rem_pio2+0x2ca>
 80075a8:	f000 f966 	bl	8007878 <fabs>
 80075ac:	ec57 6b10 	vmov	r6, r7, d0
 80075b0:	a375      	add	r3, pc, #468	@ (adr r3, 8007788 <__ieee754_rem_pio2+0x308>)
 80075b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b6:	4630      	mov	r0, r6
 80075b8:	4639      	mov	r1, r7
 80075ba:	f7f8 ffe1 	bl	8000580 <__aeabi_dmul>
 80075be:	4b7c      	ldr	r3, [pc, #496]	@ (80077b0 <__ieee754_rem_pio2+0x330>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7f8 fe27 	bl	8000214 <__adddf3>
 80075c6:	f7f9 fa75 	bl	8000ab4 <__aeabi_d2iz>
 80075ca:	4605      	mov	r5, r0
 80075cc:	f7f8 ff6e 	bl	80004ac <__aeabi_i2d>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075d8:	a363      	add	r3, pc, #396	@ (adr r3, 8007768 <__ieee754_rem_pio2+0x2e8>)
 80075da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075de:	f7f8 ffcf 	bl	8000580 <__aeabi_dmul>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4630      	mov	r0, r6
 80075e8:	4639      	mov	r1, r7
 80075ea:	f7f8 fe11 	bl	8000210 <__aeabi_dsub>
 80075ee:	a360      	add	r3, pc, #384	@ (adr r3, 8007770 <__ieee754_rem_pio2+0x2f0>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	4682      	mov	sl, r0
 80075f6:	468b      	mov	fp, r1
 80075f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075fc:	f7f8 ffc0 	bl	8000580 <__aeabi_dmul>
 8007600:	2d1f      	cmp	r5, #31
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	dc0c      	bgt.n	8007622 <__ieee754_rem_pio2+0x1a2>
 8007608:	4b6a      	ldr	r3, [pc, #424]	@ (80077b4 <__ieee754_rem_pio2+0x334>)
 800760a:	1e6a      	subs	r2, r5, #1
 800760c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007610:	4543      	cmp	r3, r8
 8007612:	d006      	beq.n	8007622 <__ieee754_rem_pio2+0x1a2>
 8007614:	4632      	mov	r2, r6
 8007616:	463b      	mov	r3, r7
 8007618:	4650      	mov	r0, sl
 800761a:	4659      	mov	r1, fp
 800761c:	f7f8 fdf8 	bl	8000210 <__aeabi_dsub>
 8007620:	e00e      	b.n	8007640 <__ieee754_rem_pio2+0x1c0>
 8007622:	463b      	mov	r3, r7
 8007624:	4632      	mov	r2, r6
 8007626:	4650      	mov	r0, sl
 8007628:	4659      	mov	r1, fp
 800762a:	f7f8 fdf1 	bl	8000210 <__aeabi_dsub>
 800762e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007632:	9305      	str	r3, [sp, #20]
 8007634:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007638:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800763c:	2b10      	cmp	r3, #16
 800763e:	dc02      	bgt.n	8007646 <__ieee754_rem_pio2+0x1c6>
 8007640:	e9c4 0100 	strd	r0, r1, [r4]
 8007644:	e039      	b.n	80076ba <__ieee754_rem_pio2+0x23a>
 8007646:	a34c      	add	r3, pc, #304	@ (adr r3, 8007778 <__ieee754_rem_pio2+0x2f8>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007650:	f7f8 ff96 	bl	8000580 <__aeabi_dmul>
 8007654:	4606      	mov	r6, r0
 8007656:	460f      	mov	r7, r1
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4650      	mov	r0, sl
 800765e:	4659      	mov	r1, fp
 8007660:	f7f8 fdd6 	bl	8000210 <__aeabi_dsub>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4680      	mov	r8, r0
 800766a:	4689      	mov	r9, r1
 800766c:	4650      	mov	r0, sl
 800766e:	4659      	mov	r1, fp
 8007670:	f7f8 fdce 	bl	8000210 <__aeabi_dsub>
 8007674:	4632      	mov	r2, r6
 8007676:	463b      	mov	r3, r7
 8007678:	f7f8 fdca 	bl	8000210 <__aeabi_dsub>
 800767c:	a340      	add	r3, pc, #256	@ (adr r3, 8007780 <__ieee754_rem_pio2+0x300>)
 800767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800768a:	f7f8 ff79 	bl	8000580 <__aeabi_dmul>
 800768e:	4632      	mov	r2, r6
 8007690:	463b      	mov	r3, r7
 8007692:	f7f8 fdbd 	bl	8000210 <__aeabi_dsub>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	f7f8 fdb5 	bl	8000210 <__aeabi_dsub>
 80076a6:	9a05      	ldr	r2, [sp, #20]
 80076a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b31      	cmp	r3, #49	@ 0x31
 80076b0:	dc20      	bgt.n	80076f4 <__ieee754_rem_pio2+0x274>
 80076b2:	e9c4 0100 	strd	r0, r1, [r4]
 80076b6:	46c2      	mov	sl, r8
 80076b8:	46cb      	mov	fp, r9
 80076ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80076be:	4650      	mov	r0, sl
 80076c0:	4642      	mov	r2, r8
 80076c2:	464b      	mov	r3, r9
 80076c4:	4659      	mov	r1, fp
 80076c6:	f7f8 fda3 	bl	8000210 <__aeabi_dsub>
 80076ca:	463b      	mov	r3, r7
 80076cc:	4632      	mov	r2, r6
 80076ce:	f7f8 fd9f 	bl	8000210 <__aeabi_dsub>
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80076da:	f6bf af0e 	bge.w	80074fa <__ieee754_rem_pio2+0x7a>
 80076de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80076e2:	6063      	str	r3, [r4, #4]
 80076e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076e8:	f8c4 8000 	str.w	r8, [r4]
 80076ec:	60a0      	str	r0, [r4, #8]
 80076ee:	60e3      	str	r3, [r4, #12]
 80076f0:	426d      	negs	r5, r5
 80076f2:	e702      	b.n	80074fa <__ieee754_rem_pio2+0x7a>
 80076f4:	a326      	add	r3, pc, #152	@ (adr r3, 8007790 <__ieee754_rem_pio2+0x310>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fe:	f7f8 ff3f 	bl	8000580 <__aeabi_dmul>
 8007702:	4606      	mov	r6, r0
 8007704:	460f      	mov	r7, r1
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4640      	mov	r0, r8
 800770c:	4649      	mov	r1, r9
 800770e:	f7f8 fd7f 	bl	8000210 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	4682      	mov	sl, r0
 8007718:	468b      	mov	fp, r1
 800771a:	4640      	mov	r0, r8
 800771c:	4649      	mov	r1, r9
 800771e:	f7f8 fd77 	bl	8000210 <__aeabi_dsub>
 8007722:	4632      	mov	r2, r6
 8007724:	463b      	mov	r3, r7
 8007726:	f7f8 fd73 	bl	8000210 <__aeabi_dsub>
 800772a:	a31b      	add	r3, pc, #108	@ (adr r3, 8007798 <__ieee754_rem_pio2+0x318>)
 800772c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007738:	f7f8 ff22 	bl	8000580 <__aeabi_dmul>
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	f7f8 fd66 	bl	8000210 <__aeabi_dsub>
 8007744:	4606      	mov	r6, r0
 8007746:	460f      	mov	r7, r1
 8007748:	e764      	b.n	8007614 <__ieee754_rem_pio2+0x194>
 800774a:	4b1b      	ldr	r3, [pc, #108]	@ (80077b8 <__ieee754_rem_pio2+0x338>)
 800774c:	4598      	cmp	r8, r3
 800774e:	d935      	bls.n	80077bc <__ieee754_rem_pio2+0x33c>
 8007750:	4632      	mov	r2, r6
 8007752:	463b      	mov	r3, r7
 8007754:	4630      	mov	r0, r6
 8007756:	4639      	mov	r1, r7
 8007758:	f7f8 fd5a 	bl	8000210 <__aeabi_dsub>
 800775c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007760:	e9c4 0100 	strd	r0, r1, [r4]
 8007764:	e69e      	b.n	80074a4 <__ieee754_rem_pio2+0x24>
 8007766:	bf00      	nop
 8007768:	54400000 	.word	0x54400000
 800776c:	3ff921fb 	.word	0x3ff921fb
 8007770:	1a626331 	.word	0x1a626331
 8007774:	3dd0b461 	.word	0x3dd0b461
 8007778:	1a600000 	.word	0x1a600000
 800777c:	3dd0b461 	.word	0x3dd0b461
 8007780:	2e037073 	.word	0x2e037073
 8007784:	3ba3198a 	.word	0x3ba3198a
 8007788:	6dc9c883 	.word	0x6dc9c883
 800778c:	3fe45f30 	.word	0x3fe45f30
 8007790:	2e000000 	.word	0x2e000000
 8007794:	3ba3198a 	.word	0x3ba3198a
 8007798:	252049c1 	.word	0x252049c1
 800779c:	397b839a 	.word	0x397b839a
 80077a0:	3fe921fb 	.word	0x3fe921fb
 80077a4:	4002d97b 	.word	0x4002d97b
 80077a8:	3ff921fb 	.word	0x3ff921fb
 80077ac:	413921fb 	.word	0x413921fb
 80077b0:	3fe00000 	.word	0x3fe00000
 80077b4:	08008168 	.word	0x08008168
 80077b8:	7fefffff 	.word	0x7fefffff
 80077bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80077c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80077c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80077c8:	4630      	mov	r0, r6
 80077ca:	460f      	mov	r7, r1
 80077cc:	f7f9 f972 	bl	8000ab4 <__aeabi_d2iz>
 80077d0:	f7f8 fe6c 	bl	80004ac <__aeabi_i2d>
 80077d4:	4602      	mov	r2, r0
 80077d6:	460b      	mov	r3, r1
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077e0:	f7f8 fd16 	bl	8000210 <__aeabi_dsub>
 80077e4:	4b22      	ldr	r3, [pc, #136]	@ (8007870 <__ieee754_rem_pio2+0x3f0>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	f7f8 feca 	bl	8000580 <__aeabi_dmul>
 80077ec:	460f      	mov	r7, r1
 80077ee:	4606      	mov	r6, r0
 80077f0:	f7f9 f960 	bl	8000ab4 <__aeabi_d2iz>
 80077f4:	f7f8 fe5a 	bl	80004ac <__aeabi_i2d>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4630      	mov	r0, r6
 80077fe:	4639      	mov	r1, r7
 8007800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007804:	f7f8 fd04 	bl	8000210 <__aeabi_dsub>
 8007808:	4b19      	ldr	r3, [pc, #100]	@ (8007870 <__ieee754_rem_pio2+0x3f0>)
 800780a:	2200      	movs	r2, #0
 800780c:	f7f8 feb8 	bl	8000580 <__aeabi_dmul>
 8007810:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007814:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007818:	f04f 0803 	mov.w	r8, #3
 800781c:	2600      	movs	r6, #0
 800781e:	2700      	movs	r7, #0
 8007820:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007824:	4632      	mov	r2, r6
 8007826:	463b      	mov	r3, r7
 8007828:	46c2      	mov	sl, r8
 800782a:	f108 38ff 	add.w	r8, r8, #4294967295
 800782e:	f7f9 f90f 	bl	8000a50 <__aeabi_dcmpeq>
 8007832:	2800      	cmp	r0, #0
 8007834:	d1f4      	bne.n	8007820 <__ieee754_rem_pio2+0x3a0>
 8007836:	4b0f      	ldr	r3, [pc, #60]	@ (8007874 <__ieee754_rem_pio2+0x3f4>)
 8007838:	9301      	str	r3, [sp, #4]
 800783a:	2302      	movs	r3, #2
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	462a      	mov	r2, r5
 8007840:	4653      	mov	r3, sl
 8007842:	4621      	mov	r1, r4
 8007844:	a806      	add	r0, sp, #24
 8007846:	f000 f81f 	bl	8007888 <__kernel_rem_pio2>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	4605      	mov	r5, r0
 8007850:	f6bf ae53 	bge.w	80074fa <__ieee754_rem_pio2+0x7a>
 8007854:	e9d4 2100 	ldrd	r2, r1, [r4]
 8007858:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800785c:	e9c4 2300 	strd	r2, r3, [r4]
 8007860:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8007864:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007868:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800786c:	e740      	b.n	80076f0 <__ieee754_rem_pio2+0x270>
 800786e:	bf00      	nop
 8007870:	41700000 	.word	0x41700000
 8007874:	080081e8 	.word	0x080081e8

08007878 <fabs>:
 8007878:	ec51 0b10 	vmov	r0, r1, d0
 800787c:	4602      	mov	r2, r0
 800787e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007882:	ec43 2b10 	vmov	d0, r2, r3
 8007886:	4770      	bx	lr

08007888 <__kernel_rem_pio2>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	ed2d 8b02 	vpush	{d8}
 8007890:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007894:	f112 0f14 	cmn.w	r2, #20
 8007898:	9306      	str	r3, [sp, #24]
 800789a:	9104      	str	r1, [sp, #16]
 800789c:	4bbe      	ldr	r3, [pc, #760]	@ (8007b98 <__kernel_rem_pio2+0x310>)
 800789e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80078a0:	9008      	str	r0, [sp, #32]
 80078a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80078a6:	9300      	str	r3, [sp, #0]
 80078a8:	9b06      	ldr	r3, [sp, #24]
 80078aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80078ae:	bfa8      	it	ge
 80078b0:	1ed4      	subge	r4, r2, #3
 80078b2:	9305      	str	r3, [sp, #20]
 80078b4:	bfb2      	itee	lt
 80078b6:	2400      	movlt	r4, #0
 80078b8:	2318      	movge	r3, #24
 80078ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80078be:	f06f 0317 	mvn.w	r3, #23
 80078c2:	fb04 3303 	mla	r3, r4, r3, r3
 80078c6:	eb03 0b02 	add.w	fp, r3, r2
 80078ca:	9b00      	ldr	r3, [sp, #0]
 80078cc:	9a05      	ldr	r2, [sp, #20]
 80078ce:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8007b88 <__kernel_rem_pio2+0x300>
 80078d2:	eb03 0802 	add.w	r8, r3, r2
 80078d6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80078d8:	1aa7      	subs	r7, r4, r2
 80078da:	ae20      	add	r6, sp, #128	@ 0x80
 80078dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80078e0:	2500      	movs	r5, #0
 80078e2:	4545      	cmp	r5, r8
 80078e4:	dd13      	ble.n	800790e <__kernel_rem_pio2+0x86>
 80078e6:	9b06      	ldr	r3, [sp, #24]
 80078e8:	aa20      	add	r2, sp, #128	@ 0x80
 80078ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80078ee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80078f2:	f04f 0800 	mov.w	r8, #0
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	4598      	cmp	r8, r3
 80078fa:	dc31      	bgt.n	8007960 <__kernel_rem_pio2+0xd8>
 80078fc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8007b88 <__kernel_rem_pio2+0x300>
 8007900:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007904:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007908:	462f      	mov	r7, r5
 800790a:	2600      	movs	r6, #0
 800790c:	e01b      	b.n	8007946 <__kernel_rem_pio2+0xbe>
 800790e:	42ef      	cmn	r7, r5
 8007910:	d407      	bmi.n	8007922 <__kernel_rem_pio2+0x9a>
 8007912:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007916:	f7f8 fdc9 	bl	80004ac <__aeabi_i2d>
 800791a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800791e:	3501      	adds	r5, #1
 8007920:	e7df      	b.n	80078e2 <__kernel_rem_pio2+0x5a>
 8007922:	ec51 0b18 	vmov	r0, r1, d8
 8007926:	e7f8      	b.n	800791a <__kernel_rem_pio2+0x92>
 8007928:	e9d7 2300 	ldrd	r2, r3, [r7]
 800792c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007930:	f7f8 fe26 	bl	8000580 <__aeabi_dmul>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793c:	f7f8 fc6a 	bl	8000214 <__adddf3>
 8007940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007944:	3601      	adds	r6, #1
 8007946:	9b05      	ldr	r3, [sp, #20]
 8007948:	429e      	cmp	r6, r3
 800794a:	f1a7 0708 	sub.w	r7, r7, #8
 800794e:	ddeb      	ble.n	8007928 <__kernel_rem_pio2+0xa0>
 8007950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007954:	f108 0801 	add.w	r8, r8, #1
 8007958:	ecaa 7b02 	vstmia	sl!, {d7}
 800795c:	3508      	adds	r5, #8
 800795e:	e7ca      	b.n	80078f6 <__kernel_rem_pio2+0x6e>
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	f8dd 8000 	ldr.w	r8, [sp]
 8007966:	aa0c      	add	r2, sp, #48	@ 0x30
 8007968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800796c:	930a      	str	r3, [sp, #40]	@ 0x28
 800796e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007970:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007974:	9309      	str	r3, [sp, #36]	@ 0x24
 8007976:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800797a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800797c:	ab98      	add	r3, sp, #608	@ 0x260
 800797e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007982:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007986:	ed8d 7b02 	vstr	d7, [sp, #8]
 800798a:	ac0c      	add	r4, sp, #48	@ 0x30
 800798c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800798e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007992:	46a1      	mov	r9, r4
 8007994:	46c2      	mov	sl, r8
 8007996:	f1ba 0f00 	cmp.w	sl, #0
 800799a:	f1a5 0508 	sub.w	r5, r5, #8
 800799e:	dc77      	bgt.n	8007a90 <__kernel_rem_pio2+0x208>
 80079a0:	4658      	mov	r0, fp
 80079a2:	ed9d 0b02 	vldr	d0, [sp, #8]
 80079a6:	f000 fac7 	bl	8007f38 <scalbn>
 80079aa:	ec57 6b10 	vmov	r6, r7, d0
 80079ae:	2200      	movs	r2, #0
 80079b0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80079b4:	4630      	mov	r0, r6
 80079b6:	4639      	mov	r1, r7
 80079b8:	f7f8 fde2 	bl	8000580 <__aeabi_dmul>
 80079bc:	ec41 0b10 	vmov	d0, r0, r1
 80079c0:	f000 fb3a 	bl	8008038 <floor>
 80079c4:	4b75      	ldr	r3, [pc, #468]	@ (8007b9c <__kernel_rem_pio2+0x314>)
 80079c6:	ec51 0b10 	vmov	r0, r1, d0
 80079ca:	2200      	movs	r2, #0
 80079cc:	f7f8 fdd8 	bl	8000580 <__aeabi_dmul>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4630      	mov	r0, r6
 80079d6:	4639      	mov	r1, r7
 80079d8:	f7f8 fc1a 	bl	8000210 <__aeabi_dsub>
 80079dc:	460f      	mov	r7, r1
 80079de:	4606      	mov	r6, r0
 80079e0:	f7f9 f868 	bl	8000ab4 <__aeabi_d2iz>
 80079e4:	9002      	str	r0, [sp, #8]
 80079e6:	f7f8 fd61 	bl	80004ac <__aeabi_i2d>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	f7f8 fc0d 	bl	8000210 <__aeabi_dsub>
 80079f6:	f1bb 0f00 	cmp.w	fp, #0
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	dd6c      	ble.n	8007ada <__kernel_rem_pio2+0x252>
 8007a00:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a04:	ab0c      	add	r3, sp, #48	@ 0x30
 8007a06:	9d02      	ldr	r5, [sp, #8]
 8007a08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a0c:	f1cb 0018 	rsb	r0, fp, #24
 8007a10:	fa43 f200 	asr.w	r2, r3, r0
 8007a14:	4415      	add	r5, r2
 8007a16:	4082      	lsls	r2, r0
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	aa0c      	add	r2, sp, #48	@ 0x30
 8007a1c:	9502      	str	r5, [sp, #8]
 8007a1e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007a22:	f1cb 0217 	rsb	r2, fp, #23
 8007a26:	fa43 f902 	asr.w	r9, r3, r2
 8007a2a:	f1b9 0f00 	cmp.w	r9, #0
 8007a2e:	dd64      	ble.n	8007afa <__kernel_rem_pio2+0x272>
 8007a30:	9b02      	ldr	r3, [sp, #8]
 8007a32:	2200      	movs	r2, #0
 8007a34:	3301      	adds	r3, #1
 8007a36:	9302      	str	r3, [sp, #8]
 8007a38:	4615      	mov	r5, r2
 8007a3a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007a3e:	4590      	cmp	r8, r2
 8007a40:	f300 80b8 	bgt.w	8007bb4 <__kernel_rem_pio2+0x32c>
 8007a44:	f1bb 0f00 	cmp.w	fp, #0
 8007a48:	dd07      	ble.n	8007a5a <__kernel_rem_pio2+0x1d2>
 8007a4a:	f1bb 0f01 	cmp.w	fp, #1
 8007a4e:	f000 80bf 	beq.w	8007bd0 <__kernel_rem_pio2+0x348>
 8007a52:	f1bb 0f02 	cmp.w	fp, #2
 8007a56:	f000 80c6 	beq.w	8007be6 <__kernel_rem_pio2+0x35e>
 8007a5a:	f1b9 0f02 	cmp.w	r9, #2
 8007a5e:	d14c      	bne.n	8007afa <__kernel_rem_pio2+0x272>
 8007a60:	4632      	mov	r2, r6
 8007a62:	463b      	mov	r3, r7
 8007a64:	494e      	ldr	r1, [pc, #312]	@ (8007ba0 <__kernel_rem_pio2+0x318>)
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7f8 fbd2 	bl	8000210 <__aeabi_dsub>
 8007a6c:	4606      	mov	r6, r0
 8007a6e:	460f      	mov	r7, r1
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	d042      	beq.n	8007afa <__kernel_rem_pio2+0x272>
 8007a74:	4658      	mov	r0, fp
 8007a76:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8007b90 <__kernel_rem_pio2+0x308>
 8007a7a:	f000 fa5d 	bl	8007f38 <scalbn>
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	ec53 2b10 	vmov	r2, r3, d0
 8007a86:	f7f8 fbc3 	bl	8000210 <__aeabi_dsub>
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	460f      	mov	r7, r1
 8007a8e:	e034      	b.n	8007afa <__kernel_rem_pio2+0x272>
 8007a90:	4b44      	ldr	r3, [pc, #272]	@ (8007ba4 <__kernel_rem_pio2+0x31c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a98:	f7f8 fd72 	bl	8000580 <__aeabi_dmul>
 8007a9c:	f7f9 f80a 	bl	8000ab4 <__aeabi_d2iz>
 8007aa0:	f7f8 fd04 	bl	80004ac <__aeabi_i2d>
 8007aa4:	4b40      	ldr	r3, [pc, #256]	@ (8007ba8 <__kernel_rem_pio2+0x320>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	460f      	mov	r7, r1
 8007aac:	f7f8 fd68 	bl	8000580 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ab8:	f7f8 fbaa 	bl	8000210 <__aeabi_dsub>
 8007abc:	f7f8 fffa 	bl	8000ab4 <__aeabi_d2iz>
 8007ac0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ac4:	f849 0b04 	str.w	r0, [r9], #4
 8007ac8:	4639      	mov	r1, r7
 8007aca:	4630      	mov	r0, r6
 8007acc:	f7f8 fba2 	bl	8000214 <__adddf3>
 8007ad0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ad8:	e75d      	b.n	8007996 <__kernel_rem_pio2+0x10e>
 8007ada:	d107      	bne.n	8007aec <__kernel_rem_pio2+0x264>
 8007adc:	f108 33ff 	add.w	r3, r8, #4294967295
 8007ae0:	aa0c      	add	r2, sp, #48	@ 0x30
 8007ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007aea:	e79e      	b.n	8007a2a <__kernel_rem_pio2+0x1a2>
 8007aec:	4b2f      	ldr	r3, [pc, #188]	@ (8007bac <__kernel_rem_pio2+0x324>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	f7f8 ffcc 	bl	8000a8c <__aeabi_dcmpge>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d143      	bne.n	8007b80 <__kernel_rem_pio2+0x2f8>
 8007af8:	4681      	mov	r9, r0
 8007afa:	2200      	movs	r2, #0
 8007afc:	2300      	movs	r3, #0
 8007afe:	4630      	mov	r0, r6
 8007b00:	4639      	mov	r1, r7
 8007b02:	f7f8 ffa5 	bl	8000a50 <__aeabi_dcmpeq>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f000 80bf 	beq.w	8007c8a <__kernel_rem_pio2+0x402>
 8007b0c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007b10:	2200      	movs	r2, #0
 8007b12:	9900      	ldr	r1, [sp, #0]
 8007b14:	428b      	cmp	r3, r1
 8007b16:	da6e      	bge.n	8007bf6 <__kernel_rem_pio2+0x36e>
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	f000 8089 	beq.w	8007c30 <__kernel_rem_pio2+0x3a8>
 8007b1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b22:	ab0c      	add	r3, sp, #48	@ 0x30
 8007b24:	f1ab 0b18 	sub.w	fp, fp, #24
 8007b28:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f6      	beq.n	8007b1e <__kernel_rem_pio2+0x296>
 8007b30:	4658      	mov	r0, fp
 8007b32:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8007b90 <__kernel_rem_pio2+0x308>
 8007b36:	f000 f9ff 	bl	8007f38 <scalbn>
 8007b3a:	f108 0301 	add.w	r3, r8, #1
 8007b3e:	00da      	lsls	r2, r3, #3
 8007b40:	9205      	str	r2, [sp, #20]
 8007b42:	ec55 4b10 	vmov	r4, r5, d0
 8007b46:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007b48:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8007ba4 <__kernel_rem_pio2+0x31c>
 8007b4c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007b50:	4646      	mov	r6, r8
 8007b52:	f04f 0a00 	mov.w	sl, #0
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	f280 80cf 	bge.w	8007cfa <__kernel_rem_pio2+0x472>
 8007b5c:	4644      	mov	r4, r8
 8007b5e:	2c00      	cmp	r4, #0
 8007b60:	f2c0 80fd 	blt.w	8007d5e <__kernel_rem_pio2+0x4d6>
 8007b64:	4b12      	ldr	r3, [pc, #72]	@ (8007bb0 <__kernel_rem_pio2+0x328>)
 8007b66:	461f      	mov	r7, r3
 8007b68:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007b6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b6e:	9306      	str	r3, [sp, #24]
 8007b70:	f04f 0a00 	mov.w	sl, #0
 8007b74:	f04f 0b00 	mov.w	fp, #0
 8007b78:	2600      	movs	r6, #0
 8007b7a:	eba8 0504 	sub.w	r5, r8, r4
 8007b7e:	e0e2      	b.n	8007d46 <__kernel_rem_pio2+0x4be>
 8007b80:	f04f 0902 	mov.w	r9, #2
 8007b84:	e754      	b.n	8007a30 <__kernel_rem_pio2+0x1a8>
 8007b86:	bf00      	nop
	...
 8007b94:	3ff00000 	.word	0x3ff00000
 8007b98:	08008330 	.word	0x08008330
 8007b9c:	40200000 	.word	0x40200000
 8007ba0:	3ff00000 	.word	0x3ff00000
 8007ba4:	3e700000 	.word	0x3e700000
 8007ba8:	41700000 	.word	0x41700000
 8007bac:	3fe00000 	.word	0x3fe00000
 8007bb0:	080082f0 	.word	0x080082f0
 8007bb4:	f854 3b04 	ldr.w	r3, [r4], #4
 8007bb8:	b945      	cbnz	r5, 8007bcc <__kernel_rem_pio2+0x344>
 8007bba:	b123      	cbz	r3, 8007bc6 <__kernel_rem_pio2+0x33e>
 8007bbc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007bc0:	f844 3c04 	str.w	r3, [r4, #-4]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	461d      	mov	r5, r3
 8007bca:	e738      	b.n	8007a3e <__kernel_rem_pio2+0x1b6>
 8007bcc:	1acb      	subs	r3, r1, r3
 8007bce:	e7f7      	b.n	8007bc0 <__kernel_rem_pio2+0x338>
 8007bd0:	f108 32ff 	add.w	r2, r8, #4294967295
 8007bd4:	ab0c      	add	r3, sp, #48	@ 0x30
 8007bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007bde:	a90c      	add	r1, sp, #48	@ 0x30
 8007be0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007be4:	e739      	b.n	8007a5a <__kernel_rem_pio2+0x1d2>
 8007be6:	f108 32ff 	add.w	r2, r8, #4294967295
 8007bea:	ab0c      	add	r3, sp, #48	@ 0x30
 8007bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007bf4:	e7f3      	b.n	8007bde <__kernel_rem_pio2+0x356>
 8007bf6:	a90c      	add	r1, sp, #48	@ 0x30
 8007bf8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	e787      	b.n	8007b12 <__kernel_rem_pio2+0x28a>
 8007c02:	3401      	adds	r4, #1
 8007c04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c08:	2a00      	cmp	r2, #0
 8007c0a:	d0fa      	beq.n	8007c02 <__kernel_rem_pio2+0x37a>
 8007c0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c0e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007c12:	eb0d 0503 	add.w	r5, sp, r3
 8007c16:	9b06      	ldr	r3, [sp, #24]
 8007c18:	aa20      	add	r2, sp, #128	@ 0x80
 8007c1a:	4443      	add	r3, r8
 8007c1c:	f108 0701 	add.w	r7, r8, #1
 8007c20:	3d98      	subs	r5, #152	@ 0x98
 8007c22:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007c26:	4444      	add	r4, r8
 8007c28:	42bc      	cmp	r4, r7
 8007c2a:	da04      	bge.n	8007c36 <__kernel_rem_pio2+0x3ae>
 8007c2c:	46a0      	mov	r8, r4
 8007c2e:	e6a2      	b.n	8007976 <__kernel_rem_pio2+0xee>
 8007c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c32:	2401      	movs	r4, #1
 8007c34:	e7e6      	b.n	8007c04 <__kernel_rem_pio2+0x37c>
 8007c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c38:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007c3c:	f7f8 fc36 	bl	80004ac <__aeabi_i2d>
 8007c40:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8007f08 <__kernel_rem_pio2+0x680>
 8007c44:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007c48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c50:	46b2      	mov	sl, r6
 8007c52:	f04f 0800 	mov.w	r8, #0
 8007c56:	9b05      	ldr	r3, [sp, #20]
 8007c58:	4598      	cmp	r8, r3
 8007c5a:	dd05      	ble.n	8007c68 <__kernel_rem_pio2+0x3e0>
 8007c5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c60:	3701      	adds	r7, #1
 8007c62:	eca5 7b02 	vstmia	r5!, {d7}
 8007c66:	e7df      	b.n	8007c28 <__kernel_rem_pio2+0x3a0>
 8007c68:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8007c6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007c70:	f7f8 fc86 	bl	8000580 <__aeabi_dmul>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c7c:	f7f8 faca 	bl	8000214 <__adddf3>
 8007c80:	f108 0801 	add.w	r8, r8, #1
 8007c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c88:	e7e5      	b.n	8007c56 <__kernel_rem_pio2+0x3ce>
 8007c8a:	f1cb 0000 	rsb	r0, fp, #0
 8007c8e:	ec47 6b10 	vmov	d0, r6, r7
 8007c92:	f000 f951 	bl	8007f38 <scalbn>
 8007c96:	ec55 4b10 	vmov	r4, r5, d0
 8007c9a:	4b9d      	ldr	r3, [pc, #628]	@ (8007f10 <__kernel_rem_pio2+0x688>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 fef3 	bl	8000a8c <__aeabi_dcmpge>
 8007ca6:	b300      	cbz	r0, 8007cea <__kernel_rem_pio2+0x462>
 8007ca8:	4b9a      	ldr	r3, [pc, #616]	@ (8007f14 <__kernel_rem_pio2+0x68c>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fc66 	bl	8000580 <__aeabi_dmul>
 8007cb4:	f7f8 fefe 	bl	8000ab4 <__aeabi_d2iz>
 8007cb8:	4606      	mov	r6, r0
 8007cba:	f7f8 fbf7 	bl	80004ac <__aeabi_i2d>
 8007cbe:	4b94      	ldr	r3, [pc, #592]	@ (8007f10 <__kernel_rem_pio2+0x688>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f7f8 fc5d 	bl	8000580 <__aeabi_dmul>
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4602      	mov	r2, r0
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f7f8 fa9f 	bl	8000210 <__aeabi_dsub>
 8007cd2:	f7f8 feef 	bl	8000ab4 <__aeabi_d2iz>
 8007cd6:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cd8:	f10b 0b18 	add.w	fp, fp, #24
 8007cdc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007ce0:	f108 0801 	add.w	r8, r8, #1
 8007ce4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007ce8:	e722      	b.n	8007b30 <__kernel_rem_pio2+0x2a8>
 8007cea:	4620      	mov	r0, r4
 8007cec:	4629      	mov	r1, r5
 8007cee:	f7f8 fee1 	bl	8000ab4 <__aeabi_d2iz>
 8007cf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cf4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007cf8:	e71a      	b.n	8007b30 <__kernel_rem_pio2+0x2a8>
 8007cfa:	ab0c      	add	r3, sp, #48	@ 0x30
 8007cfc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007d00:	f7f8 fbd4 	bl	80004ac <__aeabi_i2d>
 8007d04:	4622      	mov	r2, r4
 8007d06:	462b      	mov	r3, r5
 8007d08:	f7f8 fc3a 	bl	8000580 <__aeabi_dmul>
 8007d0c:	4652      	mov	r2, sl
 8007d0e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007d12:	465b      	mov	r3, fp
 8007d14:	4620      	mov	r0, r4
 8007d16:	4629      	mov	r1, r5
 8007d18:	f7f8 fc32 	bl	8000580 <__aeabi_dmul>
 8007d1c:	3e01      	subs	r6, #1
 8007d1e:	4604      	mov	r4, r0
 8007d20:	460d      	mov	r5, r1
 8007d22:	e718      	b.n	8007b56 <__kernel_rem_pio2+0x2ce>
 8007d24:	9906      	ldr	r1, [sp, #24]
 8007d26:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8007d2a:	9106      	str	r1, [sp, #24]
 8007d2c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007d30:	f7f8 fc26 	bl	8000580 <__aeabi_dmul>
 8007d34:	4602      	mov	r2, r0
 8007d36:	460b      	mov	r3, r1
 8007d38:	4650      	mov	r0, sl
 8007d3a:	4659      	mov	r1, fp
 8007d3c:	f7f8 fa6a 	bl	8000214 <__adddf3>
 8007d40:	3601      	adds	r6, #1
 8007d42:	4682      	mov	sl, r0
 8007d44:	468b      	mov	fp, r1
 8007d46:	9b00      	ldr	r3, [sp, #0]
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	dc01      	bgt.n	8007d50 <__kernel_rem_pio2+0x4c8>
 8007d4c:	42b5      	cmp	r5, r6
 8007d4e:	dae9      	bge.n	8007d24 <__kernel_rem_pio2+0x49c>
 8007d50:	ab48      	add	r3, sp, #288	@ 0x120
 8007d52:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007d56:	e9c5 ab00 	strd	sl, fp, [r5]
 8007d5a:	3c01      	subs	r4, #1
 8007d5c:	e6ff      	b.n	8007b5e <__kernel_rem_pio2+0x2d6>
 8007d5e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	dc0b      	bgt.n	8007d7c <__kernel_rem_pio2+0x4f4>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dc39      	bgt.n	8007ddc <__kernel_rem_pio2+0x554>
 8007d68:	d05d      	beq.n	8007e26 <__kernel_rem_pio2+0x59e>
 8007d6a:	9b02      	ldr	r3, [sp, #8]
 8007d6c:	f003 0007 	and.w	r0, r3, #7
 8007d70:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8007d74:	ecbd 8b02 	vpop	{d8}
 8007d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d1f3      	bne.n	8007d6a <__kernel_rem_pio2+0x4e2>
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007d88:	eb0d 0403 	add.w	r4, sp, r3
 8007d8c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8007d90:	4625      	mov	r5, r4
 8007d92:	46c2      	mov	sl, r8
 8007d94:	f1ba 0f00 	cmp.w	sl, #0
 8007d98:	f1a5 0508 	sub.w	r5, r5, #8
 8007d9c:	dc6b      	bgt.n	8007e76 <__kernel_rem_pio2+0x5ee>
 8007d9e:	4645      	mov	r5, r8
 8007da0:	2d01      	cmp	r5, #1
 8007da2:	f1a4 0408 	sub.w	r4, r4, #8
 8007da6:	f300 8087 	bgt.w	8007eb8 <__kernel_rem_pio2+0x630>
 8007daa:	9c05      	ldr	r4, [sp, #20]
 8007dac:	ab48      	add	r3, sp, #288	@ 0x120
 8007dae:	441c      	add	r4, r3
 8007db0:	2000      	movs	r0, #0
 8007db2:	2100      	movs	r1, #0
 8007db4:	f1b8 0f01 	cmp.w	r8, #1
 8007db8:	f300 809c 	bgt.w	8007ef4 <__kernel_rem_pio2+0x66c>
 8007dbc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8007dc0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8007dc4:	f1b9 0f00 	cmp.w	r9, #0
 8007dc8:	f040 80a6 	bne.w	8007f18 <__kernel_rem_pio2+0x690>
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	e9c3 7800 	strd	r7, r8, [r3]
 8007dd2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007dd6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007dda:	e7c6      	b.n	8007d6a <__kernel_rem_pio2+0x4e2>
 8007ddc:	9d05      	ldr	r5, [sp, #20]
 8007dde:	ab48      	add	r3, sp, #288	@ 0x120
 8007de0:	441d      	add	r5, r3
 8007de2:	4644      	mov	r4, r8
 8007de4:	2000      	movs	r0, #0
 8007de6:	2100      	movs	r1, #0
 8007de8:	2c00      	cmp	r4, #0
 8007dea:	da35      	bge.n	8007e58 <__kernel_rem_pio2+0x5d0>
 8007dec:	f1b9 0f00 	cmp.w	r9, #0
 8007df0:	d038      	beq.n	8007e64 <__kernel_rem_pio2+0x5dc>
 8007df2:	4602      	mov	r2, r0
 8007df4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007df8:	9c04      	ldr	r4, [sp, #16]
 8007dfa:	e9c4 2300 	strd	r2, r3, [r4]
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8007e06:	f7f8 fa03 	bl	8000210 <__aeabi_dsub>
 8007e0a:	ad4a      	add	r5, sp, #296	@ 0x128
 8007e0c:	2401      	movs	r4, #1
 8007e0e:	45a0      	cmp	r8, r4
 8007e10:	da2b      	bge.n	8007e6a <__kernel_rem_pio2+0x5e2>
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d002      	beq.n	8007e1e <__kernel_rem_pio2+0x596>
 8007e18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e24:	e7a1      	b.n	8007d6a <__kernel_rem_pio2+0x4e2>
 8007e26:	9c05      	ldr	r4, [sp, #20]
 8007e28:	ab48      	add	r3, sp, #288	@ 0x120
 8007e2a:	441c      	add	r4, r3
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	2100      	movs	r1, #0
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	da09      	bge.n	8007e4a <__kernel_rem_pio2+0x5c2>
 8007e36:	f1b9 0f00 	cmp.w	r9, #0
 8007e3a:	d002      	beq.n	8007e42 <__kernel_rem_pio2+0x5ba>
 8007e3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e40:	4619      	mov	r1, r3
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	e9c3 0100 	strd	r0, r1, [r3]
 8007e48:	e78f      	b.n	8007d6a <__kernel_rem_pio2+0x4e2>
 8007e4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e4e:	f7f8 f9e1 	bl	8000214 <__adddf3>
 8007e52:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e56:	e7eb      	b.n	8007e30 <__kernel_rem_pio2+0x5a8>
 8007e58:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007e5c:	f7f8 f9da 	bl	8000214 <__adddf3>
 8007e60:	3c01      	subs	r4, #1
 8007e62:	e7c1      	b.n	8007de8 <__kernel_rem_pio2+0x560>
 8007e64:	4602      	mov	r2, r0
 8007e66:	460b      	mov	r3, r1
 8007e68:	e7c6      	b.n	8007df8 <__kernel_rem_pio2+0x570>
 8007e6a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007e6e:	f7f8 f9d1 	bl	8000214 <__adddf3>
 8007e72:	3401      	adds	r4, #1
 8007e74:	e7cb      	b.n	8007e0e <__kernel_rem_pio2+0x586>
 8007e76:	ed95 7b00 	vldr	d7, [r5]
 8007e7a:	ed8d 7b00 	vstr	d7, [sp]
 8007e7e:	ed95 7b02 	vldr	d7, [r5, #8]
 8007e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e86:	ec53 2b17 	vmov	r2, r3, d7
 8007e8a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e8e:	f7f8 f9c1 	bl	8000214 <__adddf3>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	4606      	mov	r6, r0
 8007e98:	460f      	mov	r7, r1
 8007e9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e9e:	f7f8 f9b7 	bl	8000210 <__aeabi_dsub>
 8007ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007ea6:	f7f8 f9b5 	bl	8000214 <__adddf3>
 8007eaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8007eb2:	e9c5 6700 	strd	r6, r7, [r5]
 8007eb6:	e76d      	b.n	8007d94 <__kernel_rem_pio2+0x50c>
 8007eb8:	ed94 7b00 	vldr	d7, [r4]
 8007ebc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8007ec0:	ec51 0b17 	vmov	r0, r1, d7
 8007ec4:	4652      	mov	r2, sl
 8007ec6:	465b      	mov	r3, fp
 8007ec8:	ed8d 7b00 	vstr	d7, [sp]
 8007ecc:	f7f8 f9a2 	bl	8000214 <__adddf3>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	4606      	mov	r6, r0
 8007ed6:	460f      	mov	r7, r1
 8007ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007edc:	f7f8 f998 	bl	8000210 <__aeabi_dsub>
 8007ee0:	4652      	mov	r2, sl
 8007ee2:	465b      	mov	r3, fp
 8007ee4:	f7f8 f996 	bl	8000214 <__adddf3>
 8007ee8:	3d01      	subs	r5, #1
 8007eea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007eee:	e9c4 6700 	strd	r6, r7, [r4]
 8007ef2:	e755      	b.n	8007da0 <__kernel_rem_pio2+0x518>
 8007ef4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ef8:	f7f8 f98c 	bl	8000214 <__adddf3>
 8007efc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f00:	e758      	b.n	8007db4 <__kernel_rem_pio2+0x52c>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
	...
 8007f10:	41700000 	.word	0x41700000
 8007f14:	3e700000 	.word	0x3e700000
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	9a04      	ldr	r2, [sp, #16]
 8007f1c:	601f      	str	r7, [r3, #0]
 8007f1e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8007f22:	605c      	str	r4, [r3, #4]
 8007f24:	609d      	str	r5, [r3, #8]
 8007f26:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007f2a:	60d3      	str	r3, [r2, #12]
 8007f2c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f30:	6110      	str	r0, [r2, #16]
 8007f32:	6153      	str	r3, [r2, #20]
 8007f34:	e719      	b.n	8007d6a <__kernel_rem_pio2+0x4e2>
 8007f36:	bf00      	nop

08007f38 <scalbn>:
 8007f38:	b570      	push	{r4, r5, r6, lr}
 8007f3a:	ec55 4b10 	vmov	r4, r5, d0
 8007f3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007f42:	4606      	mov	r6, r0
 8007f44:	462b      	mov	r3, r5
 8007f46:	b991      	cbnz	r1, 8007f6e <scalbn+0x36>
 8007f48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007f4c:	4323      	orrs	r3, r4
 8007f4e:	d03d      	beq.n	8007fcc <scalbn+0x94>
 8007f50:	4b35      	ldr	r3, [pc, #212]	@ (8008028 <scalbn+0xf0>)
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	2200      	movs	r2, #0
 8007f58:	f7f8 fb12 	bl	8000580 <__aeabi_dmul>
 8007f5c:	4b33      	ldr	r3, [pc, #204]	@ (800802c <scalbn+0xf4>)
 8007f5e:	429e      	cmp	r6, r3
 8007f60:	4604      	mov	r4, r0
 8007f62:	460d      	mov	r5, r1
 8007f64:	da0f      	bge.n	8007f86 <scalbn+0x4e>
 8007f66:	a328      	add	r3, pc, #160	@ (adr r3, 8008008 <scalbn+0xd0>)
 8007f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6c:	e01e      	b.n	8007fac <scalbn+0x74>
 8007f6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8007f72:	4291      	cmp	r1, r2
 8007f74:	d10b      	bne.n	8007f8e <scalbn+0x56>
 8007f76:	4622      	mov	r2, r4
 8007f78:	4620      	mov	r0, r4
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 f94a 	bl	8000214 <__adddf3>
 8007f80:	4604      	mov	r4, r0
 8007f82:	460d      	mov	r5, r1
 8007f84:	e022      	b.n	8007fcc <scalbn+0x94>
 8007f86:	460b      	mov	r3, r1
 8007f88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007f8c:	3936      	subs	r1, #54	@ 0x36
 8007f8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8007f92:	4296      	cmp	r6, r2
 8007f94:	dd0d      	ble.n	8007fb2 <scalbn+0x7a>
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	a11d      	add	r1, pc, #116	@ (adr r1, 8008010 <scalbn+0xd8>)
 8007f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f9e:	da02      	bge.n	8007fa6 <scalbn+0x6e>
 8007fa0:	a11d      	add	r1, pc, #116	@ (adr r1, 8008018 <scalbn+0xe0>)
 8007fa2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa6:	a31a      	add	r3, pc, #104	@ (adr r3, 8008010 <scalbn+0xd8>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fae8 	bl	8000580 <__aeabi_dmul>
 8007fb0:	e7e6      	b.n	8007f80 <scalbn+0x48>
 8007fb2:	1872      	adds	r2, r6, r1
 8007fb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007fb8:	428a      	cmp	r2, r1
 8007fba:	dcec      	bgt.n	8007f96 <scalbn+0x5e>
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	dd08      	ble.n	8007fd2 <scalbn+0x9a>
 8007fc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007fc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007fc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007fcc:	ec45 4b10 	vmov	d0, r4, r5
 8007fd0:	bd70      	pop	{r4, r5, r6, pc}
 8007fd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007fd6:	da08      	bge.n	8007fea <scalbn+0xb2>
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	a10b      	add	r1, pc, #44	@ (adr r1, 8008008 <scalbn+0xd0>)
 8007fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe0:	dac1      	bge.n	8007f66 <scalbn+0x2e>
 8007fe2:	a10f      	add	r1, pc, #60	@ (adr r1, 8008020 <scalbn+0xe8>)
 8007fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fe8:	e7bd      	b.n	8007f66 <scalbn+0x2e>
 8007fea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007fee:	3236      	adds	r2, #54	@ 0x36
 8007ff0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007ff4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8008030 <scalbn+0xf8>)
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	2200      	movs	r2, #0
 8008000:	e7d4      	b.n	8007fac <scalbn+0x74>
 8008002:	bf00      	nop
 8008004:	f3af 8000 	nop.w
 8008008:	c2f8f359 	.word	0xc2f8f359
 800800c:	01a56e1f 	.word	0x01a56e1f
 8008010:	8800759c 	.word	0x8800759c
 8008014:	7e37e43c 	.word	0x7e37e43c
 8008018:	8800759c 	.word	0x8800759c
 800801c:	fe37e43c 	.word	0xfe37e43c
 8008020:	c2f8f359 	.word	0xc2f8f359
 8008024:	81a56e1f 	.word	0x81a56e1f
 8008028:	43500000 	.word	0x43500000
 800802c:	ffff3cb0 	.word	0xffff3cb0
 8008030:	3c900000 	.word	0x3c900000
 8008034:	00000000 	.word	0x00000000

08008038 <floor>:
 8008038:	ec51 0b10 	vmov	r0, r1, d0
 800803c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8008048:	2e13      	cmp	r6, #19
 800804a:	460c      	mov	r4, r1
 800804c:	4605      	mov	r5, r0
 800804e:	4680      	mov	r8, r0
 8008050:	dc34      	bgt.n	80080bc <floor+0x84>
 8008052:	2e00      	cmp	r6, #0
 8008054:	da17      	bge.n	8008086 <floor+0x4e>
 8008056:	a332      	add	r3, pc, #200	@ (adr r3, 8008120 <floor+0xe8>)
 8008058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805c:	f7f8 f8da 	bl	8000214 <__adddf3>
 8008060:	2200      	movs	r2, #0
 8008062:	2300      	movs	r3, #0
 8008064:	f7f8 fd1c 	bl	8000aa0 <__aeabi_dcmpgt>
 8008068:	b150      	cbz	r0, 8008080 <floor+0x48>
 800806a:	2c00      	cmp	r4, #0
 800806c:	da55      	bge.n	800811a <floor+0xe2>
 800806e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008072:	432c      	orrs	r4, r5
 8008074:	2500      	movs	r5, #0
 8008076:	42ac      	cmp	r4, r5
 8008078:	4c2b      	ldr	r4, [pc, #172]	@ (8008128 <floor+0xf0>)
 800807a:	bf08      	it	eq
 800807c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008080:	4621      	mov	r1, r4
 8008082:	4628      	mov	r0, r5
 8008084:	e023      	b.n	80080ce <floor+0x96>
 8008086:	4f29      	ldr	r7, [pc, #164]	@ (800812c <floor+0xf4>)
 8008088:	4137      	asrs	r7, r6
 800808a:	ea01 0307 	and.w	r3, r1, r7
 800808e:	4303      	orrs	r3, r0
 8008090:	d01d      	beq.n	80080ce <floor+0x96>
 8008092:	a323      	add	r3, pc, #140	@ (adr r3, 8008120 <floor+0xe8>)
 8008094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008098:	f7f8 f8bc 	bl	8000214 <__adddf3>
 800809c:	2200      	movs	r2, #0
 800809e:	2300      	movs	r3, #0
 80080a0:	f7f8 fcfe 	bl	8000aa0 <__aeabi_dcmpgt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d0eb      	beq.n	8008080 <floor+0x48>
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	bfbe      	ittt	lt
 80080ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80080b0:	4133      	asrlt	r3, r6
 80080b2:	18e4      	addlt	r4, r4, r3
 80080b4:	ea24 0407 	bic.w	r4, r4, r7
 80080b8:	2500      	movs	r5, #0
 80080ba:	e7e1      	b.n	8008080 <floor+0x48>
 80080bc:	2e33      	cmp	r6, #51	@ 0x33
 80080be:	dd0a      	ble.n	80080d6 <floor+0x9e>
 80080c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80080c4:	d103      	bne.n	80080ce <floor+0x96>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	f7f8 f8a3 	bl	8000214 <__adddf3>
 80080ce:	ec41 0b10 	vmov	d0, r0, r1
 80080d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80080da:	f04f 37ff 	mov.w	r7, #4294967295
 80080de:	40df      	lsrs	r7, r3
 80080e0:	4207      	tst	r7, r0
 80080e2:	d0f4      	beq.n	80080ce <floor+0x96>
 80080e4:	a30e      	add	r3, pc, #56	@ (adr r3, 8008120 <floor+0xe8>)
 80080e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ea:	f7f8 f893 	bl	8000214 <__adddf3>
 80080ee:	2200      	movs	r2, #0
 80080f0:	2300      	movs	r3, #0
 80080f2:	f7f8 fcd5 	bl	8000aa0 <__aeabi_dcmpgt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d0c2      	beq.n	8008080 <floor+0x48>
 80080fa:	2c00      	cmp	r4, #0
 80080fc:	da0a      	bge.n	8008114 <floor+0xdc>
 80080fe:	2e14      	cmp	r6, #20
 8008100:	d101      	bne.n	8008106 <floor+0xce>
 8008102:	3401      	adds	r4, #1
 8008104:	e006      	b.n	8008114 <floor+0xdc>
 8008106:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800810a:	2301      	movs	r3, #1
 800810c:	40b3      	lsls	r3, r6
 800810e:	441d      	add	r5, r3
 8008110:	4545      	cmp	r5, r8
 8008112:	d3f6      	bcc.n	8008102 <floor+0xca>
 8008114:	ea25 0507 	bic.w	r5, r5, r7
 8008118:	e7b2      	b.n	8008080 <floor+0x48>
 800811a:	2500      	movs	r5, #0
 800811c:	462c      	mov	r4, r5
 800811e:	e7af      	b.n	8008080 <floor+0x48>
 8008120:	8800759c 	.word	0x8800759c
 8008124:	7e37e43c 	.word	0x7e37e43c
 8008128:	bff00000 	.word	0xbff00000
 800812c:	000fffff 	.word	0x000fffff

08008130 <_init>:
 8008130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008132:	bf00      	nop
 8008134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008136:	bc08      	pop	{r3}
 8008138:	469e      	mov	lr, r3
 800813a:	4770      	bx	lr

0800813c <_fini>:
 800813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813e:	bf00      	nop
 8008140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008142:	bc08      	pop	{r3}
 8008144:	469e      	mov	lr, r3
 8008146:	4770      	bx	lr
